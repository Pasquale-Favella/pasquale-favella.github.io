{"pageProps":{"posts":[{"url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/24","repository_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io","labels_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/24/labels{/name}","comments_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/24/comments","events_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/24/events","html_url":"https://github.com/Pasquale-Favella/pasquale-favella.github.io/issues/24","id":2583503584,"node_id":"I_kwDOIwHgl86Z_SLg","number":24,"title":"Angular  NgRx Component Store: A Comprehensive Guide","user":{"login":"Pasquale-Favella","id":62385965,"node_id":"MDQ6VXNlcjYyMzg1OTY1","avatar_url":"https://avatars.githubusercontent.com/u/62385965?v=4","gravatar_id":"","url":"https://api.github.com/users/Pasquale-Favella","html_url":"https://github.com/Pasquale-Favella","followers_url":"https://api.github.com/users/Pasquale-Favella/followers","following_url":"https://api.github.com/users/Pasquale-Favella/following{/other_user}","gists_url":"https://api.github.com/users/Pasquale-Favella/gists{/gist_id}","starred_url":"https://api.github.com/users/Pasquale-Favella/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Pasquale-Favella/subscriptions","organizations_url":"https://api.github.com/users/Pasquale-Favella/orgs","repos_url":"https://api.github.com/users/Pasquale-Favella/repos","events_url":"https://api.github.com/users/Pasquale-Favella/events{/privacy}","received_events_url":"https://api.github.com/users/Pasquale-Favella/received_events","type":"User","site_admin":false},"labels":[{"id":4991782391,"node_id":"LA_kwDOIwHgl88AAAABKYiN9w","url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/labels/documentation","name":"documentation","color":"0075ca","default":true,"description":"Improvements or additions to documentation"},{"id":5011828087,"node_id":"LA_kwDOIwHgl88AAAABKrptdw","url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/labels/Angular","name":"Angular","color":"F85A56","default":false,"description":""},{"id":5012942463,"node_id":"LA_kwDOIwHgl88AAAABKstufw","url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/labels/Rxjs","name":"Rxjs","color":"f9d0c4","default":false,"description":""}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2024-10-12T23:34:12Z","updated_at":"2024-10-12T23:37:51Z","closed_at":"2024-10-12T23:34:49Z","author_association":"OWNER","active_lock_reason":null,"body":"In the ever-evolving world of Angular development, efficient state management is crucial for building robust and scalable applications. NgRx Component Store, a powerful library in the NgRx ecosystem, offers a streamlined approach to managing local state in Angular apps. This comprehensive guide will walk you through implementing NgRx Component Store in a real-world scenario: an e-commerce product catalog system.\n\n## Getting Started with NgRx Component Store\n\nBefore diving into our e-commerce example, let's set up NgRx Component Store in your Angular project:\n\n```bash\nng add @ngrx/component-store\n```\n\nThis command adds the necessary dependencies to your project, setting the stage for efficient state management.\n\n## Building a Product Catalog Store\n\nLet's create a component store for our product catalog:\n\n```typescript\nimport { Injectable } from '@angular/core';\nimport { ComponentStore } from '@ngrx/component-store';\n\ninterface Product {\n  id: number;\n  name: string;\n  description: string;\n  price: number;\n  category: string;\n  inStock: boolean;\n}\n\ninterface ProductCatalogState {\n  products: Product[];\n  loading: boolean;\n  error: string | null;\n  selectedProductId: number | null;\n  searchTerm: string;\n  categoryFilter: string | null;\n}\n\n@Injectable()\nexport class ProductCatalogStore extends ComponentStore<ProductCatalogState> {\n  constructor() {\n    super({\n      products: [],\n      loading: false,\n      error: null,\n      selectedProductId: null,\n      searchTerm: '',\n      categoryFilter: null\n    });\n  }\n}\n```\n\nThis structure forms the foundation of our product catalog state management.\n\n## Effective State Management Techniques\n\nEfficient state management is key to a performant Angular application. Let's add selectors to our store:\n\n```typescript\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class ProductCatalogStore extends ComponentStore<ProductCatalogState> {\n  // ... previous code\n\n  // Selectors\n  readonly products$: Observable<Product[]> = this.select(state => state.products);\n  readonly loading$: Observable<boolean> = this.select(state => state.loading);\n  readonly error$: Observable<string | null> = this.select(state => state.error);\n  readonly selectedProduct$: Observable<Product | undefined> = this.select(\n    state => state.products.find(product => product.id === state.selectedProductId)\n  );\n  readonly filteredProducts$: Observable<Product[]> = this.select(\n    this.products$,\n    state => state.searchTerm,\n    state => state.categoryFilter,\n    (products, searchTerm, categoryFilter) => {\n      return products\n        .filter(product => product.name.toLowerCase().includes(searchTerm.toLowerCase()))\n        .filter(product => !categoryFilter || product.category === categoryFilter);\n    }\n  );\n}\n```\n\nThese selectors provide a clean way to access and derive state in your components.\n\n## Implementing CRUD Operations\n\nCRUD (Create, Read, Update, Delete) operations are essential for any e-commerce platform. Let's implement these using updaters:\n\n```typescript\n@Injectable()\nexport class ProductCatalogStore extends ComponentStore<ProductCatalogState> {\n  // ... previous code\n\n  // Updaters\n  readonly setProducts = this.updater((state, products: Product[]) => ({\n    ...state,\n    products\n  }));\n\n  readonly addProduct = this.updater((state, product: Product) => ({\n    ...state,\n    products: [...state.products, product]\n  }));\n\n  readonly updateProduct = this.updater((state, updatedProduct: Product) => ({\n    ...state,\n    products: state.products.map(product =>\n      product.id === updatedProduct.id ? updatedProduct : product\n    )\n  }));\n\n  readonly removeProduct = this.updater((state, productId: number) => ({\n    ...state,\n    products: state.products.filter(product => product.id !== productId)\n  }));\n}\n```\n\nThese updaters provide a predictable way to modify the state of our product catalog.\n\n## Optimizing Performance with Selectors\n\nSelectors play a crucial role in optimizing the performance of your Angular application. They help in deriving complex state and preventing unnecessary re-renders:\n\n```typescript\nimport { map } from 'rxjs/operators';\n\n@Injectable()\nexport class ProductCatalogStore extends ComponentStore<ProductCatalogState> {\n  // ... previous code\n\n  readonly productsByCategory$ = this.select(\n    this.products$,\n    (products) => {\n      const categorizedProducts: { [key: string]: Product[] } = {};\n      products.forEach(product => {\n        if (!categorizedProducts[product.category]) {\n          categorizedProducts[product.category] = [];\n        }\n        categorizedProducts[product.category].push(product);\n      });\n      return categorizedProducts;\n    }\n  );\n\n  readonly totalValue$ = this.select(\n    this.products$,\n    (products) => products.reduce((total, product) => total + product.price, 0)\n  );\n}\n```\n\nThese advanced selectors demonstrate how to derive complex state efficiently.\n\n## Handling Asynchronous Operations\n\nIn real-world applications, asynchronous operations like API calls are common. Let's implement effects to handle these:\n\n```typescript\nimport { Injectable } from '@angular/core';\nimport { ComponentStore } from '@ngrx/component-store';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, catchError, switchMap, tap } from 'rxjs';\n\n@Injectable()\nexport class ProductCatalogStore extends ComponentStore<ProductCatalogState> {\n  constructor(private http: HttpClient) {\n    super({\n      products: [],\n      loading: false,\n      error: null,\n      selectedProductId: null,\n      searchTerm: '',\n      categoryFilter: null\n    });\n  }\n\n  // ... previous code\n\n  // Effects\n  readonly loadProducts = this.effect((trigger$: Observable<void>) => {\n    return trigger$.pipe(\n      tap(() => this.setLoading(true)),\n      switchMap(() => this.http.get<Product[]>('https://api.example.com/products').pipe(\n        tap({\n          next: (products) => {\n            this.setProducts(products);\n            this.setLoading(false);\n          },\n          error: (error) => {\n            this.setError('Failed to load products. Please try again later.');\n            this.setLoading(false);\n          }\n        }),\n        catchError(() => []) // Return empty array on error\n      ))\n    );\n  });\n}\n```\n\nThis effect demonstrates how to handle API calls and manage loading states effectively.\n\n## Advanced Features: Search and Filtering\n\nImplementing search and filtering enhances user experience in an e-commerce application:\n\n```typescript\n@Injectable()\nexport class ProductCatalogStore extends ComponentStore<ProductCatalogState> {\n  // ... previous code\n\n  readonly search = this.effect((searchTerm$: Observable<string>) => {\n    return searchTerm$.pipe(\n      tap((searchTerm) => this.setSearchTerm(searchTerm)),\n      switchMap((searchTerm) =>\n        this.http.get<Product[]>(`https://api.example.com/products?search=${searchTerm}`).pipe(\n          tap({\n            next: (products) => this.setProducts(products),\n            error: (error) => this.setError('Failed to search products. Please try again.')\n          })\n        )\n      )\n    );\n  });\n\n  readonly filterByCategory = this.effect((category$: Observable<string | null>) => {\n    return category$.pipe(\n      tap((category) => this.setCategoryFilter(category)),\n      switchMap((category) =>\n        this.http.get<Product[]>(`https://api.example.com/products${category ? `?category=${category}` : ''}`).pipe(\n          tap({\n            next: (products) => this.setProducts(products),\n            error: (error) => this.setError('Failed to filter products. Please try again.')\n          })\n        )\n      )\n    );\n  });\n}\n```\n\nThese effects demonstrate how to implement search and filtering functionality using NgRx Component Store.\n\n## Best Practices for NgRx Component Store\n\nTo get the most out of NgRx Component Store, follow these best practices:\n\n1. **Minimize State**: Keep your state as lean as possible. Derive complex state using selectors.\n2. **Use Updaters for Synchronous Operations**: Prefer updaters for simple, synchronous state changes.\n3. **Leverage Effects for Asynchronous Operations**: Use effects to handle side effects and asynchronous operations like API calls.\n4. **Optimize Selectors**: Use the `distinctUntilChanged` operator on your selectors to prevent unnecessary re-renders.\n5. **Handle Errors Gracefully**: Always include error handling in your effects and provide meaningful error messages to users.\n6. **Test Your Store**: Write unit tests for your selectors, updaters, and effects to ensure they work as expected.\n\n## Conclusion\n\nNgRx Component Store offers a powerful and flexible approach to state management in Angular applications. By following the techniques and best practices outlined in this guide, you can build efficient, scalable, and maintainable e-commerce applications. Remember to keep your state focused, leverage RxJS operators for complex operations, and always prioritize performance and user experience.\n\nAs you continue to explore NgRx Component Store, you'll discover even more ways to optimize your Angular applications. \n\nHappy coding","closed_by":{"login":"Pasquale-Favella","id":62385965,"node_id":"MDQ6VXNlcjYyMzg1OTY1","avatar_url":"https://avatars.githubusercontent.com/u/62385965?v=4","gravatar_id":"","url":"https://api.github.com/users/Pasquale-Favella","html_url":"https://github.com/Pasquale-Favella","followers_url":"https://api.github.com/users/Pasquale-Favella/followers","following_url":"https://api.github.com/users/Pasquale-Favella/following{/other_user}","gists_url":"https://api.github.com/users/Pasquale-Favella/gists{/gist_id}","starred_url":"https://api.github.com/users/Pasquale-Favella/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Pasquale-Favella/subscriptions","organizations_url":"https://api.github.com/users/Pasquale-Favella/orgs","repos_url":"https://api.github.com/users/Pasquale-Favella/repos","events_url":"https://api.github.com/users/Pasquale-Favella/events{/privacy}","received_events_url":"https://api.github.com/users/Pasquale-Favella/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/24/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/24/timeline","performed_via_github_app":null,"state_reason":"completed"},{"url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/23","repository_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io","labels_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/23/labels{/name}","comments_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/23/comments","events_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/23/events","html_url":"https://github.com/Pasquale-Favella/pasquale-favella.github.io/issues/23","id":2581663460,"node_id":"I_kwDOIwHgl86Z4Q7k","number":23,"title":"Leveraging @Aspect in Spring Boot: Enhancing Application Architecture","user":{"login":"Pasquale-Favella","id":62385965,"node_id":"MDQ6VXNlcjYyMzg1OTY1","avatar_url":"https://avatars.githubusercontent.com/u/62385965?v=4","gravatar_id":"","url":"https://api.github.com/users/Pasquale-Favella","html_url":"https://github.com/Pasquale-Favella","followers_url":"https://api.github.com/users/Pasquale-Favella/followers","following_url":"https://api.github.com/users/Pasquale-Favella/following{/other_user}","gists_url":"https://api.github.com/users/Pasquale-Favella/gists{/gist_id}","starred_url":"https://api.github.com/users/Pasquale-Favella/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Pasquale-Favella/subscriptions","organizations_url":"https://api.github.com/users/Pasquale-Favella/orgs","repos_url":"https://api.github.com/users/Pasquale-Favella/repos","events_url":"https://api.github.com/users/Pasquale-Favella/events{/privacy}","received_events_url":"https://api.github.com/users/Pasquale-Favella/received_events","type":"User","site_admin":false},"labels":[{"id":4991782391,"node_id":"LA_kwDOIwHgl88AAAABKYiN9w","url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/labels/documentation","name":"documentation","color":"0075ca","default":true,"description":"Improvements or additions to documentation"},{"id":5176884231,"node_id":"LA_kwDOIwHgl88AAAABNJD8Bw","url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/labels/Java","name":"Java","color":"57627E","default":false,"description":""},{"id":5176887291,"node_id":"LA_kwDOIwHgl88AAAABNJEH-w","url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/labels/Spring%20Boot","name":"Spring Boot","color":"10AE3D","default":false,"description":""}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2024-10-11T15:34:01Z","updated_at":"2024-10-11T15:34:24Z","closed_at":"2024-10-11T15:34:24Z","author_association":"OWNER","active_lock_reason":null,"body":"In the ever-evolving landscape of Java development, optimizing application architecture is crucial for maintaining efficient, scalable, and maintainable codebases. One powerful feature that has gained significant traction in the Spring Boot ecosystem is the `@Aspect` annotation. This article explores how `@Aspect` can revolutionize your application's structure, leading to improved performance and code organization.\r\n\r\n## Understanding @Aspect in Spring Boot\r\n\r\n`@Aspect` is a key component of Aspect-Oriented Programming (AOP) in Spring Boot. AOP is a programming paradigm that allows developers to separate cross-cutting concerns from the main business logic of an application. This separation results in cleaner, more modular code that is easier to maintain and extend.\r\n\r\n## Key Benefits of Using @Aspect\r\n\r\n1. **Improved Code Organization**: By separating cross-cutting concerns, developers can focus on core business logic, resulting in cleaner and more maintainable code.\r\n\r\n2. **Enhanced Performance**: `@Aspect` allows for efficient handling of repetitive tasks, such as logging and security checks, without cluttering the main codebase.\r\n\r\n3. **Increased Productivity**: Developers can reuse aspect code across multiple parts of the application, reducing development time and increasing overall productivity.\r\n\r\n4. **Better Resource Management**: Aspects can be used to optimize resource allocation and management, leading to improved application performance.\r\n\r\n5. **Simplified Debugging and Monitoring**: Centralized handling of cross-cutting concerns makes it easier to debug issues and monitor application performance.\r\n\r\n## Practical Applications with Code Examples\r\n\r\n### 1. Logging and Auditing\r\n\r\nImplementing comprehensive logging and auditing systems is crucial for maintaining security and compliance. With `@Aspect`, you can automatically log method entries and exits, track actions, and monitor performance metrics without modifying existing code.\r\n\r\nExample of a logging aspect:\r\n\r\n```java\r\nimport org.aspectj.lang.ProceedingJoinPoint;\r\nimport org.aspectj.lang.annotation.Around;\r\nimport org.aspectj.lang.annotation.Aspect;\r\nimport org.springframework.stereotype.Component;\r\n\r\n@Aspect\r\n@Component\r\npublic class LoggingAspect {\r\n\r\n    @Around(\"execution(* com.yourcompany.*.service.*.*(..))\")\r\n    public Object logMethodExecution(ProceedingJoinPoint joinPoint) throws Throwable {\r\n        String methodName = joinPoint.getSignature().getName();\r\n        logger.info(\"Entering method: {}\", methodName);\r\n        \r\n        long startTime = System.currentTimeMillis();\r\n        Object result = joinPoint.proceed();\r\n        long executionTime = System.currentTimeMillis() - startTime;\r\n        \r\n        logger.info(\"Exiting method: {}. Execution time: {}ms\", methodName, executionTime);\r\n        return result;\r\n    }\r\n}\r\n```\r\n\r\nThis aspect will automatically log the entry and exit of all methods in your service layer, along with their execution time.\r\n\r\n### 2. Security and Authentication\r\n\r\nEnhancing application security is a top priority for any organization. `@Aspect` can be used to implement method-level security checks and validate user permissions before executing sensitive operations.\r\n\r\nExample of a security aspect:\r\n\r\n```java\r\nimport org.aspectj.lang.ProceedingJoinPoint;\r\nimport org.aspectj.lang.annotation.Around;\r\nimport org.aspectj.lang.annotation.Aspect;\r\nimport org.springframework.stereotype.Component;\r\n\r\n@Aspect\r\n@Component\r\npublic class SecurityAspect {\r\n\r\n    @Around(\"@annotation(com.yourcompany.security.RequiresAdmin)\")\r\n    public Object checkAdminAccess(ProceedingJoinPoint joinPoint) throws Throwable {\r\n        if (securityService.currentUserIsAdmin()) {\r\n            return joinPoint.proceed();\r\n        } else {\r\n            throw new AccessDeniedException(\"Admin access required for this operation\");\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nThis aspect intercepts methods annotated with `@RequiresAdmin` and checks if the current user has admin privileges before allowing the method to execute.\r\n\r\n### 3. Transaction Management\r\n\r\nEnsuring data integrity in complex business operations is critical. `@Aspect` simplifies transaction management by automatically starting, committing, or rolling back transactions.\r\n\r\nExample of a transaction management aspect:\r\n\r\n```java\r\nimport org.aspectj.lang.ProceedingJoinPoint;\r\nimport org.aspectj.lang.annotation.Around;\r\nimport org.aspectj.lang.annotation.Aspect;\r\nimport org.springframework.stereotype.Component;\r\nimport org.springframework.transaction.TransactionStatus;\r\nimport org.springframework.transaction.support.TransactionTemplate;\r\n\r\n@Aspect\r\n@Component\r\npublic class TransactionAspect {\r\n\r\n    private final TransactionTemplate transactionTemplate;\r\n\r\n    public TransactionAspect(TransactionTemplate transactionTemplate) {\r\n        this.transactionTemplate = transactionTemplate;\r\n    }\r\n\r\n    @Around(\"@annotation(com.yourcompany.transaction.Transactional)\")\r\n    public Object manageTransaction(ProceedingJoinPoint joinPoint) throws Throwable {\r\n        return transactionTemplate.execute((TransactionStatus status) -> {\r\n            try {\r\n                return joinPoint.proceed();\r\n            } catch (Throwable throwable) {\r\n                status.setRollbackOnly();\r\n                throw new RuntimeException(\"Transaction failed, rolling back\", throwable);\r\n            }\r\n        });\r\n    }\r\n}\r\n```\r\n\r\nThis aspect manages transactions for methods annotated with `@Transactional`, automatically committing successful operations and rolling back in case of exceptions.\r\n\r\n### 4. Caching\r\n\r\nOptimizing application performance often involves effective caching strategies. With `@Aspect`, you can implement method-level caching without modifying existing code.\r\n\r\nExample of a caching aspect:\r\n\r\n```java\r\nimport org.aspectj.lang.ProceedingJoinPoint;\r\nimport org.aspectj.lang.annotation.Around;\r\nimport org.aspectj.lang.annotation.Aspect;\r\nimport org.springframework.stereotype.Component;\r\nimport java.util.concurrent.ConcurrentHashMap;\r\n\r\n@Aspect\r\n@Component\r\npublic class CachingAspect {\r\n\r\n    private final ConcurrentHashMap<String, Object> cache = new ConcurrentHashMap<>();\r\n\r\n    @Around(\"@annotation(com.yourcompany.cache.Cacheable)\")\r\n    public Object cacheMethod(ProceedingJoinPoint joinPoint) throws Throwable {\r\n        String cacheKey = generateCacheKey(joinPoint);\r\n        \r\n        if (cache.containsKey(cacheKey)) {\r\n            return cache.get(cacheKey);\r\n        }\r\n        \r\n        Object result = joinPoint.proceed();\r\n        cache.put(cacheKey, result);\r\n        return result;\r\n    }\r\n\r\n    private String generateCacheKey(ProceedingJoinPoint joinPoint) {\r\n        // Implementation to generate a unique cache key based on method and parameters\r\n        return joinPoint.getSignature().toString();\r\n    }\r\n}\r\n```\r\n\r\nThis aspect implements a simple caching mechanism for methods annotated with `@Cacheable`, storing and retrieving results based on method signatures.\r\n\r\n## Implementation Strategy\r\n\r\nTo successfully leverage `@Aspect` in your Spring Boot applications, consider the following strategy:\r\n\r\n1. **Identify Cross-Cutting Concerns**: Work with your development team to identify common functionalities that span multiple parts of your application.\r\n\r\n2. **Design Aspect Architecture**: Create a clear architecture for implementing aspects, ensuring they are modular and reusable.\r\n\r\n3. **Implement Gradually**: Start by implementing aspects for non-critical functionalities, gradually expanding to more complex use cases.\r\n\r\n4. **Monitor and Optimize**: Regularly review the performance impact of implemented aspects and optimize as necessary.\r\n\r\n5. **Educate and Train**: Invest in training your development team to ensure they can effectively leverage `@Aspect` in their daily work.\r\n\r\n## Conclusion\r\n\r\nIncorporating `@Aspect` into your Spring Boot applications can significantly enhance your software development practices. By enabling cleaner code, improved performance, and increased developer productivity, `@Aspect` provides a powerful tool for modern Java applications.\r\n\r\nAs you explore the possibilities of Aspect-Oriented Programming in Spring Boot, remember that the key to successful implementation lies in careful planning, gradual adoption, and ongoing optimization. With the right approach, `@Aspect` can be a game-changer for your application's architecture and overall performance.\r\n\r\nHappy coding!","closed_by":{"login":"Pasquale-Favella","id":62385965,"node_id":"MDQ6VXNlcjYyMzg1OTY1","avatar_url":"https://avatars.githubusercontent.com/u/62385965?v=4","gravatar_id":"","url":"https://api.github.com/users/Pasquale-Favella","html_url":"https://github.com/Pasquale-Favella","followers_url":"https://api.github.com/users/Pasquale-Favella/followers","following_url":"https://api.github.com/users/Pasquale-Favella/following{/other_user}","gists_url":"https://api.github.com/users/Pasquale-Favella/gists{/gist_id}","starred_url":"https://api.github.com/users/Pasquale-Favella/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Pasquale-Favella/subscriptions","organizations_url":"https://api.github.com/users/Pasquale-Favella/orgs","repos_url":"https://api.github.com/users/Pasquale-Favella/repos","events_url":"https://api.github.com/users/Pasquale-Favella/events{/privacy}","received_events_url":"https://api.github.com/users/Pasquale-Favella/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/23/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/23/timeline","performed_via_github_app":null,"state_reason":"completed"},{"url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/22","repository_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io","labels_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/22/labels{/name}","comments_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/22/comments","events_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/22/events","html_url":"https://github.com/Pasquale-Favella/pasquale-favella.github.io/issues/22","id":2581642697,"node_id":"I_kwDOIwHgl86Z4L3J","number":22,"title":"Functional Programming in Java: A Comprehensive Guide","user":{"login":"Pasquale-Favella","id":62385965,"node_id":"MDQ6VXNlcjYyMzg1OTY1","avatar_url":"https://avatars.githubusercontent.com/u/62385965?v=4","gravatar_id":"","url":"https://api.github.com/users/Pasquale-Favella","html_url":"https://github.com/Pasquale-Favella","followers_url":"https://api.github.com/users/Pasquale-Favella/followers","following_url":"https://api.github.com/users/Pasquale-Favella/following{/other_user}","gists_url":"https://api.github.com/users/Pasquale-Favella/gists{/gist_id}","starred_url":"https://api.github.com/users/Pasquale-Favella/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Pasquale-Favella/subscriptions","organizations_url":"https://api.github.com/users/Pasquale-Favella/orgs","repos_url":"https://api.github.com/users/Pasquale-Favella/repos","events_url":"https://api.github.com/users/Pasquale-Favella/events{/privacy}","received_events_url":"https://api.github.com/users/Pasquale-Favella/received_events","type":"User","site_admin":false},"labels":[{"id":4991782391,"node_id":"LA_kwDOIwHgl88AAAABKYiN9w","url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/labels/documentation","name":"documentation","color":"0075ca","default":true,"description":"Improvements or additions to documentation"},{"id":5176884231,"node_id":"LA_kwDOIwHgl88AAAABNJD8Bw","url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/labels/Java","name":"Java","color":"57627E","default":false,"description":""}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2024-10-11T15:24:53Z","updated_at":"2024-10-11T15:25:30Z","closed_at":"2024-10-11T15:25:30Z","author_association":"OWNER","active_lock_reason":null,"body":"Functional programming (FP) has become a core paradigm in modern software development, and with **Java 8**, the language adopted several functional constructs, such as **lambda expressions**, **streams**, and the **Optional** class. Although Java is primarily object-oriented, these new additions enable developers to write more declarative and concise code, enhancing productivity, readability, and maintainability.\r\n\r\nIn this guide, we will cover the basics of **functional programming in Java**, explore key concepts such as lambda expressions, method references, and the Stream API, and examine the advantages and potential pitfalls of functional programming. By the end, you will have a solid understanding of how to use functional programming constructs in Java to write more efficient and expressive code.\r\n\r\n## What is Functional Programming?\r\n\r\n**Functional programming** is a programming paradigm that treats computation as the evaluation of mathematical functions and avoids changing state and mutable data. In functional programming, **functions are first-class citizens**, meaning they can be passed around as arguments, returned from other functions, and stored in variables—just like any other object.\r\n\r\n### Key Characteristics of Functional Programming:\r\n- **First-class functions**: Functions are treated as values.\r\n- **Immutability**: Data is immutable, meaning once created, its state cannot change.\r\n- **Pure functions**: Functions do not have side effects, meaning they don’t alter any external state or data.\r\n- **Declarative approach**: Focuses on **what** to do rather than **how** to do it.\r\n- **Higher-order functions**: Functions can accept other functions as parameters or return them.\r\n\r\nWhile **Java** is not a purely functional language like **Haskell** or **Scala**, it adopts many functional programming principles, making Java more flexible and powerful.\r\n\r\n## Functional Programming Constructs in Java\r\n\r\n### 1. Lambda Expressions\r\n\r\nThe introduction of **lambda expressions** in Java 8 was a game changer for simplifying the verbosity of anonymous classes and enabling functional programming. A **lambda expression** is essentially an anonymous function—short snippets of code that can be passed as arguments or stored in variables.\r\n\r\nA typical lambda expression looks like this:\r\n\r\n```java\r\n(parameters) -> expression\r\n```\r\nHere’s an example of using a lambda expression to create a **Comparator** for sorting:\r\n\r\n```java\r\nList<String> names = Arrays.asList(\"Alice\", \"Bob\", \"Charlie\");\r\nCollections.sort(names, (s1, s2) -> s1.compareTo(s2));\r\n```\r\nIn this case, `(s1, s2) -> s1.compareTo(s2)` is a lambda expression representing a `Comparator`.\r\n\r\n#### Advantages of Lambda Expressions:\r\n- **Concise code**: Reduces boilerplate code and makes the code more readable.\r\n- **Declarative programming**: Focuses on what the function does rather than how it is implemented.\r\n\r\n### 2. Method References\r\n\r\n**Method references** are shorthand for lambda expressions that call an existing method. Java provides several types of method references:\r\n- **Static method reference**: `ClassName::staticMethod`\r\n- **Instance method reference**: `instance::method`\r\n- **Constructor reference**: `ClassName::new`\r\n\r\nHere’s an example using a method reference instead of a lambda expression:\r\n\r\n```java\r\nList<String> names = Arrays.asList(\"Alice\", \"Bob\", \"Charlie\");\r\nnames.forEach(System.out::println);\r\n```\r\nIn this case, `System.out::println` is a method reference pointing to the `println` method of `System.out`.\r\n\r\n### 3. Functional Interfaces\r\n\r\nA **functional interface** is an interface with a single abstract method but can have multiple default or static methods. Functional interfaces are used as the target types for lambda expressions and method references.\r\n\r\nJava provides several built-in functional interfaces in the `java.util.function` package, such as:\r\n- **Predicate<T>**: Takes one argument and returns a boolean.\r\n- **Function<T, R>**: Takes one argument and returns a result.\r\n- **Supplier<T>**: Returns a result and takes no arguments.\r\n- **Consumer<T>**: Takes one argument and performs an action without returning any result.\r\n\r\nExample of `Predicate` functional interface:\r\n\r\n```java\r\nPredicate<Integer> isEven = x -> x % 2 == 0;\r\nSystem.out.println(isEven.test(4));  // true\r\n```\r\n### 4. The Stream API\r\n\r\nThe **Stream API** is one of the most powerful features introduced in Java 8, enabling functional-style operations on sequences of elements, such as collections, arrays, or input sources. Streams allow you to express complex data processing queries in a declarative way.\r\n\r\nStreams support both **intermediate** operations, which are lazy and return a new stream (like `filter`, `map`, `sorted`), and **terminal** operations, which are eager and produce a result or a side-effect (like `forEach`, `collect`, `reduce`).\r\n\r\nHere’s an example of filtering and transforming a list using the Stream API:\r\n\r\n```java\r\nList<String> names = Arrays.asList(\"Alice\", \"Bob\", \"Charlie\", \"David\");\r\nList<String> filteredNames = names.stream()\r\n    .filter(name -> name.startsWith(\"A\"))\r\n    .map(String::toUpperCase)\r\n    .collect(Collectors.toList());\r\n\r\nSystem.out.println(filteredNames);  // [ALICE]\r\n```\r\nThis code snippet demonstrates the power of streams to compose multiple operations in a clean, declarative manner.\r\n\r\n### 5. Optional Class\r\n\r\nThe **Optional** class provides a way to handle null values more gracefully by encapsulating optional values and avoiding `NullPointerException`. Instead of using `null` to indicate the absence of a value, you can use `Optional` to explicitly state whether a value is present.\r\n\r\nExample of using `Optional`:\r\n\r\n```java\r\nOptional<String> name = Optional.ofNullable(\"John\");\r\nname.ifPresent(System.out::println);  // John\r\n\r\nOptional<String> emptyName = Optional.ofNullable(null);\r\nSystem.out.println(emptyName.orElse(\"Unknown\"));  // Unknown\r\n```\r\nThe `Optional` class makes the code more readable and less prone to errors when dealing with potentially missing values.\r\n\r\n## Benefits of Functional Programming in Java\r\n\r\n1. **More Readable Code**: With lambda expressions and the Stream API, Java code can become much more declarative, making it easier to read and understand at a glance.\r\n   \r\n2. **Less Boilerplate**: Functional programming in Java reduces the verbosity typical of object-oriented programming by eliminating the need for anonymous classes, especially when dealing with simple tasks like sorting or filtering collections.\r\n\r\n3. **Encourages Immutability**: Functional programming promotes immutability, which can lead to fewer bugs, especially in concurrent applications. Immutable objects are inherently thread-safe, avoiding issues related to shared state.\r\n\r\n4. **Modular and Testable**: Pure functions are isolated from the outside world, which makes them easier to test and reuse. They rely only on their input and always produce the same output for the same input.\r\n\r\n## Potential Pitfalls of Functional Programming in Java\r\n\r\n1. **Learning Curve**: For developers unfamiliar with functional programming concepts, it may take time to adjust to writing and understanding lambda expressions, method references, and higher-order functions.\r\n\r\n2. **Performance Considerations**: While functional-style code can be more expressive, it can also introduce performance overhead, especially when using streams and lambda expressions in scenarios where performance is critical. Lazy evaluation in streams can mitigate some of this, but it’s essential to profile and optimize if necessary.\r\n\r\n3. **Overuse of `Optional`**: Although `Optional` helps to avoid null checks, overuse or inappropriate use (e.g., returning `Optional` in collections) can lead to performance issues and complicate the code.\r\n\r\n## Best Practices for Functional Programming in Java\r\n\r\n1. **Use Streams for Collection Processing**: Whenever you’re working with collections, consider using streams to filter, map, and reduce data rather than using traditional loops.\r\n\r\n2. **Leverage Method References**: Use method references where possible to make your code cleaner and more readable.\r\n\r\n3. **Use `Optional` Wisely**: Use `Optional` to represent optional return values but avoid overusing it in places like fields, method parameters, or collections.\r\n\r\n4. **Keep Functions Pure**: Whenever possible, write pure functions to avoid unintended side effects. This makes your code easier to reason about and test.\r\n\r\n## Conclusion\r\n\r\nFunctional programming has transformed the way developers write Java code. With the addition of lambda expressions, the Stream API, and the `Optional` class, Java has become much more expressive and powerful. While functional programming may initially seem foreign to Java developers who are used to object-oriented paradigms, embracing these new constructs can lead to more concise, maintainable, and testable code.\r\n\r\nBy understanding and applying functional programming principles in Java, you can write more efficient and elegant solutions to complex problems. However, as with any paradigm, it’s important to strike a balance between functional and object-oriented styles to avoid overcomplicating your code.\r\n\r\nHappy coding!\r\n\r\n\r\n","closed_by":{"login":"Pasquale-Favella","id":62385965,"node_id":"MDQ6VXNlcjYyMzg1OTY1","avatar_url":"https://avatars.githubusercontent.com/u/62385965?v=4","gravatar_id":"","url":"https://api.github.com/users/Pasquale-Favella","html_url":"https://github.com/Pasquale-Favella","followers_url":"https://api.github.com/users/Pasquale-Favella/followers","following_url":"https://api.github.com/users/Pasquale-Favella/following{/other_user}","gists_url":"https://api.github.com/users/Pasquale-Favella/gists{/gist_id}","starred_url":"https://api.github.com/users/Pasquale-Favella/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Pasquale-Favella/subscriptions","organizations_url":"https://api.github.com/users/Pasquale-Favella/orgs","repos_url":"https://api.github.com/users/Pasquale-Favella/repos","events_url":"https://api.github.com/users/Pasquale-Favella/events{/privacy}","received_events_url":"https://api.github.com/users/Pasquale-Favella/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/22/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/22/timeline","performed_via_github_app":null,"state_reason":"completed"}],"projects":[{"id":421885911,"node_id":"R_kgDOGSV31w","name":"Knowledgeable","full_name":"Pasquale-Favella/Knowledgeable","private":false,"owner":{"login":"Pasquale-Favella","id":62385965,"node_id":"MDQ6VXNlcjYyMzg1OTY1","avatar_url":"https://avatars.githubusercontent.com/u/62385965?v=4","gravatar_id":"","url":"https://api.github.com/users/Pasquale-Favella","html_url":"https://github.com/Pasquale-Favella","followers_url":"https://api.github.com/users/Pasquale-Favella/followers","following_url":"https://api.github.com/users/Pasquale-Favella/following{/other_user}","gists_url":"https://api.github.com/users/Pasquale-Favella/gists{/gist_id}","starred_url":"https://api.github.com/users/Pasquale-Favella/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Pasquale-Favella/subscriptions","organizations_url":"https://api.github.com/users/Pasquale-Favella/orgs","repos_url":"https://api.github.com/users/Pasquale-Favella/repos","events_url":"https://api.github.com/users/Pasquale-Favella/events{/privacy}","received_events_url":"https://api.github.com/users/Pasquale-Favella/received_events","type":"User","site_admin":false},"html_url":"https://github.com/Pasquale-Favella/Knowledgeable","description":"Beautiful wikipedia search engine with React Node & Express","fork":false,"url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable","forks_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/forks","keys_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/keys{/key_id}","collaborators_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/teams","hooks_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/hooks","issue_events_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/issues/events{/number}","events_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/events","assignees_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/assignees{/user}","branches_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/branches{/branch}","tags_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/tags","blobs_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/git/refs{/sha}","trees_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/git/trees{/sha}","statuses_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/statuses/{sha}","languages_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/languages","stargazers_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/stargazers","contributors_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/contributors","subscribers_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/subscribers","subscription_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/subscription","commits_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/commits{/sha}","git_commits_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/git/commits{/sha}","comments_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/comments{/number}","issue_comment_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/issues/comments{/number}","contents_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/contents/{+path}","compare_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/compare/{base}...{head}","merges_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/merges","archive_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/downloads","issues_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/issues{/number}","pulls_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/pulls{/number}","milestones_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/milestones{/number}","notifications_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/labels{/name}","releases_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/releases{/id}","deployments_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/deployments","created_at":"2021-10-27T16:06:07Z","updated_at":"2023-01-20T11:14:33Z","pushed_at":"2021-11-02T14:31:40Z","git_url":"git://github.com/Pasquale-Favella/Knowledgeable.git","ssh_url":"git@github.com:Pasquale-Favella/Knowledgeable.git","clone_url":"https://github.com/Pasquale-Favella/Knowledgeable.git","svn_url":"https://github.com/Pasquale-Favella/Knowledgeable","homepage":"https://knowledgeable.herokuapp.com/","size":1048,"stargazers_count":3,"watchers_count":3,"language":"JavaScript","has_issues":true,"has_projects":true,"has_downloads":true,"has_wiki":true,"has_pages":false,"has_discussions":false,"forks_count":0,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":0,"license":null,"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":["express","mern-stack","neumorphism","react","search-engine"],"visibility":"public","forks":0,"open_issues":0,"watchers":3,"default_branch":"master"},{"id":587325591,"node_id":"R_kgDOIwHglw","name":"pasquale-favella.github.io","full_name":"Pasquale-Favella/pasquale-favella.github.io","private":false,"owner":{"login":"Pasquale-Favella","id":62385965,"node_id":"MDQ6VXNlcjYyMzg1OTY1","avatar_url":"https://avatars.githubusercontent.com/u/62385965?v=4","gravatar_id":"","url":"https://api.github.com/users/Pasquale-Favella","html_url":"https://github.com/Pasquale-Favella","followers_url":"https://api.github.com/users/Pasquale-Favella/followers","following_url":"https://api.github.com/users/Pasquale-Favella/following{/other_user}","gists_url":"https://api.github.com/users/Pasquale-Favella/gists{/gist_id}","starred_url":"https://api.github.com/users/Pasquale-Favella/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Pasquale-Favella/subscriptions","organizations_url":"https://api.github.com/users/Pasquale-Favella/orgs","repos_url":"https://api.github.com/users/Pasquale-Favella/repos","events_url":"https://api.github.com/users/Pasquale-Favella/events{/privacy}","received_events_url":"https://api.github.com/users/Pasquale-Favella/received_events","type":"User","site_admin":false},"html_url":"https://github.com/Pasquale-Favella/pasquale-favella.github.io","description":"Awesome blogfolio with Next.js","fork":false,"url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io","forks_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/forks","keys_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/keys{/key_id}","collaborators_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/teams","hooks_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/hooks","issue_events_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/events{/number}","events_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/events","assignees_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/assignees{/user}","branches_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/branches{/branch}","tags_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/tags","blobs_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/git/refs{/sha}","trees_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/git/trees{/sha}","statuses_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/statuses/{sha}","languages_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/languages","stargazers_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/stargazers","contributors_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/contributors","subscribers_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/subscribers","subscription_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/subscription","commits_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/commits{/sha}","git_commits_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/git/commits{/sha}","comments_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/comments{/number}","issue_comment_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/comments{/number}","contents_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/contents/{+path}","compare_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/compare/{base}...{head}","merges_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/merges","archive_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/downloads","issues_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues{/number}","pulls_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/pulls{/number}","milestones_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/milestones{/number}","notifications_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/labels{/name}","releases_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/releases{/id}","deployments_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/deployments","created_at":"2023-01-10T13:48:57Z","updated_at":"2024-10-12T23:44:42Z","pushed_at":"2024-10-12T23:45:29Z","git_url":"git://github.com/Pasquale-Favella/pasquale-favella.github.io.git","ssh_url":"git@github.com:Pasquale-Favella/pasquale-favella.github.io.git","clone_url":"https://github.com/Pasquale-Favella/pasquale-favella.github.io.git","svn_url":"https://github.com/Pasquale-Favella/pasquale-favella.github.io","homepage":"https://pasquale-favella.github.io/","size":9712,"stargazers_count":3,"watchers_count":3,"language":"TypeScript","has_issues":true,"has_projects":true,"has_downloads":true,"has_wiki":true,"has_pages":true,"has_discussions":true,"forks_count":1,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":0,"license":{"key":"mit","name":"MIT License","spdx_id":"MIT","url":"https://api.github.com/licenses/mit","node_id":"MDc6TGljZW5zZTEz"},"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":["nextjs","portfolio","react","tailwindcss"],"visibility":"public","forks":1,"open_issues":0,"watchers":3,"default_branch":"main"},{"id":440884146,"node_id":"R_kgDOGkdbsg","name":"Spring-React-PokeShow","full_name":"Pasquale-Favella/Spring-React-PokeShow","private":false,"owner":{"login":"Pasquale-Favella","id":62385965,"node_id":"MDQ6VXNlcjYyMzg1OTY1","avatar_url":"https://avatars.githubusercontent.com/u/62385965?v=4","gravatar_id":"","url":"https://api.github.com/users/Pasquale-Favella","html_url":"https://github.com/Pasquale-Favella","followers_url":"https://api.github.com/users/Pasquale-Favella/followers","following_url":"https://api.github.com/users/Pasquale-Favella/following{/other_user}","gists_url":"https://api.github.com/users/Pasquale-Favella/gists{/gist_id}","starred_url":"https://api.github.com/users/Pasquale-Favella/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Pasquale-Favella/subscriptions","organizations_url":"https://api.github.com/users/Pasquale-Favella/orgs","repos_url":"https://api.github.com/users/Pasquale-Favella/repos","events_url":"https://api.github.com/users/Pasquale-Favella/events{/privacy}","received_events_url":"https://api.github.com/users/Pasquale-Favella/received_events","type":"User","site_admin":false},"html_url":"https://github.com/Pasquale-Favella/Spring-React-PokeShow","description":"Toy web app for pokemon discovery with spring boot and react","fork":false,"url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow","forks_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/forks","keys_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/keys{/key_id}","collaborators_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/teams","hooks_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/hooks","issue_events_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/issues/events{/number}","events_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/events","assignees_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/assignees{/user}","branches_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/branches{/branch}","tags_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/tags","blobs_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/git/refs{/sha}","trees_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/git/trees{/sha}","statuses_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/statuses/{sha}","languages_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/languages","stargazers_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/stargazers","contributors_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/contributors","subscribers_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/subscribers","subscription_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/subscription","commits_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/commits{/sha}","git_commits_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/git/commits{/sha}","comments_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/comments{/number}","issue_comment_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/issues/comments{/number}","contents_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/contents/{+path}","compare_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/compare/{base}...{head}","merges_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/merges","archive_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/downloads","issues_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/issues{/number}","pulls_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/pulls{/number}","milestones_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/milestones{/number}","notifications_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/labels{/name}","releases_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/releases{/id}","deployments_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/deployments","created_at":"2021-12-22T14:26:29Z","updated_at":"2023-01-20T11:15:41Z","pushed_at":"2021-12-29T15:55:35Z","git_url":"git://github.com/Pasquale-Favella/Spring-React-PokeShow.git","ssh_url":"git@github.com:Pasquale-Favella/Spring-React-PokeShow.git","clone_url":"https://github.com/Pasquale-Favella/Spring-React-PokeShow.git","svn_url":"https://github.com/Pasquale-Favella/Spring-React-PokeShow","homepage":"","size":393,"stargazers_count":3,"watchers_count":3,"language":"Java","has_issues":true,"has_projects":true,"has_downloads":true,"has_wiki":true,"has_pages":false,"has_discussions":false,"forks_count":0,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":0,"license":null,"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":["fullstack","react","spring-boot"],"visibility":"public","forks":0,"open_issues":0,"watchers":3,"default_branch":"master"}]},"__N_SSG":true}