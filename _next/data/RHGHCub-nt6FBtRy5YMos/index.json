{"pageProps":{"posts":[{"url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/28","repository_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io","labels_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/28/labels{/name}","comments_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/28/comments","events_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/28/events","html_url":"https://github.com/Pasquale-Favella/pasquale-favella.github.io/issues/28","id":3211797484,"node_id":"I_kwDOIwHgl86_cCPs","number":28,"title":"Mastering the Compound Pattern in React: Building Declarative and Flexible Components with TypeScript","user":{"login":"Pasquale-Favella","id":62385965,"node_id":"MDQ6VXNlcjYyMzg1OTY1","avatar_url":"https://avatars.githubusercontent.com/u/62385965?v=4","gravatar_id":"","url":"https://api.github.com/users/Pasquale-Favella","html_url":"https://github.com/Pasquale-Favella","followers_url":"https://api.github.com/users/Pasquale-Favella/followers","following_url":"https://api.github.com/users/Pasquale-Favella/following{/other_user}","gists_url":"https://api.github.com/users/Pasquale-Favella/gists{/gist_id}","starred_url":"https://api.github.com/users/Pasquale-Favella/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Pasquale-Favella/subscriptions","organizations_url":"https://api.github.com/users/Pasquale-Favella/orgs","repos_url":"https://api.github.com/users/Pasquale-Favella/repos","events_url":"https://api.github.com/users/Pasquale-Favella/events{/privacy}","received_events_url":"https://api.github.com/users/Pasquale-Favella/received_events","type":"User","user_view_type":"public","site_admin":false},"labels":[{"id":4991782391,"node_id":"LA_kwDOIwHgl88AAAABKYiN9w","url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/labels/documentation","name":"documentation","color":"0075ca","default":true,"description":"Improvements or additions to documentation"},{"id":5011911244,"node_id":"LA_kwDOIwHgl88AAAABKruyTA","url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/labels/React","name":"React","color":"1d76db","default":false,"description":""},{"id":5744992208,"node_id":"LA_kwDOIwHgl88AAAABVm2f0A","url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/labels/Next%20JS","name":"Next JS","color":"5319e7","default":false,"description":""}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2025-07-08T09:40:22Z","updated_at":"2025-07-08T09:40:37Z","closed_at":"2025-07-08T09:40:37Z","author_association":"OWNER","active_lock_reason":null,"sub_issues_summary":{"total":0,"completed":0,"percent_completed":0},"issue_dependencies_summary":{"blocked_by":0,"total_blocked_by":0,"blocking":0,"total_blocking":0},"body":"The Compound Pattern in React represents a powerful design approach that enables developers to create flexible, reusable components that work together seamlessly. This pattern addresses common challenges like prop drilling while promoting declarative code that's both readable and maintainable. This comprehensive guide explores the compound pattern through practical TypeScript examples, performance considerations, and advanced implementations.\n\n## Understanding the Compound Pattern\n\nThe Compound Pattern involves creating a parent component that manages state and behavior, while child components consume and display this state through a shared context. Compound components are a pattern in React, where several components are used together such that they share an implicit state that allows them to communicate with each other in the background. This pattern is particularly effective when multiple components need to work together to accomplish a shared task.\n\n### What Makes It Special?\n\nCompound components can be said to be a pattern that encloses the state and the behavior of a group of components but still gives the rendering control of its variable parts back to the external user. This approach provides several key advantages:\n\n- **Declarative API**: Components express what they do, not how they do it\n- **Flexible Composition**: Users can arrange child components in any order\n- **Implicit State Sharing**: Components communicate without explicit prop passing\n- **Enhanced Reusability**: Each component can be used independently when needed\n- **Type Safety**: TypeScript provides excellent support for this pattern\n\n## The Prop Drilling Problem\n\nBefore diving into the compound pattern, let's examine the traditional prop drilling approach and its limitations.\n\n### Traditional Prop Drilling Example\n\nConsider a simple menu component built with traditional prop drilling:\n\n```tsx\n// Traditional approach with prop drilling\ninterface MenuItem {\n  id: string;\n  label: string;\n}\n\ninterface MenuProps {\n  isOpen: boolean;\n  onToggle: () => void;\n  items: MenuItem[];\n  activeItem: string | null;\n  onItemClick: (id: string) => void;\n}\n\nfunction Menu({ isOpen, onToggle, items, activeItem, onItemClick }: MenuProps) {\n  return (\n    <div className=\"menu\">\n      <MenuButton isOpen={isOpen} onToggle={onToggle} />\n      <MenuList \n        isOpen={isOpen} \n        items={items} \n        activeItem={activeItem} \n        onItemClick={onItemClick} \n      />\n    </div>\n  );\n}\n\ninterface MenuButtonProps {\n  isOpen: boolean;\n  onToggle: () => void;\n}\n\nfunction MenuButton({ isOpen, onToggle }: MenuButtonProps) {\n  return (\n    <button onClick={onToggle}>\n      {isOpen ? 'Close' : 'Open'} Menu\n    </button>\n  );\n}\n\ninterface MenuListProps {\n  isOpen: boolean;\n  items: MenuItem[];\n  activeItem: string | null;\n  onItemClick: (id: string) => void;\n}\n\nfunction MenuList({ isOpen, items, activeItem, onItemClick }: MenuListProps) {\n  if (!isOpen) return null;\n  \n  return (\n    <ul>\n      {items.map(item => (\n        <MenuItemComponent\n          key={item.id}\n          item={item}\n          isActive={item.id === activeItem}\n          onItemClick={onItemClick}\n        />\n      ))}\n    </ul>\n  );\n}\n\ninterface MenuItemComponentProps {\n  item: MenuItem;\n  isActive: boolean;\n  onItemClick: (id: string) => void;\n}\n\nfunction MenuItemComponent({ item, isActive, onItemClick }: MenuItemComponentProps) {\n  return (\n    <li \n      className={isActive ? 'active' : ''}\n      onClick={() => onItemClick(item.id)}\n    >\n      {item.label}\n    </li>\n  );\n}\n\n// Usage\nfunction App() {\n  const [isOpen, setIsOpen] = useState(false);\n  const [activeItem, setActiveItem] = useState<string | null>(null);\n  const items: MenuItem[] = [\n    { id: '1', label: 'Home' },\n    { id: '2', label: 'About' },\n    { id: '3', label: 'Contact' }\n  ];\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      onToggle={() => setIsOpen(!isOpen)}\n      items={items}\n      activeItem={activeItem}\n      onItemClick={setActiveItem}\n    />\n  );\n}\n```\n\n### Problems with This Approach\n\nThe traditional approach presents several challenges:\n\n- **Tight Coupling**: Components are tightly bound to their parent's prop structure\n- **Verbose Props**: Every intermediate component must accept and pass props\n- **Limited Flexibility**: Changing the component structure requires updating multiple prop interfaces\n- **Poor Reusability**: Components become difficult to reuse in different contexts\n- **Complex Type Definitions**: Managing types across multiple levels becomes cumbersome\n\n## Compound Pattern Solution\n\nThe compound pattern elegantly solves these problems by using React Context to share state implicitly among related components.\n\n### Basic Compound Pattern Implementation\n\n```tsx\nimport React, { createContext, useContext, useState, ReactNode } from 'react';\n\n// Define the context type\ninterface MenuContextType {\n  isOpen: boolean;\n  setIsOpen: (isOpen: boolean) => void;\n  activeItem: string | null;\n  setActiveItem: (id: string | null) => void;\n  toggle: () => void;\n  selectItem: (id: string) => void;\n}\n\n// Create context for the compound component\nconst MenuContext = createContext<MenuContextType | undefined>(undefined);\n\n// Custom hook to access menu context\nfunction useMenuContext(): MenuContextType {\n  const context = useContext(MenuContext);\n  if (!context) {\n    throw new Error('Menu compound components must be used within Menu');\n  }\n  return context;\n}\n\n// Main Menu component interface\ninterface MenuProps {\n  children: ReactNode;\n}\n\n// Main Menu component that provides context\nfunction Menu({ children }: MenuProps) {\n  const [isOpen, setIsOpen] = useState(false);\n  const [activeItem, setActiveItem] = useState<string | null>(null);\n\n  const contextValue: MenuContextType = {\n    isOpen,\n    setIsOpen,\n    activeItem,\n    setActiveItem,\n    toggle: () => setIsOpen(!isOpen),\n    selectItem: (id: string) => setActiveItem(id)\n  };\n\n  return (\n    <MenuContext.Provider value={contextValue}>\n      <div className=\"menu\">\n        {children}\n      </div>\n    </MenuContext.Provider>\n  );\n}\n\n// Compound components with proper typing\ninterface MenuButtonProps {\n  children?: ReactNode;\n}\n\nMenu.Button = function MenuButton({ children }: MenuButtonProps) {\n  const { isOpen, toggle } = useMenuContext();\n  \n  return (\n    <button onClick={toggle}>\n      {children || (isOpen ? 'Close Menu' : 'Open Menu')}\n    </button>\n  );\n};\n\ninterface MenuListProps {\n  children: ReactNode;\n}\n\nMenu.List = function MenuList({ children }: MenuListProps) {\n  const { isOpen } = useMenuContext();\n  \n  if (!isOpen) return null;\n  \n  return <ul className=\"menu-list\">{children}</ul>;\n};\n\ninterface MenuItemProps {\n  id: string;\n  children: ReactNode;\n}\n\nMenu.Item = function MenuItem({ id, children }: MenuItemProps) {\n  const { activeItem, selectItem } = useMenuContext();\n  const isActive = activeItem === id;\n  \n  return (\n    <li \n      className={`menu-item ${isActive ? 'active' : ''}`}\n      onClick={() => selectItem(id)}\n    >\n      {children}\n    </li>\n  );\n};\n\n// Clean, declarative usage with full type safety\nfunction App() {\n  return (\n    <Menu>\n      <Menu.Button>Toggle Navigation</Menu.Button>\n      <Menu.List>\n        <Menu.Item id=\"home\">Home</Menu.Item>\n        <Menu.Item id=\"about\">About</Menu.Item>\n        <Menu.Item id=\"services\">Services</Menu.Item>\n        <Menu.Item id=\"contact\">Contact</Menu.Item>\n      </Menu.List>\n    </Menu>\n  );\n}\n```\n\n### Key Improvements\n\nThe compound pattern version demonstrates several improvements:\n\n- **No Prop Drilling**: State is shared through context, eliminating prop passing\n- **Declarative Syntax**: The usage clearly expresses the component structure\n- **Flexible Composition**: Items can be arranged in any order or configuration\n- **Implicit Communication**: Components automatically stay in sync\n- **Type Safety**: Full TypeScript support with proper error handling\n\n## Advanced Compound Pattern Implementations\n\n### 1. Flexible Dialog Component\n\nHere's a more complex example showcasing the pattern's power with a dialog component:\n\n```tsx\nimport React, { \n  createContext, \n  useContext, \n  useState, \n  useEffect, \n  ReactNode, \n  MouseEvent,\n  KeyboardEvent\n} from 'react';\n\ninterface DialogContextType {\n  isOpen: boolean;\n  setIsOpen: (isOpen: boolean) => void;\n  loading: boolean;\n  setLoading: (loading: boolean) => void;\n  open: () => void;\n  close: () => void;\n  showLoading: () => void;\n  hideLoading: () => void;\n}\n\nconst DialogContext = createContext<DialogContextType | undefined>(undefined);\n\nfunction useDialogContext(): DialogContextType {\n  const context = useContext(DialogContext);\n  if (!context) {\n    throw new Error('Dialog compound components must be used within Dialog');\n  }\n  return context;\n}\n\ninterface DialogProps {\n  children: ReactNode;\n  onClose?: () => void;\n}\n\nfunction Dialog({ children, onClose }: DialogProps) {\n  const [isOpen, setIsOpen] = useState(false);\n  const [loading, setLoading] = useState(false);\n\n  const contextValue: DialogContextType = {\n    isOpen,\n    setIsOpen,\n    loading,\n    setLoading,\n    open: () => setIsOpen(true),\n    close: () => {\n      setIsOpen(false);\n      onClose?.();\n    },\n    showLoading: () => setLoading(true),\n    hideLoading: () => setLoading(false)\n  };\n\n  // Handle escape key\n  useEffect(() => {\n    const handleEscape = (e: KeyboardEvent<Document>) => {\n      if (e.key === 'Escape' && isOpen) {\n        contextValue.close();\n      }\n    };\n\n    if (isOpen) {\n      document.addEventListener('keydown', handleEscape as any);\n      document.body.style.overflow = 'hidden';\n    }\n\n    return () => {\n      document.removeEventListener('keydown', handleEscape as any);\n      document.body.style.overflow = 'unset';\n    };\n  }, [isOpen, contextValue]);\n\n  return (\n    <DialogContext.Provider value={contextValue}>\n      {children}\n    </DialogContext.Provider>\n  );\n}\n\ninterface DialogTriggerProps {\n  children: ReactNode;\n  asChild?: boolean;\n}\n\nDialog.Trigger = function DialogTrigger({ children, asChild = false }: DialogTriggerProps) {\n  const { open } = useDialogContext();\n  \n  if (asChild && React.isValidElement(children)) {\n    return React.cloneElement(children, { onClick: open });\n  }\n  \n  return <button onClick={open}>{children}</button>;\n};\n\ninterface DialogContentProps {\n  children: ReactNode;\n  className?: string;\n}\n\nDialog.Content = function DialogContent({ children, className = '' }: DialogContentProps) {\n  const { isOpen, close } = useDialogContext();\n  \n  if (!isOpen) return null;\n  \n  const handleOverlayClick = (e: MouseEvent<HTMLDivElement>) => {\n    if (e.target === e.currentTarget) {\n      close();\n    }\n  };\n  \n  return (\n    <div className={`dialog-overlay ${className}`} onClick={handleOverlayClick}>\n      <div className=\"dialog-content\">\n        {children}\n      </div>\n    </div>\n  );\n};\n\ninterface DialogHeaderProps {\n  children: ReactNode;\n}\n\nDialog.Header = function DialogHeader({ children }: DialogHeaderProps) {\n  return <div className=\"dialog-header\">{children}</div>;\n};\n\ninterface DialogBodyProps {\n  children: ReactNode;\n}\n\nDialog.Body = function DialogBody({ children }: DialogBodyProps) {\n  const { loading } = useDialogContext();\n  \n  return (\n    <div className=\"dialog-body\">\n      {loading && <div className=\"loading-spinner\">Loading...</div>}\n      {children}\n    </div>\n  );\n};\n\ninterface DialogFooterProps {\n  children: ReactNode;\n}\n\nDialog.Footer = function DialogFooter({ children }: DialogFooterProps) {\n  return <div className=\"dialog-footer\">{children}</div>;\n};\n\ninterface DialogCloseProps {\n  children?: ReactNode;\n}\n\nDialog.Close = function DialogClose({ children }: DialogCloseProps) {\n  const { close } = useDialogContext();\n  \n  return (\n    <button className=\"dialog-close\" onClick={close}>\n      {children || '×'}\n    </button>\n  );\n};\n\n// Usage example with full type safety\nfunction UserProfile() {\n  const handleSave = async (): Promise<void> => {\n    // Simulate API call\n    await new Promise(resolve => setTimeout(resolve, 2000));\n  };\n\n  return (\n    <Dialog onClose={() => console.log('Dialog closed')}>\n      <Dialog.Trigger>\n        <button className=\"primary-btn\">Edit Profile</button>\n      </Dialog.Trigger>\n      \n      <Dialog.Content>\n        <Dialog.Header>\n          <h2>Edit Profile</h2>\n          <Dialog.Close />\n        </Dialog.Header>\n        \n        <Dialog.Body>\n          <form>\n            <input type=\"text\" placeholder=\"Name\" />\n            <input type=\"email\" placeholder=\"Email\" />\n            <textarea placeholder=\"Bio\"></textarea>\n          </form>\n        </Dialog.Body>\n        \n        <Dialog.Footer>\n          <Dialog.Close>\n            <button className=\"secondary-btn\">Cancel</button>\n          </Dialog.Close>\n          <button className=\"primary-btn\" onClick={handleSave}>\n            Save Changes\n          </button>\n        </Dialog.Footer>\n      </Dialog.Content>\n    </Dialog>\n  );\n}\n```\n\n### 2. Advanced Data Table Component\n\nFor more complex scenarios, here's a data table implementation that showcases the pattern's scalability:\n\n```tsx\nimport React, { \n  createContext, \n  useContext, \n  useState, \n  useMemo, \n  ReactNode \n} from 'react';\n\n// Generic type for table data\ninterface TableData {\n  id: string | number;\n  [key: string]: any;\n}\n\ntype SortDirection = 'asc' | 'desc';\n\ninterface TableContextType<T extends TableData> {\n  data: T[];\n  originalData: T[];\n  sortColumn: keyof T | null;\n  sortDirection: SortDirection;\n  filters: Record<string, string>;\n  selectedRows: Set<string | number>;\n  sort: (column: keyof T) => void;\n  filter: (column: string, value: string) => void;\n  selectRow: (id: string | number) => void;\n  selectAllRows: () => void;\n  clearSelection: () => void;\n}\n\nconst TableContext = createContext<TableContextType<any> | undefined>(undefined);\n\nfunction useTableContext<T extends TableData>(): TableContextType<T> {\n  const context = useContext(TableContext);\n  if (!context) {\n    throw new Error('Table compound components must be used within Table');\n  }\n  return context;\n}\n\ninterface TableProps<T extends TableData> {\n  data: T[];\n  children: ReactNode;\n}\n\nfunction Table<T extends TableData>({ data, children }: TableProps<T>) {\n  const [sortColumn, setSortColumn] = useState<keyof T | null>(null);\n  const [sortDirection, setSortDirection] = useState<SortDirection>('asc');\n  const [filters, setFilters] = useState<Record<string, string>>({});\n  const [selectedRows, setSelectedRows] = useState<Set<string | number>>(new Set());\n\n  const processedData = useMemo(() => {\n    let result = [...data];\n\n    // Apply filters\n    Object.entries(filters).forEach(([column, value]) => {\n      if (value) {\n        result = result.filter(row => \n          String(row[column]).toLowerCase().includes(value.toLowerCase())\n        );\n      }\n    });\n\n    // Apply sorting\n    if (sortColumn) {\n      result.sort((a, b) => {\n        const aVal = a[sortColumn];\n        const bVal = b[sortColumn];\n        const modifier = sortDirection === 'asc' ? 1 : -1;\n        \n        if (aVal < bVal) return -1 * modifier;\n        if (aVal > bVal) return 1 * modifier;\n        return 0;\n      });\n    }\n\n    return result;\n  }, [data, filters, sortColumn, sortDirection]);\n\n  const contextValue: TableContextType<T> = {\n    data: processedData,\n    originalData: data,\n    sortColumn,\n    sortDirection,\n    filters,\n    selectedRows,\n    sort: (column: keyof T) => {\n      if (sortColumn === column) {\n        setSortDirection(prev => prev === 'asc' ? 'desc' : 'asc');\n      } else {\n        setSortColumn(column);\n        setSortDirection('asc');\n      }\n    },\n    filter: (column: string, value: string) => {\n      setFilters(prev => ({ ...prev, [column]: value }));\n    },\n    selectRow: (id: string | number) => {\n      setSelectedRows(prev => {\n        const newSet = new Set(prev);\n        if (newSet.has(id)) {\n          newSet.delete(id);\n        } else {\n          newSet.add(id);\n        }\n        return newSet;\n      });\n    },\n    selectAllRows: () => {\n      setSelectedRows(new Set(processedData.map(row => row.id)));\n    },\n    clearSelection: () => {\n      setSelectedRows(new Set());\n    }\n  };\n\n  return (\n    <TableContext.Provider value={contextValue}>\n      <div className=\"table-container\">\n        {children}\n      </div>\n    </TableContext.Provider>\n  );\n}\n\ninterface TableHeaderProps {\n  children: ReactNode;\n}\n\nTable.Header = function TableHeader({ children }: TableHeaderProps) {\n  return <thead className=\"table-header\">{children}</thead>;\n};\n\ninterface TableBodyProps {\n  children: ReactNode;\n}\n\nTable.Body = function TableBody({ children }: TableBodyProps) {\n  const { data } = useTableContext();\n  \n  return (\n    <tbody className=\"table-body\">\n      {data.map((row, index) => (\n        <TableRowProvider key={row.id} row={row} index={index}>\n          {children}\n        </TableRowProvider>\n      ))}\n    </tbody>\n  );\n};\n\ninterface TableRowProps {\n  children: ReactNode;\n}\n\nTable.Row = function TableRow({ children }: TableRowProps) {\n  const { row, index } = useTableRowContext();\n  const { selectedRows } = useTableContext();\n  \n  return (\n    <tr \n      className={`table-row ${selectedRows.has(row.id) ? 'selected' : ''}`}\n      data-index={index}\n    >\n      {children}\n    </tr>\n  );\n};\n\ninterface TableHeaderCellProps {\n  column?: string;\n  children: ReactNode;\n  sortable?: boolean;\n}\n\nTable.HeaderCell = function TableHeaderCell({ \n  column, \n  children, \n  sortable = false \n}: TableHeaderCellProps) {\n  const { sort, sortColumn, sortDirection } = useTableContext();\n  \n  const handleClick = () => {\n    if (sortable && column) {\n      sort(column);\n    }\n  };\n\n  return (\n    <th \n      className={`table-header-cell ${sortable ? 'sortable' : ''}`}\n      onClick={handleClick}\n    >\n      {children}\n      {sortable && sortColumn === column && (\n        <span className=\"sort-indicator\">\n          {sortDirection === 'asc' ? '↑' : '↓'}\n        </span>\n      )}\n    </th>\n  );\n};\n\ninterface TableCellProps {\n  column?: string;\n  children?: ReactNode;\n}\n\nTable.Cell = function TableCell({ column, children }: TableCellProps) {\n  const { row } = useTableRowContext();\n  \n  return (\n    <td className=\"table-cell\">\n      {children || (column ? row[column] : '')}\n    </td>\n  );\n};\n\nTable.SelectCell = function TableSelectCell() {\n  const { row } = useTableRowContext();\n  const { selectedRows, selectRow } = useTableContext();\n  \n  return (\n    <td className=\"table-select-cell\">\n      <input\n        type=\"checkbox\"\n        checked={selectedRows.has(row.id)}\n        onChange={() => selectRow(row.id)}\n      />\n    </td>\n  );\n};\n\ninterface TableFilterProps {\n  column: string;\n  placeholder?: string;\n}\n\nTable.Filter = function TableFilter({ column, placeholder }: TableFilterProps) {\n  const { filters, filter } = useTableContext();\n  \n  return (\n    <input\n      type=\"text\"\n      placeholder={placeholder}\n      value={filters[column] || ''}\n      onChange={(e) => filter(column, e.target.value)}\n      className=\"table-filter\"\n    />\n  );\n};\n\n// Row context for accessing current row data\ninterface TableRowContextType<T extends TableData = TableData> {\n  row: T;\n  index: number;\n}\n\nconst TableRowContext = createContext<TableRowContextType | undefined>(undefined);\n\ninterface TableRowProviderProps<T extends TableData> {\n  row: T;\n  index: number;\n  children: ReactNode;\n}\n\nfunction TableRowProvider<T extends TableData>({ \n  row, \n  index, \n  children \n}: TableRowProviderProps<T>) {\n  return (\n    <TableRowContext.Provider value={{ row, index }}>\n      {children}\n    </TableRowContext.Provider>\n  );\n}\n\nfunction useTableRowContext<T extends TableData = TableData>(): TableRowContextType<T> {\n  const context = useContext(TableRowContext);\n  if (!context) {\n    throw new Error('Table row components must be used within Table.Body');\n  }\n  return context as TableRowContextType<T>;\n}\n\n// Usage example with proper typing\ninterface User {\n  id: string;\n  name: string;\n  email: string;\n  role: 'Admin' | 'User';\n}\n\nfunction UsersTable() {\n  const users: User[] = [\n    { id: '1', name: 'John Doe', email: 'john@example.com', role: 'Admin' },\n    { id: '2', name: 'Jane Smith', email: 'jane@example.com', role: 'User' },\n    { id: '3', name: 'Bob Johnson', email: 'bob@example.com', role: 'User' }\n  ];\n\n  return (\n    <div>\n      <div className=\"table-controls\">\n        <Table.Filter column=\"name\" placeholder=\"Filter by name...\" />\n        <Table.Filter column=\"email\" placeholder=\"Filter by email...\" />\n      </div>\n      \n      <table>\n        <Table<User> data={users}>\n          <Table.Header>\n            <tr>\n              <Table.HeaderCell>\n                <input type=\"checkbox\" />\n              </Table.HeaderCell>\n              <Table.HeaderCell column=\"name\" sortable>\n                Name\n              </Table.HeaderCell>\n              <Table.HeaderCell column=\"email\" sortable>\n                Email\n              </Table.HeaderCell>\n              <Table.HeaderCell column=\"role\">\n                Role\n              </Table.HeaderCell>\n            </tr>\n          </Table.Header>\n          \n          <Table.Body>\n            <Table.Row>\n              <Table.SelectCell />\n              <Table.Cell column=\"name\" />\n              <Table.Cell column=\"email\" />\n              <Table.Cell column=\"role\">\n                <span className=\"role-badge\">\n                  {/* Custom rendering with full type safety */}\n                </span>\n              </Table.Cell>\n            </Table.Row>\n          </Table.Body>\n        </Table>\n      </div>\n    </div>\n  );\n}\n```\n\n## Performance Considerations\n\nWhile the compound pattern offers excellent developer experience, it's important to consider performance implications:\n\n### Context Performance Optimization\n\n```tsx\nimport React, { \n  createContext, \n  useContext, \n  useMemo, \n  useCallback, \n  useState,\n  ReactNode \n} from 'react';\n\ninterface MenuState {\n  isOpen: boolean;\n  activeItem: string | null;\n}\n\ninterface MenuActions {\n  toggle: () => void;\n  selectItem: (id: string) => void;\n}\n\nconst MenuStateContext = createContext<MenuState | undefined>(undefined);\nconst MenuActionsContext = createContext<MenuActions | undefined>(undefined);\n\ninterface OptimizedMenuProps {\n  children: ReactNode;\n}\n\nfunction OptimizedMenu({ children }: OptimizedMenuProps) {\n  const [isOpen, setIsOpen] = useState(false);\n  const [activeItem, setActiveItem] = useState<string | null>(null);\n\n  // Separate state context (changes frequently)\n  const stateContextValue = useMemo((): MenuState => ({\n    isOpen,\n    activeItem\n  }), [isOpen, activeItem]);\n\n  // Separate actions context (stable)\n  const actionsContextValue = useMemo((): MenuActions => ({\n    toggle: () => setIsOpen(prev => !prev),\n    selectItem: (id: string) => setActiveItem(id)\n  }), []);\n\n  return (\n    <MenuStateContext.Provider value={stateContextValue}>\n      <MenuActionsContext.Provider value={actionsContextValue}>\n        <div className=\"menu\">{children}</div>\n      </MenuActionsContext.Provider>\n    </MenuStateContext.Provider>\n  );\n}\n\n// Separate hooks for better performance\nfunction useMenuState(): MenuState {\n  const context = useContext(MenuStateContext);\n  if (!context) {\n    throw new Error('useMenuState must be used within OptimizedMenu');\n  }\n  return context;\n}\n\nfunction useMenuActions(): MenuActions {\n  const context = useContext(MenuActionsContext);\n  if (!context) {\n    throw new Error('useMenuActions must be used within OptimizedMenu');\n  }\n  return context;\n}\n```\n\n### Best Practices for Performance\n\n1. **Split Contexts**: Separate frequently changing state from stable actions\n2. **Memoize Context Values**: Use `useMemo` to prevent unnecessary re-renders\n3. **Optimize Child Components**: Use `React.memo` for compound components when appropriate\n4. **Lazy Evaluation**: Only compute expensive values when needed\n5. **Proper TypeScript**: Use generics and proper typing for better performance and DX\n\n## When to Use the Compound Pattern\n\nThe compound pattern shines in specific scenarios:\n\n### Ideal Use Cases\n\n- **Related Component Groups**: When components naturally work together (tabs, accordion, dropdown)\n- **Complex State Management**: When multiple components need to share and synchronize state\n- **Flexible APIs**: When users need control over component arrangement and styling\n- **Design Systems**: When building reusable component libraries with TypeScript\n- **Library Development**: When creating components that need to be highly composable\n\n### When to Avoid\n\n- **Simple Components**: When prop drilling involves only one or two levels\n- **Performance-Critical Paths**: When context updates would cause expensive re-renders\n- **Unrelated Components**: When components don't naturally belong together\n- **Over-Engineering**: When simpler patterns would suffice\n\n## Comparison with Other Patterns\n\n### Compound Pattern vs. Render Props\n\n```tsx\n// Render Props approach\ninterface MenuRenderProps {\n  isOpen: boolean;\n  setIsOpen: (isOpen: boolean) => void;\n  toggle: () => void;\n}\n\ninterface MenuWithRenderProps {\n  children: (props: MenuRenderProps) => ReactNode;\n}\n\nfunction MenuWithRenderProps({ children }: MenuWithRenderProps) {\n  const [isOpen, setIsOpen] = useState(false);\n  \n  return children({ \n    isOpen, \n    setIsOpen, \n    toggle: () => setIsOpen(!isOpen) \n  });\n}\n\n// Usage - less declarative\n<MenuWithRenderProps>\n  {({ isOpen, toggle }) => (\n    <div>\n      <button onClick={toggle}>Toggle</button>\n      {isOpen && <ul>...</ul>}\n    </div>\n  )}\n</MenuWithRenderProps>\n\n// Compound Pattern is more declarative and readable\n<Menu>\n  <Menu.Button>Toggle</Menu.Button>\n  <Menu.List>...</Menu.List>\n</Menu>\n```\n\n### Compound Pattern vs. HOCs\n\nThe compound pattern offers better composition and avoids the wrapper hell often associated with Higher-Order Components while providing excellent TypeScript support and better inference.\n# **Extending the pattern: beyond composition**\n\nOnce you've grasped the power of the Compound Pattern, it's time to push beyond. Here are some advanced techniques that can transform your components from simple building blocks into true user interface ecosystems.\n\n## Auto-Detection of Child Components\n\nSometimes exposing a declarative API isn't enough, we also need to be smart about how our components behave based on their structure. Using `React.Children` and traversal functions, we can create components that automatically adapt to their content.\n\n```tsx\nimport React, { ReactNode, ReactElement, Children, isValidElement } from 'react';\n\ninterface TabsProps {\n  children: ReactNode;\n  defaultValue?: string;\n}\n\nfunction Tabs({ children, defaultValue }: TabsProps) {\n  const [activeTab, setActiveTab] = useState<string>(() => {\n    // Auto-detect first tab if no default provided\n    if (defaultValue) return defaultValue;\n    \n    const tabList = Children.toArray(children).find(\n      (child): child is ReactElement => \n        isValidElement(child) && child.type === Tabs.List\n    );\n    \n    if (tabList) {\n      const firstTrigger = Children.toArray(tabList.props.children).find(\n        (child): child is ReactElement => \n          isValidElement(child) && child.type === Tabs.Trigger\n      );\n      \n      return firstTrigger?.props.value || '';\n    }\n    \n    return '';\n  });\n\n  const contextValue = {\n    activeTab,\n    setActiveTab,\n    // Auto-detect available tabs\n    availableTabs: useMemo(() => {\n      const tabs: string[] = [];\n      \n      Children.forEach(children, (child) => {\n        if (isValidElement(child) && child.type === Tabs.Content) {\n          tabs.push(child.props.value);\n        }\n      });\n      \n      return tabs;\n    }, [children])\n  };\n\n  return (\n    <TabsContext.Provider value={contextValue}>\n      <div className=\"tabs\">{children}</div>\n    </TabsContext.Provider>\n  );\n}\n\nTabs.List = function TabsList({ children }: { children: ReactNode }) {\n  const { availableTabs } = useTabsContext();\n  \n  // Auto-filter only valid triggers\n  const validTriggers = Children.toArray(children).filter(\n    (child): child is ReactElement => \n      isValidElement(child) && \n      child.type === Tabs.Trigger &&\n      availableTabs.includes(child.props.value)\n  );\n\n  return (\n    <div className=\"tabs-list\" role=\"tablist\">\n      {validTriggers}\n    </div>\n  );\n};\n\nTabs.Trigger = function TabsTrigger({ \n  value,\n  children \n}: { \n  value: string; \n  children: ReactNode \n}) {\n  const { activeTab, setActiveTab } = useTabsContext();\n  \n  return (\n    <button\n      role=\"tab\"\n      aria-selected={activeTab === value}\n      className={`tabs-trigger ${activeTab === value ? 'active' : ''}`}\n      onClick={() => setActiveTab(value)}\n    >\n      {children}\n    </button>\n  );\n};\n\nTabs.Content = function TabsContent({ \n  value, \n  children \n}: { \n  value: string; \n  children: ReactNode \n}) {\n  const { activeTab } = useTabsContext();\n  \n  if (activeTab !== value) return null;\n  \n  return (\n    <div role=\"tabpanel\" className=\"tabs-content\">\n      {children}\n    </div>\n  );\n};\n\n// Usage with auto-detection\nfunction SmartTabs() {\n  return (\n    <Tabs defaultValue=\"overview\">\n      <Tabs.List>\n        <Tabs.Trigger value=\"overview\">Overview</Tabs.Trigger>\n        <Tabs.Trigger value=\"settings\">Settings</Tabs.Trigger>\n        <Tabs.Trigger value=\"invalid\">Invalid</Tabs.Trigger> {/* Automatically filtered */}\n      </Tabs.List>\n      \n      <Tabs.Content value=\"overview\">\n        <h2>Overview Content</h2>\n      </Tabs.Content>\n      \n      <Tabs.Content value=\"settings\">\n        <h2>Settings Content</h2>\n      </Tabs.Content>\n      \n      {/* The \"invalid\" trigger has no corresponding content */}\n    </Tabs>\n  );\n}\n```\n\n## Context Overrides at Intermediate Levels\n\nOne of the most powerful patterns is the ability to override compound component behavior at intermediate levels. This allows you to create nested components that can modify parent behavior without breaking the communication chain.\n\n```tsx\ninterface NestedMenuContextType extends MenuContextType {\n  level: number;\n  parentContext?: MenuContextType;\n}\n\nconst NestedMenuContext = createContext<NestedMenuContextType | undefined>(undefined);\n\ninterface SubmenuProps {\n  children: ReactNode;\n  trigger: ReactNode;\n  disabled?: boolean;\n}\n\nfunction Submenu({ children, trigger, disabled = false }: SubmenuProps) {\n  const parentContext = useMenuContext();\n  const [isOpen, setIsOpen] = useState(false);\n  \n  // Override specific behaviors while preserving parent context\n  const nestedContextValue: NestedMenuContextType = {\n    ...parentContext,\n    level: (parentContext as any).level + 1 || 1,\n    parentContext,\n    isOpen,\n    setIsOpen,\n    toggle: () => !disabled && setIsOpen(!isOpen),\n    // Preserve parent's active item logic\n    selectItem: (id: string) => {\n      parentContext.selectItem(id);\n      setIsOpen(false); // Close submenu when item is selected\n    }\n  };\n\n  return (\n    <NestedMenuContext.Provider value={nestedContextValue}>\n      <div className={`submenu level-${nestedContextValue.level}`}>\n        <div \n          className={`submenu-trigger ${disabled ? 'disabled' : ''}`}\n          onClick={nestedContextValue.toggle}\n        >\n          {trigger}\n        </div>\n        \n        {isOpen && (\n          <div className=\"submenu-content\">\n            {children}\n          </div>\n        )}\n      </div>\n    </NestedMenuContext.Provider>\n  );\n}\n\n// Hook that works with both normal and nested context\nfunction useMenuOrNestedContext(): MenuContextType | NestedMenuContextType {\n  const nestedContext = useContext(NestedMenuContext);\n  const menuContext = useMenuContext();\n  \n  return nestedContext || menuContext;\n}\n\n// Usage with nested overrides\nfunction AdvancedMenu() {\n  return (\n    <Menu>\n      <Menu.Button>Main Menu</Menu.Button>\n      <Menu.List>\n        <Menu.Item id=\"home\">Home</Menu.Item>\n        \n        <Submenu trigger={<span>Products ▶</span>}>\n          <Menu.Item id=\"product-1\">Product 1</Menu.Item>\n          <Menu.Item id=\"product-2\">Product 2</Menu.Item>\n          \n          <Submenu trigger={<span>Categories ▶</span>}>\n            <Menu.Item id=\"cat-1\">Category 1</Menu.Item>\n            <Menu.Item id=\"cat-2\">Category 2</Menu.Item>\n          </Submenu>\n        </Submenu>\n        \n        <Menu.Item id=\"about\">About</Menu.Item>\n      </Menu.List>\n    </Menu>\n  );\n}\n```\n\n## Dynamic Slots: The ShadCN/Radix Pattern\n\nThe true power of the compound pattern emerges when we implement dynamic slots, allowing components to adapt and reorganize based on content. This is the secret behind the flexibility of libraries like Radix UI and ShadCN.\n\n```tsx\ninterface SlotProps {\n  children?: ReactNode;\n  asChild?: boolean;\n}\n\n// Primitive Slot component inspired by Radix\nfunction Slot({ children, asChild = false, ...props }: SlotProps & any) {\n  if (asChild && React.isValidElement(children)) {\n    return React.cloneElement(children, {\n      ...props,\n      ...children.props,\n      className: `${props.className || ''} ${children.props.className || ''}`.trim()\n    });\n  }\n  \n  return React.createElement('div', props, children);\n}\n\n// Advanced Dialog with dynamic slots\ninterface DialogWithSlotsProps {\n  children: ReactNode;\n  modal?: boolean;\n  onOpenChange?: (open: boolean) => void;\n}\n\nfunction DialogWithSlots({ children, modal = true, onOpenChange }: DialogWithSlotsProps) {\n  const [isOpen, setIsOpen] = useState(false);\n  \n  const handleOpenChange = (open: boolean) => {\n    setIsOpen(open);\n    onOpenChange?.(open);\n  };\n\n  // Detect and organize slots automatically\n  const slots = useMemo(() => {\n    const result: {\n      trigger?: ReactElement;\n      content?: ReactElement;\n      overlay?: ReactElement;\n      portal?: ReactElement;\n    } = {};\n    \n    Children.forEach(children, (child) => {\n      if (isValidElement(child)) {\n        const displayName = (child.type as any).displayName;\n        \n        switch (displayName) {\n          case 'DialogTrigger':\n            result.trigger = child;\n            break;\n          case 'DialogContent':\n            result.content = child;\n            break;\n          case 'DialogOverlay':\n            result.overlay = child;\n            break;\n          case 'DialogPortal':\n            result.portal = child;\n            break;\n        }\n      }\n    });\n    \n    return result;\n  }, [children]);\n\n  const contextValue = {\n    isOpen,\n    onOpenChange: handleOpenChange,\n    modal,\n    slots\n  };\n\n  return (\n    <DialogContext.Provider value={contextValue}>\n      {slots.trigger}\n      {isOpen && (\n        modal ? (\n          <DialogPortal>\n            {slots.overlay}\n            {slots.content}\n          </DialogPortal>\n        ) : (\n          <>\n            {slots.overlay}\n            {slots.content}\n          </>\n        )\n      )}\n    </DialogContext.Provider>\n  );\n}\n\n// Dynamic slot components\ninterface DialogTriggerProps {\n  children: ReactNode;\n  asChild?: boolean;\n}\n\nDialogWithSlots.Trigger = function DialogTrigger({ \n  children, \n  asChild = false \n}: DialogTriggerProps) {\n  const { onOpenChange } = useDialogContext();\n  \n  const handleClick = () => onOpenChange(true);\n  \n  return (\n    <Slot asChild={asChild} onClick={handleClick}>\n      {children}\n    </Slot>\n  );\n};\n\nDialogWithSlots.Trigger.displayName = 'DialogTrigger';\n\ninterface DialogContentProps {\n  children: ReactNode;\n  className?: string;\n  onPointerDownOutside?: (event: Event) => void;\n  onEscapeKeyDown?: (event: KeyboardEvent) => void;\n}\n\nDialogWithSlots.Content = function DialogContent({\n  children,\n  className,\n  onPointerDownOutside,\n  onEscapeKeyDown\n}: DialogContentProps) {\n  const { isOpen, onOpenChange, modal } = useDialogContext();\n  \n  useEffect(() => {\n    const handleEscape = (e: KeyboardEvent) => {\n      if (e.key === 'Escape') {\n        onEscapeKeyDown?.(e);\n        if (!e.defaultPrevented) {\n          onOpenChange(false);\n        }\n      }\n    };\n\n    if (isOpen) {\n      document.addEventListener('keydown', handleEscape);\n    }\n\n    return () => {\n      document.removeEventListener('keydown', handleEscape);\n    };\n  }, [isOpen, onOpenChange, onEscapeKeyDown]);\n\n  const handlePointerDownOutside = (e: Event) => {\n    onPointerDownOutside?.(e);\n    if (!e.defaultPrevented && modal) {\n      onOpenChange(false);\n    }\n  };\n\n  return (\n    <div\n      className={`dialog-content ${className || ''}`}\n      onPointerDown={(e) => {\n        if (e.target === e.currentTarget) {\n          handlePointerDownOutside(e.nativeEvent);\n        }\n      }}\n    >\n      {children}\n    </div>\n  );\n};\n\nDialogWithSlots.Content.displayName = 'DialogContent';\n\n// Portal component for rendering outside DOM hierarchy\ninterface DialogPortalProps {\n  children: ReactNode;\n  container?: Element;\n}\n\nDialogWithSlots.Portal = function DialogPortal({ \n  children, \n  container \n}: DialogPortalProps) {\n  const [mounted, setMounted] = useState(false);\n  \n  useEffect(() => {\n    setMounted(true);\n  }, []);\n\n  if (!mounted) return null;\n\n  return ReactDOM.createPortal(\n    children,\n    container || document.body\n  );\n};\n\nDialogWithSlots.Portal.displayName = 'DialogPortal';\n\n// Overlay component\ninterface DialogOverlayProps {\n  className?: string;\n  children?: ReactNode;\n}\n\nDialogWithSlots.Overlay = function DialogOverlay({ \n  className,\n  children \n}: DialogOverlayProps) {\n  return (\n    <div className={`dialog-overlay ${className || ''}`}>\n      {children}\n    </div>\n  );\n};\n\nDialogWithSlots.Overlay.displayName = 'DialogOverlay';\n\n// Advanced usage with complete flexibility\nfunction FlexibleDialog() {\n  return (\n    <DialogWithSlots modal onOpenChange={(open) => console.log('Dialog:', open)}>\n      <DialogWithSlots.Trigger asChild>\n        <button className=\"custom-trigger\">Open Advanced Dialog</button>\n      </DialogWithSlots.Trigger>\n      \n      <DialogWithSlots.Portal>\n        <DialogWithSlots.Overlay className=\"custom-overlay\" />\n        <DialogWithSlots.Content \n          className=\"custom-content\"\n          onEscapeKeyDown={(e) => {\n            console.log('Escape pressed');\n            // Could prevent default to keep dialog open\n          }}\n          onPointerDownOutside={(e) => {\n            console.log('Clicked outside');\n            // Could prevent default to keep dialog open\n          }}\n        >\n          <h2>Advanced Dialog</h2>\n          <p>This dialog uses dynamic slots and advanced composition patterns.</p>\n          \n          <DialogWithSlots.Trigger asChild>\n            <button>Close</button>\n          </DialogWithSlots.Trigger>\n        </DialogWithSlots.Content>\n      </DialogWithSlots.Portal>\n    </DialogWithSlots>\n  );\n}\n```\n\n\n## Conclusion and Recommendations\n\nThe Compound Pattern represents more than just a composition technique, it's a design philosophy that centers the developer experience and API flexibility. When fully mastered, it allows you to create components that are not only powerful but also delightful to use.\n\n**For Type Safety:**\n- Use generics to make your components reusable\n- Implement proper error boundaries and validation\n- Leverage TypeScript to create APIs that naturally guide correct usage\n\n**For Performance:**\n- Split contexts when state and actions update at different frequencies\n- Use `useMemo` and `useCallback` strategically\n- Consider the impact of re-renders on complex component trees\n\n**For Architecture:**\n- Apply the pattern to naturally related component groups\n- Maintain clear separation between state management and rendering logic\n- Design for composition, not configuration\n\n**For Extensibility:**\n- Implement dynamic slots for maximum flexibility\n- Allow context overrides at intermediate levels\n- Create custom hooks for complex behaviors\n\nThe compound pattern transforms how components feel to use. Not just functional, but intuitive. Not just flexible, but inevitable.\n\nYou'll know you've got it right when someone extends your component months later and the solution feels obvious, when complex UIs emerge from simple composition.\nThat's the mark of truly great component design.\n\n### Additional Resources\n\n- [React Compound Components Pattern](https://www.patterns.dev/react/compound-pattern/)\n- [Advanced React Patterns](https://github.com/kentcdodds/advanced-react-patterns)\n- [React Context API Documentation](https://react.dev/reference/react/createContext)\n- [Radix UI Primitives](https://www.radix-ui.com/primitives)\n- [ShadCN/UI Components](https://ui.shadcn.com/)\n\nHappy coding!","closed_by":{"login":"Pasquale-Favella","id":62385965,"node_id":"MDQ6VXNlcjYyMzg1OTY1","avatar_url":"https://avatars.githubusercontent.com/u/62385965?v=4","gravatar_id":"","url":"https://api.github.com/users/Pasquale-Favella","html_url":"https://github.com/Pasquale-Favella","followers_url":"https://api.github.com/users/Pasquale-Favella/followers","following_url":"https://api.github.com/users/Pasquale-Favella/following{/other_user}","gists_url":"https://api.github.com/users/Pasquale-Favella/gists{/gist_id}","starred_url":"https://api.github.com/users/Pasquale-Favella/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Pasquale-Favella/subscriptions","organizations_url":"https://api.github.com/users/Pasquale-Favella/orgs","repos_url":"https://api.github.com/users/Pasquale-Favella/repos","events_url":"https://api.github.com/users/Pasquale-Favella/events{/privacy}","received_events_url":"https://api.github.com/users/Pasquale-Favella/received_events","type":"User","user_view_type":"public","site_admin":false},"reactions":{"url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/28/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/28/timeline","performed_via_github_app":null,"state_reason":"completed"},{"url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/27","repository_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io","labels_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/27/labels{/name}","comments_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/27/comments","events_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/27/events","html_url":"https://github.com/Pasquale-Favella/pasquale-favella.github.io/issues/27","id":2795160915,"node_id":"I_kwDOIwHgl86mmsVT","number":27,"title":"Next.js Server Actions for Data Fetching: Performance Issues and Solutions","user":{"login":"Pasquale-Favella","id":62385965,"node_id":"MDQ6VXNlcjYyMzg1OTY1","avatar_url":"https://avatars.githubusercontent.com/u/62385965?v=4","gravatar_id":"","url":"https://api.github.com/users/Pasquale-Favella","html_url":"https://github.com/Pasquale-Favella","followers_url":"https://api.github.com/users/Pasquale-Favella/followers","following_url":"https://api.github.com/users/Pasquale-Favella/following{/other_user}","gists_url":"https://api.github.com/users/Pasquale-Favella/gists{/gist_id}","starred_url":"https://api.github.com/users/Pasquale-Favella/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Pasquale-Favella/subscriptions","organizations_url":"https://api.github.com/users/Pasquale-Favella/orgs","repos_url":"https://api.github.com/users/Pasquale-Favella/repos","events_url":"https://api.github.com/users/Pasquale-Favella/events{/privacy}","received_events_url":"https://api.github.com/users/Pasquale-Favella/received_events","type":"User","user_view_type":"public","site_admin":false},"labels":[{"id":4991782391,"node_id":"LA_kwDOIwHgl88AAAABKYiN9w","url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/labels/documentation","name":"documentation","color":"0075ca","default":true,"description":"Improvements or additions to documentation"},{"id":5011911244,"node_id":"LA_kwDOIwHgl88AAAABKruyTA","url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/labels/React","name":"React","color":"1d76db","default":false,"description":""},{"id":5744992208,"node_id":"LA_kwDOIwHgl88AAAABVm2f0A","url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/labels/Next%20JS","name":"Next JS","color":"5319e7","default":false,"description":""}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2025-01-17T10:52:41Z","updated_at":"2025-01-21T11:54:44Z","closed_at":"2025-01-21T09:37:33Z","author_association":"OWNER","active_lock_reason":null,"sub_issues_summary":{"total":0,"completed":0,"percent_completed":0},"issue_dependencies_summary":{"blocked_by":0,"total_blocked_by":0,"blocking":0,"total_blocking":0},"body":"Next.js Server Actions provide a groundbreaking method for integrating server-side operations directly into React applications, enabling optimized workflows for server logic and enhancing Next.js server-side integration. While they simplify workflows for mutations and server logic, their use for data fetching can present significant performance challenges. This guide explores these challenges, provides benchmark comparisons, and offers actionable solutions to optimize performance.\n\n## Understanding Next.js Server Actions\n\nNext.js Server Actions have revolutionized server-side operations in React applications. Designed primarily for form handling and data mutations, they are increasingly used for data fetching—but not without challenges.\n\n### What Are Server Actions?\n\nServer Actions in Next.js 14+ enable direct server-side operations from components. Their primary use cases include:\n\n* Form submissions\n* Data mutations\n* Server-side state management\n* Database operations\n\nServer Actions promise simplicity by integrating server logic seamlessly with React components. However, using them for data fetching introduces critical performance challenges.\n\nLearn more about Server Actions in the official [Next.js documentation](https://nextjs.org/docs).\n\n## Performance Problems with Server Actions\n\n### HTTP Method Concerns\n\nServer Actions exclusively use POST requests, leading to several challenges when applied to data fetching:\n\n* REST Principle Violation: GET requests are conventionally used for retrieving data. Using POST disrupts standard practices.\n* Caching Complexity: Caching mechanisms for GET requests, such as HTTP caching or CDN layers, are inherently easier to implement compared to POST.\n* Reduced API Intuition: POST-based data fetching can make APIs less predictable and harder to document for team collaboration.\n\n### Sequential Execution Problem\n\nA significant performance bottleneck arises when multiple Server Actions are invoked concurrently. Here's a common scenario:\n\n```typescript\n'use server';\n\nexport async function fetchData({ id, delay }: { id: number; delay: number }) {\n  await new Promise((resolve) => setTimeout(resolve, delay));\n  return { id };\n}\n```\n\nExecuting this function for multiple requests:\n\n```typescript\n// These execute sequentially despite Promise.all\nconst results = await Promise.all([\n  fetchData({ id: 1, delay: 1000 }),\n  fetchData({ id: 2, delay: 1000 }),\n  fetchData({ id: 3, delay: 1000 })\n]);\n```\n\nThe expectation is concurrent execution, but the reality is sequential processing, dramatically increasing response times.\n\n### Benchmark Results\n\nTo quantify the performance of Server Actions, we conducted real-world testing with 10 concurrent requests, each with a 1000ms delay. The results:\n\n| Approach | Execution Time | Performance Impact |\n|----------|---------------|-------------------|\n| API Routes | 1,195 ms | Best Performance |\n| Concurrent Server Actions | 2,274 ms | 90% Improvement |\n| Default Server Actions | 11,444 ms | Baseline (Sequential) |\n\nKey Insights:\n* API Routes: Demonstrated near-ideal concurrent execution.\n* Concurrent Server Actions: Showed marked improvement over default Server Actions.\n* Default Server Actions: Suffered from severe sequential bottlenecks, rendering them impractical for high-performance needs.\n\n## Solutions and Best Practices\n\n### 1. Use API Routes for Data Fetching\n\nAPI Routes remain the gold standard for data fetching in Next.js. Here's a straightforward implementation:\n\n```typescript\n// app/api/route.ts\nimport { NextRequest } from 'next/server';\n\nexport async function GET(req: NextRequest) {\n  const n = req.nextUrl.searchParams.get('n');\n  const duration = Number(req.nextUrl.searchParams.get('duration'));\n  await new Promise((resolve) => setTimeout(resolve, duration));\n  return Response.json({ n });\n}\n```\n\nAdvantages:\n* Leverages HTTP GET, simplifying caching and alignment with REST principles.\n* Supports CDN optimizations out of the box.\n\n### 2. Adopt the Concurrent Server Actions Pattern\n\nThe concurrent pattern addresses the sequential execution issue inherent in default Server Actions. Unlike standard sequential processing, this approach utilizes concurrency to execute multiple actions simultaneously, significantly reducing overall execution time.\n\n#### How It Differs from Standard Approaches\n\nDefault Server Actions process tasks one after the other, even when wrapped in promises, due to the server's handling of individual requests. This leads to significant delays in scenarios requiring multiple actions. By contrast, the concurrent pattern ensures that all operations begin immediately, leveraging JavaScript's asynchronous capabilities to minimize delays.\n\nThis distinction is critical for developers aiming to optimize server actions in Next.js and ensure efficient handling of complex workflows. Implementing the concurrent pattern can dramatically enhance performance, particularly for applications requiring high-volume data interactions. A custom utility can enable concurrent execution of Server Actions.\n\nUtility Implementation:\n\n```typescript\nexport function createConcurrentAction<T, U extends unknown[]>(\n  action: (...args: U) => Promise<T>\n) {\n  return async (...args: U) => [action(...args)] as const;\n}\n\nexport async function runConcurrentAction<T>(\n  result: Promise<readonly [Promise<T>]>\n) {\n  return (await result)[0];\n}\n\nexport const nonBlockingFetch = createConcurrentAction(fetchData);\n```\n\nClient-Side Usage:\n\n```typescript\nconst results = await Promise.all([\n  runConcurrentAction(nonBlockingFetch({ id: 1, delay: 1000 })),\n  runConcurrentAction(nonBlockingFetch({ id: 2, delay: 1000 })),\n  runConcurrentAction(nonBlockingFetch({ id: 3, delay: 1000 }))\n]);\n```\n\nAdvantages:\n* Minimizes execution time for concurrent operations.\n* Maintains compatibility with Server Actions.\n\n### Implementation Guide\n\n#### Step 1: Define the Base Action\n\n```typescript\n'use server';\n\nexport async function processTask({ n, duration }: { n: number; duration: number }) {\n  console.log(`Running action ${n}...`);\n  await new Promise((resolve) => setTimeout(resolve, duration));\n  return { n };\n}\n```\n\n#### Step 2: Create a Concurrent Version\n\n```typescript\nexport const nonBlockingProcessTask = createConcurrentAction(processTask);\n```\n\n#### Step 3: Execute Client-Side\n\n```typescript\nconst results = await Promise.all([\n  runConcurrentAction(nonBlockingProcessTask({ n: 1, duration: 1000 })),\n  runConcurrentAction(nonBlockingProcessTask({ n: 2, duration: 1000 })),\n  runConcurrentAction(nonBlockingProcessTask({ n: 3, duration: 1000 }))\n]);\n```\n\n## Conclusion and Recommendations\n\nServer Actions present a transformative opportunity for integrating server-side logic into React applications, offering efficiency and flexibility. However, leveraging them for data fetching requires a nuanced understanding of their benefits and limitations to maximize their potential in Next.js workflows.\n\n### Best Practices\n\nFor Data Fetching:\n* Prefer API Routes for optimal performance and simplicity.\n* Use tools like React Query or SWR for client-side caching and revalidation.\n\nWhen Using Server Actions:\n* Apply the concurrent execution pattern to avoid sequential bottlenecks.\n* Recognize the inherent overhead (~1,000ms) compared to API Routes.\n* Consider batch operations for related requests.\n\nFor Sequential Operations:\n* Default Server Actions may suffice.\n* Explore batch endpoints for efficiency.\n\n### Key Takeaways\n\n* Mutations: Server Actions excel for data mutations but need optimization for fetching.\n* Concurrency: The concurrent pattern delivers a 90% performance improvement.\n* API Routes: Remain the go-to for data fetching due to their flexibility and speed.\n\nExplore related resources:\n\n[Github repository example](https://github.com/Pasquale-Favella/next-concurrent-server-actions)\n\n[React Query Documentation](https://tanstack.com/query/latest)\n\n[SWR Documentation](https://swr.vercel.app/)\n\n[Server Actions Guide](https://nextjs.org/docs/app/building-your-application/data-fetching/server-actions-and-mutations)\n\n[Next.js Data Fetching Practices](https://nextjs.org/docs/app/building-your-application/data-fetching/fetching)\n\nHappy coding!","closed_by":{"login":"Pasquale-Favella","id":62385965,"node_id":"MDQ6VXNlcjYyMzg1OTY1","avatar_url":"https://avatars.githubusercontent.com/u/62385965?v=4","gravatar_id":"","url":"https://api.github.com/users/Pasquale-Favella","html_url":"https://github.com/Pasquale-Favella","followers_url":"https://api.github.com/users/Pasquale-Favella/followers","following_url":"https://api.github.com/users/Pasquale-Favella/following{/other_user}","gists_url":"https://api.github.com/users/Pasquale-Favella/gists{/gist_id}","starred_url":"https://api.github.com/users/Pasquale-Favella/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Pasquale-Favella/subscriptions","organizations_url":"https://api.github.com/users/Pasquale-Favella/orgs","repos_url":"https://api.github.com/users/Pasquale-Favella/repos","events_url":"https://api.github.com/users/Pasquale-Favella/events{/privacy}","received_events_url":"https://api.github.com/users/Pasquale-Favella/received_events","type":"User","user_view_type":"public","site_admin":false},"reactions":{"url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/27/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/27/timeline","performed_via_github_app":null,"state_reason":"completed"},{"url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/26","repository_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io","labels_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/26/labels{/name}","comments_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/26/comments","events_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/26/events","html_url":"https://github.com/Pasquale-Favella/pasquale-favella.github.io/issues/26","id":2732784198,"node_id":"I_kwDOIwHgl86i4vpG","number":26,"title":"Angular NgRx Signal Store Resource: State Management Revolution","user":{"login":"Pasquale-Favella","id":62385965,"node_id":"MDQ6VXNlcjYyMzg1OTY1","avatar_url":"https://avatars.githubusercontent.com/u/62385965?v=4","gravatar_id":"","url":"https://api.github.com/users/Pasquale-Favella","html_url":"https://github.com/Pasquale-Favella","followers_url":"https://api.github.com/users/Pasquale-Favella/followers","following_url":"https://api.github.com/users/Pasquale-Favella/following{/other_user}","gists_url":"https://api.github.com/users/Pasquale-Favella/gists{/gist_id}","starred_url":"https://api.github.com/users/Pasquale-Favella/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Pasquale-Favella/subscriptions","organizations_url":"https://api.github.com/users/Pasquale-Favella/orgs","repos_url":"https://api.github.com/users/Pasquale-Favella/repos","events_url":"https://api.github.com/users/Pasquale-Favella/events{/privacy}","received_events_url":"https://api.github.com/users/Pasquale-Favella/received_events","type":"User","user_view_type":"public","site_admin":false},"labels":[{"id":4991782391,"node_id":"LA_kwDOIwHgl88AAAABKYiN9w","url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/labels/documentation","name":"documentation","color":"0075ca","default":true,"description":"Improvements or additions to documentation"},{"id":5011828087,"node_id":"LA_kwDOIwHgl88AAAABKrptdw","url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/labels/Angular","name":"Angular","color":"F85A56","default":false,"description":""},{"id":5012942463,"node_id":"LA_kwDOIwHgl88AAAABKstufw","url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/labels/Rxjs","name":"Rxjs","color":"f9d0c4","default":false,"description":""}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2024-12-11T11:59:49Z","updated_at":"2024-12-11T12:03:05Z","closed_at":"2024-12-11T12:03:05Z","author_association":"OWNER","active_lock_reason":null,"sub_issues_summary":{"total":0,"completed":0,"percent_completed":0},"issue_dependencies_summary":{"blocked_by":0,"total_blocked_by":0,"blocking":0,"total_blocking":0},"body":"The Angular Resource API is an exciting new tool that simplifies state management in modern web applications. Paired with NgRx Signal Store, this powerful combination promises to revolutionize the way developers manage state, fetch data, and enhance performance in Angular applications. The integration of these tools provides businesses with a competitive advantage, streamlining workflows, reducing boilerplate code, and improving application performance.\r\n\r\nIn this article, we’ll walk through how to leverage the **Resource API** along with NgRx Signal Store to build a state management solution that is both declarative and powerful, with minimal boilerplate and excellent developer ergonomics.\r\n\r\n## Why the Resource API?\r\n\r\nFor developers who have been managing state in Angular, the challenges are clear. From dealing with complex services, observables, and multiple action types, to handling data-fetching with external APIs, Angular developers often juggle many complexities. The **Resource API** is a leap forward by making asynchronous requests and state management simpler and more intuitive.\r\n\r\n### What Makes This Solution Powerful\r\n\r\n- **Declarative State Management**: Angular's new Resource API makes it easy to manage remote state and cache results with minimal configuration.\r\n- **Minimal Boilerplate**: Less configuration means more productivity. The Resource API and NgRx Signal Store integration reduce the amount of code developers need to write, focusing more on business logic.\r\n- **Type Safety**: Angular's modern tooling ensures that developers are working in a type-safe environment, reducing runtime errors.\r\n- **Reactive by Design**: The combination of NgRx Signal Store and the Resource API offers a reactive paradigm, aligning perfectly with Angular’s change detection and reactivity model.\r\n\r\n## Implementation Deep Dive\r\n\r\nNow that we understand the power behind the **Resource API**, let’s see how we can combine it with **NgRx Signal Store** for an intuitive, scalable state management solution.\r\n\r\n### Setting Up the Signal Store Feature with Resource API\r\n\r\n```typescript\r\nimport {\r\n  signalStoreFeature,\r\n  withMethods,\r\n  type EmptyFeatureResult,\r\n  type SignalStoreFeature,\r\n  type SignalStoreFeatureResult,\r\n  type Prettify,\r\n  type StateSignals,\r\n  type WritableStateSource,\r\n} from '@ngrx/signals';\r\nimport {\r\n  ResourceOptions,\r\n  ResourceRef,\r\n  resource,\r\n} from '@angular/core';\r\n\r\nconst lowerFirstLetter = <T extends string>(value: T): Uncapitalize<T> => {\r\n  if (typeof value !== 'string') {\r\n    return value;\r\n  }\r\n\r\n  const trimmed = value.trim();\r\n  const first: string = trimmed.charAt(0).toLowerCase();\r\n  const rest: string = trimmed.slice(1);\r\n\r\n  return `${first}${rest}` as Uncapitalize<T>;\r\n};\r\n\r\nexport type ResourceStore<Input extends SignalStoreFeatureResult> = Prettify<\r\n  StateSignals<Input['state']> & Input['computed'] & Input['methods'] & WritableStateSource<Prettify<Input['state']>>\r\n>;\r\n\r\nexport type CreateResourceFn<\r\n  TDataFn = unknown,\r\n  Input extends SignalStoreFeatureResult = SignalStoreFeatureResult,\r\n> = (store: ResourceStore<Input>) => () => ResourceOptions<TDataFn, unknown>;\r\n\r\nexport type ResourceProp<Name extends string> = `${Uncapitalize<Name>}Resource`;\r\n\r\nexport type ResourceMethod<TData = unknown> = (() => ResourceRef<TData>) &\r\n  ResourceRef<TData>;\r\n\r\nexport const withResourceFeature = <\r\n  Name extends string,\r\n  TDataFn = unknown,\r\n  TData = TDataFn,\r\n  Input extends SignalStoreFeatureResult = SignalStoreFeatureResult,\r\n>(\r\n  name: Name,\r\n  createResourceFn: CreateResourceFn<TData, NoInfer<Input>>,\r\n): SignalStoreFeature<\r\n  Input,\r\n  EmptyFeatureResult & { methods: Record<ResourceProp<NoInfer<Name>>, ResourceMethod<NoInfer<TData>>> }\r\n> => {\r\n\r\n  return signalStoreFeature(\r\n    withMethods((store) => {\r\n\r\n      const resourceOptions = createResourceFn(store as ResourceStore<NoInfer<Input>>)\r\n      const resourceTarget = resource(resourceOptions());\r\n\r\n      const prop: ResourceProp<NoInfer<Name>> = `${lowerFirstLetter(name)}Resource`;\r\n\r\n      return {\r\n        [prop]: new Proxy(() => resourceTarget, {\r\n          get: (_, prop) => Reflect.get(resourceTarget, prop),\r\n          has: (_, prop) => Reflect.has(resourceTarget, prop),\r\n        }),\r\n      } as Record<ResourceProp<NoInfer<Name>>, ResourceMethod<NoInfer<TData>>>;\r\n    }),\r\n  )\r\n};\r\n```\r\n\r\n### Creating the Store with Resource Feature\r\n\r\nNext, let’s create a store with the **Resource API** to manage remote data:\r\n\r\n```typescript\r\nimport { patchState, signalStore, withMethods, withState } from '@ngrx/signals';\r\nimport { withResourceFeature } from '../store/with-resource.feature';\r\nimport { JsonPipe } from '@angular/common';\r\n\r\nconst PostStore = signalStore(\r\n  withState({\r\n    postId: 1,\r\n  }),\r\n  withMethods(store => ({\r\n    nextPost : () => {\r\n      patchState(store, (state) => ({\r\n        postId: state.postId > 9 ? 1 : state.postId + 1\r\n      }));\r\n    }\r\n  })),\r\n  withResourceFeature('postId', (store) => {\r\n    return () => {\r\n      return {\r\n        request: () => store.postId(),\r\n        loader: async ({request: postId, abortSignal }) => {\r\n          const API_URL = 'https://jsonplaceholder.typicode.com'\r\n\r\n          const response = await fetch(`${API_URL}/posts/${postId}`, {\r\n            signal: abortSignal,\r\n          });\r\n\r\n          if(!response.ok) throw new Error(`Error fetching post id: ${postId}`);\r\n\r\n          const jsonResponse = await response.json();\r\n          return jsonResponse as {\r\n            userId: number;\r\n            id: number;\r\n            title: string;\r\n            body: string;\r\n          };\r\n        }\r\n      };\r\n    };\r\n  })\r\n);\r\n```\r\n\r\n### Component Integration\r\n\r\nNow, let’s wire everything up into a component where we display the fetched data:\r\n\r\n```typescript\r\n@Component({\r\n  selector: 'app-post-details',\r\n  standalone: true,\r\n  providers: [PostStore],\r\n  imports: [JsonPipe],\r\n  template: `\r\n    @let post = store.postIdResource();\r\n\r\n    @if(post.isLoading()) {\r\n      <div>Loading...</div>\r\n    }\r\n    @if(post.error()) {\r\n      <div>Error</div>\r\n    }\r\n    @if(post.value()) {\r\n      <pre>{{ post.value() | json }}</pre>\r\n    }\r\n\r\n    <button (click)=\"store.nextPost()\">Fetch Next Post</button>\r\n    <button (click)=\"post.reload()\">Refetch Post</button>\r\n  `,\r\n})\r\nexport class ProductDetailsComponent {\r\n  readonly store = inject(PostStore);\r\n}\r\n```\r\n\r\n## Real-World Benefits\r\n\r\n1. **Simplified State Logic**: Less code, more functionality.\r\n2. **Optimized Performance**: Built-in caching and background updates.\r\n3. **Easier Debugging**: Clear, predictable state transitions.\r\n4. **Faster Development**: Focus on logic, not configuration.\r\n\r\n## Potential Pitfalls to Watch\r\n\r\n- Always use `inject()` for service dependencies.\r\n- Leverage `ChangeDetectionStrategy.OnPush` religiously.\r\n- Handle error states gracefully.\r\n\r\n## Wrapping Up\r\n\r\nWith the **Resource API** in Angular, we are not just looking at a new feature—it's a paradigm shift for how we manage state and fetch data. Combining it with **NgRx Signal Store** enables developers to build more reactive, efficient, and maintainable applications with minimal effort. As Angular continues to innovate, tools like this will help shape the future of web development.\r\n\r\n**Happy Coding!**\r\n","closed_by":{"login":"Pasquale-Favella","id":62385965,"node_id":"MDQ6VXNlcjYyMzg1OTY1","avatar_url":"https://avatars.githubusercontent.com/u/62385965?v=4","gravatar_id":"","url":"https://api.github.com/users/Pasquale-Favella","html_url":"https://github.com/Pasquale-Favella","followers_url":"https://api.github.com/users/Pasquale-Favella/followers","following_url":"https://api.github.com/users/Pasquale-Favella/following{/other_user}","gists_url":"https://api.github.com/users/Pasquale-Favella/gists{/gist_id}","starred_url":"https://api.github.com/users/Pasquale-Favella/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Pasquale-Favella/subscriptions","organizations_url":"https://api.github.com/users/Pasquale-Favella/orgs","repos_url":"https://api.github.com/users/Pasquale-Favella/repos","events_url":"https://api.github.com/users/Pasquale-Favella/events{/privacy}","received_events_url":"https://api.github.com/users/Pasquale-Favella/received_events","type":"User","user_view_type":"public","site_admin":false},"reactions":{"url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/26/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/26/timeline","performed_via_github_app":null,"state_reason":"completed"}],"projects":[{"id":421885911,"node_id":"R_kgDOGSV31w","name":"Knowledgeable","full_name":"Pasquale-Favella/Knowledgeable","private":false,"owner":{"login":"Pasquale-Favella","id":62385965,"node_id":"MDQ6VXNlcjYyMzg1OTY1","avatar_url":"https://avatars.githubusercontent.com/u/62385965?v=4","gravatar_id":"","url":"https://api.github.com/users/Pasquale-Favella","html_url":"https://github.com/Pasquale-Favella","followers_url":"https://api.github.com/users/Pasquale-Favella/followers","following_url":"https://api.github.com/users/Pasquale-Favella/following{/other_user}","gists_url":"https://api.github.com/users/Pasquale-Favella/gists{/gist_id}","starred_url":"https://api.github.com/users/Pasquale-Favella/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Pasquale-Favella/subscriptions","organizations_url":"https://api.github.com/users/Pasquale-Favella/orgs","repos_url":"https://api.github.com/users/Pasquale-Favella/repos","events_url":"https://api.github.com/users/Pasquale-Favella/events{/privacy}","received_events_url":"https://api.github.com/users/Pasquale-Favella/received_events","type":"User","user_view_type":"public","site_admin":false},"html_url":"https://github.com/Pasquale-Favella/Knowledgeable","description":"Beautiful wikipedia search engine with React Node & Express","fork":false,"url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable","forks_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/forks","keys_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/keys{/key_id}","collaborators_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/teams","hooks_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/hooks","issue_events_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/issues/events{/number}","events_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/events","assignees_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/assignees{/user}","branches_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/branches{/branch}","tags_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/tags","blobs_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/git/refs{/sha}","trees_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/git/trees{/sha}","statuses_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/statuses/{sha}","languages_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/languages","stargazers_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/stargazers","contributors_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/contributors","subscribers_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/subscribers","subscription_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/subscription","commits_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/commits{/sha}","git_commits_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/git/commits{/sha}","comments_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/comments{/number}","issue_comment_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/issues/comments{/number}","contents_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/contents/{+path}","compare_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/compare/{base}...{head}","merges_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/merges","archive_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/downloads","issues_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/issues{/number}","pulls_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/pulls{/number}","milestones_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/milestones{/number}","notifications_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/labels{/name}","releases_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/releases{/id}","deployments_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/deployments","created_at":"2021-10-27T16:06:07Z","updated_at":"2023-01-20T11:14:33Z","pushed_at":"2021-11-02T14:31:40Z","git_url":"git://github.com/Pasquale-Favella/Knowledgeable.git","ssh_url":"git@github.com:Pasquale-Favella/Knowledgeable.git","clone_url":"https://github.com/Pasquale-Favella/Knowledgeable.git","svn_url":"https://github.com/Pasquale-Favella/Knowledgeable","homepage":"https://knowledgeable.herokuapp.com/","size":1048,"stargazers_count":3,"watchers_count":3,"language":"JavaScript","has_issues":true,"has_projects":true,"has_downloads":true,"has_wiki":true,"has_pages":false,"has_discussions":false,"forks_count":0,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":0,"license":null,"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":["express","mern-stack","neumorphism","react","search-engine"],"visibility":"public","forks":0,"open_issues":0,"watchers":3,"default_branch":"master"},{"id":587325591,"node_id":"R_kgDOIwHglw","name":"pasquale-favella.github.io","full_name":"Pasquale-Favella/pasquale-favella.github.io","private":false,"owner":{"login":"Pasquale-Favella","id":62385965,"node_id":"MDQ6VXNlcjYyMzg1OTY1","avatar_url":"https://avatars.githubusercontent.com/u/62385965?v=4","gravatar_id":"","url":"https://api.github.com/users/Pasquale-Favella","html_url":"https://github.com/Pasquale-Favella","followers_url":"https://api.github.com/users/Pasquale-Favella/followers","following_url":"https://api.github.com/users/Pasquale-Favella/following{/other_user}","gists_url":"https://api.github.com/users/Pasquale-Favella/gists{/gist_id}","starred_url":"https://api.github.com/users/Pasquale-Favella/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Pasquale-Favella/subscriptions","organizations_url":"https://api.github.com/users/Pasquale-Favella/orgs","repos_url":"https://api.github.com/users/Pasquale-Favella/repos","events_url":"https://api.github.com/users/Pasquale-Favella/events{/privacy}","received_events_url":"https://api.github.com/users/Pasquale-Favella/received_events","type":"User","user_view_type":"public","site_admin":false},"html_url":"https://github.com/Pasquale-Favella/pasquale-favella.github.io","description":"Awesome blogfolio with Next.js","fork":false,"url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io","forks_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/forks","keys_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/keys{/key_id}","collaborators_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/teams","hooks_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/hooks","issue_events_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/events{/number}","events_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/events","assignees_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/assignees{/user}","branches_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/branches{/branch}","tags_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/tags","blobs_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/git/refs{/sha}","trees_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/git/trees{/sha}","statuses_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/statuses/{sha}","languages_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/languages","stargazers_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/stargazers","contributors_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/contributors","subscribers_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/subscribers","subscription_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/subscription","commits_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/commits{/sha}","git_commits_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/git/commits{/sha}","comments_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/comments{/number}","issue_comment_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/comments{/number}","contents_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/contents/{+path}","compare_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/compare/{base}...{head}","merges_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/merges","archive_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/downloads","issues_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues{/number}","pulls_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/pulls{/number}","milestones_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/milestones{/number}","notifications_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/labels{/name}","releases_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/releases{/id}","deployments_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/deployments","created_at":"2023-01-10T13:48:57Z","updated_at":"2025-10-17T15:20:28Z","pushed_at":"2025-10-17T15:20:24Z","git_url":"git://github.com/Pasquale-Favella/pasquale-favella.github.io.git","ssh_url":"git@github.com:Pasquale-Favella/pasquale-favella.github.io.git","clone_url":"https://github.com/Pasquale-Favella/pasquale-favella.github.io.git","svn_url":"https://github.com/Pasquale-Favella/pasquale-favella.github.io","homepage":"https://pasquale-favella.github.io/","size":21334,"stargazers_count":3,"watchers_count":3,"language":"JavaScript","has_issues":true,"has_projects":true,"has_downloads":true,"has_wiki":true,"has_pages":true,"has_discussions":true,"forks_count":1,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":0,"license":{"key":"mit","name":"MIT License","spdx_id":"MIT","url":"https://api.github.com/licenses/mit","node_id":"MDc6TGljZW5zZTEz"},"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":["nextjs","portfolio","react","tailwindcss"],"visibility":"public","forks":1,"open_issues":0,"watchers":3,"default_branch":"main"},{"id":440884146,"node_id":"R_kgDOGkdbsg","name":"Spring-React-PokeShow","full_name":"Pasquale-Favella/Spring-React-PokeShow","private":false,"owner":{"login":"Pasquale-Favella","id":62385965,"node_id":"MDQ6VXNlcjYyMzg1OTY1","avatar_url":"https://avatars.githubusercontent.com/u/62385965?v=4","gravatar_id":"","url":"https://api.github.com/users/Pasquale-Favella","html_url":"https://github.com/Pasquale-Favella","followers_url":"https://api.github.com/users/Pasquale-Favella/followers","following_url":"https://api.github.com/users/Pasquale-Favella/following{/other_user}","gists_url":"https://api.github.com/users/Pasquale-Favella/gists{/gist_id}","starred_url":"https://api.github.com/users/Pasquale-Favella/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Pasquale-Favella/subscriptions","organizations_url":"https://api.github.com/users/Pasquale-Favella/orgs","repos_url":"https://api.github.com/users/Pasquale-Favella/repos","events_url":"https://api.github.com/users/Pasquale-Favella/events{/privacy}","received_events_url":"https://api.github.com/users/Pasquale-Favella/received_events","type":"User","user_view_type":"public","site_admin":false},"html_url":"https://github.com/Pasquale-Favella/Spring-React-PokeShow","description":"Toy web app for pokemon discovery with spring boot and react","fork":false,"url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow","forks_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/forks","keys_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/keys{/key_id}","collaborators_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/teams","hooks_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/hooks","issue_events_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/issues/events{/number}","events_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/events","assignees_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/assignees{/user}","branches_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/branches{/branch}","tags_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/tags","blobs_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/git/refs{/sha}","trees_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/git/trees{/sha}","statuses_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/statuses/{sha}","languages_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/languages","stargazers_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/stargazers","contributors_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/contributors","subscribers_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/subscribers","subscription_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/subscription","commits_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/commits{/sha}","git_commits_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/git/commits{/sha}","comments_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/comments{/number}","issue_comment_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/issues/comments{/number}","contents_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/contents/{+path}","compare_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/compare/{base}...{head}","merges_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/merges","archive_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/downloads","issues_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/issues{/number}","pulls_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/pulls{/number}","milestones_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/milestones{/number}","notifications_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/labels{/name}","releases_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/releases{/id}","deployments_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/deployments","created_at":"2021-12-22T14:26:29Z","updated_at":"2023-01-20T11:15:41Z","pushed_at":"2021-12-29T15:55:35Z","git_url":"git://github.com/Pasquale-Favella/Spring-React-PokeShow.git","ssh_url":"git@github.com:Pasquale-Favella/Spring-React-PokeShow.git","clone_url":"https://github.com/Pasquale-Favella/Spring-React-PokeShow.git","svn_url":"https://github.com/Pasquale-Favella/Spring-React-PokeShow","homepage":"","size":393,"stargazers_count":3,"watchers_count":3,"language":"Java","has_issues":true,"has_projects":true,"has_downloads":true,"has_wiki":true,"has_pages":false,"has_discussions":false,"forks_count":0,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":0,"license":null,"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":["fullstack","react","spring-boot"],"visibility":"public","forks":0,"open_issues":0,"watchers":3,"default_branch":"master"}]},"__N_SSG":true}