{"pageProps":{"content":"Mongo JPA, or the Java Persistence API, is a powerful tool that allows developers to interact with MongoDB databases using the standard JPA interface. JPA is a specification for object-relational mapping in Java, which means that it allows developers to map Java classes to database tables and perform CRUD (Create, Read, Update, Delete) operations on those tables using standard Java methods.\r\n\r\nMongoDB is a popular NoSQL database that is widely used in modern web applications due to its flexibility and scalability. With the rise of microservices architecture, many developers are turning to MongoDB as a preferred database solution. However, working with MongoDB can be challenging for developers who are not familiar with NoSQL concepts and query languages.\r\n\r\nThat's where Mongo JPA comes in. It provides a simple and intuitive way to work with MongoDB databases, allowing developers to focus on their business logic rather than database implementation details. By using Mongo JPA, developers can take advantage of the powerful features of MongoDB, such as schemaless data modeling, dynamic queries, and horizontal scaling.\r\n\r\nOne of the key benefits of using Mongo JPA is that it provides a consistent API for working with different types of databases, including relational databases and NoSQL databases. This means that developers can use the same Java code to interact with MongoDB and other databases, which can simplify their codebase and reduce the learning curve for new developers.\r\n\r\nAnother advantage of using Mongo JPA is that it supports the JPA Criteria API, which allows developers to create type-safe queries using Java code. This can help prevent errors and make code easier to maintain, especially for larger projects. Additionally, Mongo JPA supports advanced query features such as aggregation, sorting, and pagination, which can be challenging to implement using raw MongoDB queries.\r\n\r\nTo use Mongo JPA, developers can add the necessary dependencies to their project and create entity classes that map to MongoDB collections. They can then use standard JPA methods to interact with the database, such as `find` , `persist` , `merge` , and `remove`. Mongo JPA also provides annotations that can be used to define indexes, map embedded objects, and specify other database-related details.\r\nHere an example\r\n``` java\r\n@Entity\r\npublic class User {\r\n    \r\n    @Id\r\n    private String id;\r\n    \r\n    @Column(name = \"username\")\r\n    private String username;\r\n    \r\n    @Column(name = \"password\")\r\n    private String password;\r\n    \r\n    @Embedded\r\n    private Address address;\r\n    \r\n    // Getters and setters\r\n    \r\n    public String getId() {\r\n        return id;\r\n    }\r\n    \r\n    public void setId(String id) {\r\n        this.id = id;\r\n    }\r\n    \r\n    public String getUsername() {\r\n        return username;\r\n    }\r\n    \r\n    public void setUsername(String username) {\r\n        this.username = username;\r\n    }\r\n    \r\n    public String getPassword() {\r\n        return password;\r\n    }\r\n    \r\n    public void setPassword(String password) {\r\n        this.password = password;\r\n    }\r\n    \r\n    public Address getAddress() {\r\n        return address;\r\n    }\r\n    \r\n    public void setAddress(Address address) {\r\n        this.address = address;\r\n    }\r\n    \r\n    // Embedded class\r\n    \r\n    @Embeddable\r\n    public static class Address {\r\n        \r\n        @Column(name = \"street\")\r\n        private String street;\r\n        \r\n        @Column(name = \"city\")\r\n        private String city;\r\n        \r\n        @Column(name = \"state\")\r\n        private String state;\r\n        \r\n        @Column(name = \"zip\")\r\n        private String zip;\r\n        \r\n        // Getters and setters\r\n        \r\n        public String getStreet() {\r\n            return street;\r\n        }\r\n        \r\n        public void setStreet(String street) {\r\n            this.street = street;\r\n        }\r\n        \r\n        public String getCity() {\r\n            return city;\r\n        }\r\n        \r\n        public void setCity(String city) {\r\n            this.city = city;\r\n        }\r\n        \r\n        public String getState() {\r\n            return state;\r\n        }\r\n        \r\n        public void setState(String state) {\r\n            this.state = state;\r\n        }\r\n        \r\n        public String getZip() {\r\n            return zip;\r\n        }\r\n        \r\n        public void setZip(String zip) {\r\n            this.zip = zip;\r\n        }\r\n    }\r\n}\r\n```\r\nIn this example, the `User` class is annotated with `@Entity`, which tells Mongo JPA that it should be mapped to a MongoDB collection. The `@Id` annotation is used to indicate that the `id` field is the primary key for the collection. The `@Column` annotation is used to specify the names of the fields in the collection.\r\nThe `Address` class is embedded in the `User` class using the `@Embedded` annotation. It is also annotated with `@Embeddable`, which indicates that it should be stored as part of the `User` document in the MongoDB collection.\r\n\r\nThe class above can be used to build a `MongoRepository`\r\n``` java\r\n@Repository\r\npublic interface UserRepository extends MongoRepository<User, String> {\r\n    \r\n    User findByUsername(String username);\r\n    \r\n    List<User> findByAddressCity(String city);\r\n    \r\n    @Query(\"{ 'address.state' : ?0 }\")\r\n    List<User> findByAddressState(String state);\r\n    \r\n    List<User> findByAddressStateAndAddressCity(String state, String city);\r\n    \r\n    default List<User> findUsersByCriteria(String state, String city) {\r\n        Criteria criteria = new Criteria();\r\n        \r\n        if (state != null && !state.isEmpty()) {\r\n            criteria = criteria.and(\"address.state\").is(state);\r\n        }\r\n        \r\n        if (city != null && !city.isEmpty()) {\r\n            criteria = criteria.and(\"address.city\").is(city);\r\n        }\r\n        \r\n        Query query = new Query(criteria);\r\n        return mongoTemplate.find(query, User.class);\r\n    }\r\n}\r\n```\r\nIn this example, the `findUsersByCriteria` method is a custom query that uses `Criteria` to build a dynamic query. `Criteria` is a flexible way to build complex queries with conditions that can change at runtime.\r\nThe method takes two parameters, `state` and `city`, which are used to build the `Criteria` object. The method first creates a new `Criteria` object and then adds conditions based on the values of `state` and `city`. If the `state` parameter is not null and not empty, it adds a condition to match the `state` field in the `address` object. If the `city` parameter is not null and not empty, it adds a condition to match the `city` field in the `address` object.\r\nFinally, the method creates a new `Query` object with the `Criteria` object and uses `MongoTemplate` to execute the query and return a list of `User` objects.\r\n\r\nIn conclusion, Mongo JPA is a valuable tool for developers who want to work with MongoDB databases using standard Java methods. It provides a consistent and intuitive API that can simplify code and reduce the learning curve for new developers. By leveraging the powerful features of MongoDB, developers can build scalable and flexible applications that can meet the demands of modern web development.","slug":"9","title":"Spring Boot with Mongo JPA - the basics"},"__N_SSG":true}