{"pageProps":{"posts":[{"url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/21","repository_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io","labels_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/21/labels{/name}","comments_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/21/comments","events_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/21/events","html_url":"https://github.com/Pasquale-Favella/pasquale-favella.github.io/issues/21","id":2509823097,"node_id":"I_kwDOIwHgl86VmNx5","number":21,"title":"How to Prevent Angular Issues with API Contract Changes Using Zod","user":{"login":"Pasquale-Favella","id":62385965,"node_id":"MDQ6VXNlcjYyMzg1OTY1","avatar_url":"https://avatars.githubusercontent.com/u/62385965?v=4","gravatar_id":"","url":"https://api.github.com/users/Pasquale-Favella","html_url":"https://github.com/Pasquale-Favella","followers_url":"https://api.github.com/users/Pasquale-Favella/followers","following_url":"https://api.github.com/users/Pasquale-Favella/following{/other_user}","gists_url":"https://api.github.com/users/Pasquale-Favella/gists{/gist_id}","starred_url":"https://api.github.com/users/Pasquale-Favella/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Pasquale-Favella/subscriptions","organizations_url":"https://api.github.com/users/Pasquale-Favella/orgs","repos_url":"https://api.github.com/users/Pasquale-Favella/repos","events_url":"https://api.github.com/users/Pasquale-Favella/events{/privacy}","received_events_url":"https://api.github.com/users/Pasquale-Favella/received_events","type":"User","site_admin":false},"labels":[{"id":4991782391,"node_id":"LA_kwDOIwHgl88AAAABKYiN9w","url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/labels/documentation","name":"documentation","color":"0075ca","default":true,"description":"Improvements or additions to documentation"},{"id":5011828087,"node_id":"LA_kwDOIwHgl88AAAABKrptdw","url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/labels/Angular","name":"Angular","color":"F85A56","default":false,"description":""}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2024-09-06T08:21:30Z","updated_at":"2024-09-06T08:21:59Z","closed_at":"2024-09-06T08:21:59Z","author_association":"OWNER","active_lock_reason":null,"body":"As a front-end developer, one common problem you may face is ensuring your application doesn't break when the `API contract` changes. Whether you're working with `API responses`, `external data`, or handling `backend integration`, it’s critical to have a solution that validates the data your front-end consumes. In this article, we’ll explore how using `Zod`, a popular data validation library, can help prevent front-end issues due to `API contract changes`.\r\n\r\n## Common Problem: Front-End Breaks Due to API Contract Changes\r\n\r\nImagine you’re developing a feature for your project, and you agree on an `API contract` with the back-end team. You write your code, implement the feature, and even cover multiple test scenarios. Everything works perfectly. However, some time later, the feature stops working.\r\n\r\nUpon investigation, you find that the `front-end code` is fine, and all your tests are passing. The issue? The `API response` has changed, and the `API contract` you initially agreed upon is no longer valid. As a result, the feature breaks, and these changes propagate through your entire application.\r\n\r\nThis is a common issue that many developers face when working with `API integrations`. The key question is: how can you prevent your application from breaking due to unexpected changes in external data?\r\n\r\n## Solution: Using Zod for Data Validation\r\n\r\nOne of the best ways to prevent front-end issues caused by API changes is by validating the external data before using it in your application. This is where `Zod`, a lightweight and flexible data validation library, comes into play. [Zod](https://zod.dev/) allows you to define `schemas` for your data and validate it at runtime, ensuring that any incoming data adheres to the expected structure.\r\n\r\nLet’s dive into how you can use Zod to solve this issue.\r\n\r\n## Step-by-Step Guide: How to Use Zod for Data Validation\r\n\r\nZod supports various types of data validation. Let’s start with something simple: validating string data.\r\n\r\n```javascript\r\nimport { z } from 'zod';\r\n\r\nconst StringSchema = z.string();\r\nconst EmailSchema = z.string().email();\r\nconst LengthSchema = z.string().min(3).max(15);\r\n```\r\nIn the above example, we are defining schemas that validate the data type. Zod doesn’t just check if the value is a string but also ensures that the string matches certain conditions—such as validating an email format or checking if the string has a specific length.\r\n\r\nHere’s how you can validate data with Zod:\r\n\r\n```javascript\r\nStringSchema.parse(456); // Throws an error because 456 is not a string\r\nStringSchema.parse('hello'); // Passes validation because 'hello' is a string\r\n\r\nconst result = EmailSchema.safeParse('not-an-email'); \r\n// Returns { success: false, error: {...} }\r\n```\r\nYou can also customize the error messages to be more informative:\r\n\r\n```javascript\r\nconst CustomStringSchema = z.string().refine(val => val === 'expected', {\r\n  message: 'This is not the expected value!',\r\n});\r\n```\r\n## Using Zod to Validate API Responses\r\n\r\nLet’s apply Zod to a more complex scenario: `validating API responses`. Imagine you’re working with an API that returns the following structure:\r\n\r\n```typescript\r\ninterface ApiResponse {\r\n  id: number;\r\n  name: string;\r\n  items: Item[];\r\n}\r\n\r\ninterface Item {\r\n  productId: string;\r\n  quantity: number;\r\n}\r\n```\r\nIn a typical `Angular` application, you might fetch this data using the `HttpClient` service like this:\r\n\r\n```typescript\r\n@Injectable({ providedIn: 'root' })\r\nexport class ApiService {\r\n  private readonly http = inject(HttpClient);\r\n\r\n  fetchData(): Observable<ApiResponse> {\r\n    return this.http.get<ApiResponse>('/api/data');\r\n  }\r\n}\r\n```\r\nUsing `Zod`, you can define a schema that mirrors this structure and validates the API response:\r\n\r\n```typescript\r\nimport { z } from 'zod';\r\n\r\nconst ApiResponseSchema = z.object({\r\n  id: z.number(),\r\n  name: z.string(),\r\n  items: z.array(\r\n    z.object({\r\n      productId: z.string(),\r\n      quantity: z.number(),\r\n    })\r\n  ),\r\n});\r\n\r\ntype ApiResponse = z.infer<typeof ApiResponseSchema>;\r\n```\r\nHere’s how you can integrate this `schema` into your service to ensure the data is valid:\r\n\r\n```typescript\r\n@Injectable({ providedIn: 'root' })\r\nexport class ZodApiService {\r\n  private readonly http = inject(HttpClient);\r\n\r\n  fetchData(): Observable<ApiResponse> {\r\n    return this.http.get('/api/data').pipe(\r\n      map((response) => ApiResponseSchema.parse(response)) // Validates the response\r\n    );\r\n  }\r\n}\r\n```\r\nNow, if the API changes unexpectedly—say the backend sends `itemId` instead of `productId`—Zod will throw an error, allowing you to catch the issue immediately. This proactive validation helps prevent bugs caused by inconsistent data structures.\r\n\r\n## Advanced Usage: Creating Custom RxJs Operators for Validation\r\n\r\nYou can simplify the process even further by creating a custom `RxJs operator` to validate data throughout your application:\r\n\r\n```typescript\r\nexport function validateWithZod<T extends z.ZodTypeAny>(schema: T) {\r\n  return map((response: unknown) => schema.parse(response));\r\n}\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ZodApiService {\r\n  private readonly http = inject(HttpClient);\r\n\r\n  fetchData(): Observable<ApiResponse> {\r\n    return this.http.get('/api/data').pipe(validateWithZod(ApiResponseSchema));\r\n  }\r\n}\r\n```\r\nNow, whenever the backend returns an invalid response, `Zod` will catch it and display a clear error message in your browser’s console.\r\n\r\nFor instance, if the backend sends the following response:\r\n```json\r\n{\r\n  \"id\": 101,\r\n  \"name\": \"Example\",\r\n  \"items\": [\r\n    { \"productId\": \"abc\", \"quantity\": 3 },\r\n    { \"productId\": \"def\", \"quantity\": 2 }\r\n  ]\r\n}\r\n```\r\nZod will validate the response. If the API structure is incorrect, Zod will notify you with an error message, making it clear where things went wrong.\r\n\r\n## Why Data Validation is Crucial for Front-End Developers\r\n\r\nIn modern `front-end development`, applications often rely on data fetched from external APIs. Since this data is external, it falls outside the scope of TypeScript’s type-checking. This means that when the API response structure changes, your front-end application is at risk of breaking—unless you validate the data.\r\n\r\nUsing a data validation library like Zod allows you to:\r\n- `Ensure data consistency` across your application\r\n- `Catch errors early`, before they propagate through the system\r\n- `Handle unexpected API changes` effectively\r\n- Provide `better error messages` for debugging\r\n\r\n## Conclusion\r\n\r\nTo sum up, `validating API responses` and other external data is a crucial step in ensuring your front-end application remains robust, even when external systems change. While you can generate types from the API, using a runtime validation tool like Zod provides an extra layer of protection. Zod not only helps you validate data but also allows you to catch and handle errors proactively, saving you time and preventing bugs in the long run.\r\n\r\nBy integrating Zod into your front-end development workflow, you can effectively mitigate the risks associated with changing API contracts and maintain a stable application.\r\n\r\nHappy coding!","reactions":{"url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/21/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/21/timeline","performed_via_github_app":null,"state_reason":"completed"},{"url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/16","repository_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io","labels_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/16/labels{/name}","comments_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/16/comments","events_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/16/events","html_url":"https://github.com/Pasquale-Favella/pasquale-favella.github.io/issues/16","id":2070945385,"node_id":"I_kwDOIwHgl857cB5p","number":16,"title":"Angular Signals with RxJS - A practical example","user":{"login":"Pasquale-Favella","id":62385965,"node_id":"MDQ6VXNlcjYyMzg1OTY1","avatar_url":"https://avatars.githubusercontent.com/u/62385965?v=4","gravatar_id":"","url":"https://api.github.com/users/Pasquale-Favella","html_url":"https://github.com/Pasquale-Favella","followers_url":"https://api.github.com/users/Pasquale-Favella/followers","following_url":"https://api.github.com/users/Pasquale-Favella/following{/other_user}","gists_url":"https://api.github.com/users/Pasquale-Favella/gists{/gist_id}","starred_url":"https://api.github.com/users/Pasquale-Favella/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Pasquale-Favella/subscriptions","organizations_url":"https://api.github.com/users/Pasquale-Favella/orgs","repos_url":"https://api.github.com/users/Pasquale-Favella/repos","events_url":"https://api.github.com/users/Pasquale-Favella/events{/privacy}","received_events_url":"https://api.github.com/users/Pasquale-Favella/received_events","type":"User","site_admin":false},"labels":[{"id":4991782391,"node_id":"LA_kwDOIwHgl88AAAABKYiN9w","url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/labels/documentation","name":"documentation","color":"0075ca","default":true,"description":"Improvements or additions to documentation"},{"id":5011828087,"node_id":"LA_kwDOIwHgl88AAAABKrptdw","url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/labels/Angular","name":"Angular","color":"F85A56","default":false,"description":""},{"id":5012942463,"node_id":"LA_kwDOIwHgl88AAAABKstufw","url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/labels/Rxjs","name":"Rxjs","color":"f9d0c4","default":false,"description":""}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2024-01-08T17:44:37Z","updated_at":"2024-04-12T08:43:56Z","closed_at":"2024-04-12T08:43:56Z","author_association":"OWNER","active_lock_reason":null,"body":"This article will delve into the seamless fusion of Angular Signals and RxJS, highlighting how these two technologies can effortlessly blend together, showcasing that RxJS continues to shine brightly in their combined usage. The combination of these two technologies can lead to a more efficient and streamlined development process, allowing developers to create more complex applications with ease. By leveraging the power of Angular Signals and RxJS, developers can create reactive applications that are both scalable and maintainable.\r\n\r\n## Initial Setup\r\n```html\r\n <input type=\"text\" (keyup)=\"search($event)\" />\r\n```\r\n*just an input with a keyup event.*\r\n```typescript\r\n export class AppComponent {\r\n  http = inject(HttpClient);\r\n\r\n  search(event: Event) {\r\n    const value = (event.target as HTMLInputElement).value;\r\n  }\r\n}\r\n```\r\nInside our class has been injected `HttpClient` and created a search function which gets a value of the input but doesn't do anything else.\r\n\r\n## Implementing API call\r\n\r\nNow, the challenge lies in implementing the retrieval of data from the API both upon initialization and after entering text into the input. We aim to incorporate debouncing to prevent excessive API calls, ensuring that we don't overlook any submitted values already present.\r\n\r\n> This is exactly the case where RxJS shines in comparison to signals.\r\nWhat we are getting from signals is simply a state to read or update the value and computed which returns some value based on another signal. The last thing that we get from signals is effect which allows us to do something when our signal is changed.\r\n\r\nThis is not what we need for our case here. We have the case where RxJS can help us a lot.\r\n```typescript\r\nexport class AppComponent {\r\n  ...\r\n  searchSig = signal<string>('');\r\n\r\n  search(event: Event) {\r\n    const value = (event.target as HTMLInputElement).value;\r\n    this.searchSig.set(value);\r\n  }\r\n}\r\n```\r\nOur first step here is to create a `signal` which stores our search value. Now we can update this `signal` when we change the input with `set` function.\r\n\r\nBut it is not all. We want to make an API call every single time when we change our search. The main problem is that we can't write this code with signal effectively. Now we have a function in Angular which allows us to transform `signal` to the `observable`.\r\n```typescript\r\nimport { toObservable, toSignal } from '@angular/core/rxjs-interop';\r\n\r\nexport class AppComponent {\r\n  ...\r\n  searchSig = signal<string>('');\r\n  articles$ = toObservable(this.searchSig).pipe(\r\n    debounceTime(300),\r\n    distinctUntilChanged(),\r\n    switchMap((searchTerm) =>\r\n      this.http.get<Article[]>(\r\n        `http://localhost:8080/articles?title=${searchTerm}`\r\n      )\r\n    )\r\n  );\r\n}\r\n```\r\nIn this instance, we employed the `toObservable` function to convert our `signal` into an `observable`, enabling the application of `RxJS` functions. We incorporated `debounceTime` to prevent excessive API calls, `distinctUntilChanged` to avoid redundant API calls with identical data, and `switchMap` to execute an HTTP request\r\n>So this code just creates an observable from the signal.\r\n\r\nThis doesn't signal a return to our previous less efficient practices, such as relying on async pipes or subscriptions. We're determined to steer clear of reverting to the digest cycle and the inherent issues it brings.\r\n```typescript\r\nexport class AppComponent {\r\n  ...\r\n  articlesSig = toSignal(this.articles$);\r\n}\r\n```\r\nThis is why here we created one more property which is a `signal`. We used `toSignal` function to convert our RxJS `observable` to a signal. Now we can safely use it inside our markup is a normal signal.\r\n```html\r\n<div *ngFor=\"let article of articlesSig()\">\r\n  {{ article.title }}\r\n</div>\r\n```\r\n*or with the new built-in for loop.*\r\n```html\r\n@for (article of articlesSig(); track article.title) {\r\n  {{ article.title }}\r\n} \r\n```\r\nWe can see that our API call is done and we rendered a list of article. When we type something it refetches the data with the rules that we wrote in RxJS.\r\n\r\n## Conclusion\r\n\r\nthis article has explored the harmonious integration of Angular Signals and RxJS, demonstrating their synergistic collaboration. By showcasing the effective fusion of these two technologies, we've underscored the ongoing strength of RxJS within this combined usage.\r\n\r\nHappy coding!","reactions":{"url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/16/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/16/timeline","performed_via_github_app":null,"state_reason":"completed"},{"url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/15","repository_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io","labels_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/15/labels{/name}","comments_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/15/comments","events_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/15/events","html_url":"https://github.com/Pasquale-Favella/pasquale-favella.github.io/issues/15","id":1935035053,"node_id":"I_kwDOIwHgl85zVkqt","number":15,"title":"Setting Up Multiple Data Sources in a Spring Boot Application","user":{"login":"Pasquale-Favella","id":62385965,"node_id":"MDQ6VXNlcjYyMzg1OTY1","avatar_url":"https://avatars.githubusercontent.com/u/62385965?v=4","gravatar_id":"","url":"https://api.github.com/users/Pasquale-Favella","html_url":"https://github.com/Pasquale-Favella","followers_url":"https://api.github.com/users/Pasquale-Favella/followers","following_url":"https://api.github.com/users/Pasquale-Favella/following{/other_user}","gists_url":"https://api.github.com/users/Pasquale-Favella/gists{/gist_id}","starred_url":"https://api.github.com/users/Pasquale-Favella/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Pasquale-Favella/subscriptions","organizations_url":"https://api.github.com/users/Pasquale-Favella/orgs","repos_url":"https://api.github.com/users/Pasquale-Favella/repos","events_url":"https://api.github.com/users/Pasquale-Favella/events{/privacy}","received_events_url":"https://api.github.com/users/Pasquale-Favella/received_events","type":"User","site_admin":false},"labels":[{"id":4991782391,"node_id":"LA_kwDOIwHgl88AAAABKYiN9w","url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/labels/documentation","name":"documentation","color":"0075ca","default":true,"description":"Improvements or additions to documentation"},{"id":5176884231,"node_id":"LA_kwDOIwHgl88AAAABNJD8Bw","url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/labels/Java","name":"Java","color":"57627E","default":false,"description":""},{"id":5176887291,"node_id":"LA_kwDOIwHgl88AAAABNJEH-w","url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/labels/Spring%20Boot","name":"Spring Boot","color":"10AE3D","default":false,"description":""}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2023-10-10T10:41:51Z","updated_at":"2024-04-12T08:44:41Z","closed_at":"2024-04-12T08:44:40Z","author_association":"OWNER","active_lock_reason":null,"body":"Spring Boot is a popular Java framework that simplifies the process of building robust and scalable applications. One common requirement in enterprise applications is the need to work with multiple data sources. This could be due to various reasons, such as handling different databases, connecting to external services, or segregating data for performance and security purposes. In this article, we will explore how to set up and manage multiple data sources in a Spring Boot application.\r\n\r\n## 1. Why Use Multiple Data Sources?\r\n\r\nBefore diving into the technical details, it's essential to understand why you might need multiple data sources in a Spring Boot application:\r\n\r\n- **Data Isolation**: Separate data sources can be used to isolate sensitive data from the main application database. For example, you may store user credentials in a separate database for added security.\r\n\r\n- **Performance Optimization**: By segregating data, you can optimize the performance of your application. For instance, storing frequently accessed data in a dedicated database can improve response times.\r\n\r\n- **Integration with External Services**: You might need to connect to external services or databases that are not part of your main application database.\r\n\r\n- **Legacy Systems**: In enterprise environments, you may need to interact with legacy systems that use different data sources.\r\n\r\n## 2. Configuration and Dependency Setup\r\n\r\nTo set up multiple data sources in a Spring Boot application, you need to follow these steps:\r\n\r\n### 2.1. Adding Dependencies\r\n\r\nIn your `pom.xml` file, include the necessary dependencies:\r\n\r\n```xml\r\n<!-- Spring Boot Starter -->\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter</artifactId>\r\n</dependency>\r\n\r\n<!-- Spring Data JPA for the primary data source -->\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-data-jpa</artifactId>\r\n</dependency>\r\n\r\n<!-- HikariCP for connection pooling -->\r\n<dependency>\r\n    <groupId>com.zaxxer</groupId>\r\n    <artifactId>HikariCP</artifactId>\r\n</dependency>\r\n\r\n<!-- JDBC driver for your primary database -->\r\n<dependency>\r\n    <groupId>com.mysql.cj</groupId>\r\n    <artifactId>mysql-connector-java</artifactId>\r\n</dependency>\r\n\r\n<!-- Additional dependencies for secondary data sources -->\r\n<!-- Add dependencies for secondary databases here -->\r\n```\r\nEnsure you include the JDBC driver for your primary database and any additional dependencies required for your secondary data sources.\r\n\r\n### 2.2. Creating Configuration Properties\r\n\r\nCreate configuration properties for your data sources in `application.properties` or `application.yml`. Define properties for the primary and secondary data sources, such as URL, username, password, and driver class. For example:\r\n\r\n```properties\r\n# Primary DataSource\r\nspring.datasource.primary.url=jdbc:mysql://localhost:3306/primary_db\r\nspring.datasource.primary.username=root\r\nspring.datasource.primary.password=root\r\nspring.datasource.primary.driver-class-name=com.mysql.cj.jdbc.Driver\r\n\r\n# Secondary DataSource\r\nspring.datasource.secondary.url=jdbc:mysql://localhost:3306/secondary_db\r\nspring.datasource.secondary.username=root\r\nspring.datasource.secondary.password=root\r\nspring.datasource.secondary.driver-class-name=com.mysql.cj.jdbc.Driver\r\n```\r\n\r\n## 3. Configuring Multiple Data Sources\r\n\r\nIn this section, we will configure multiple data sources and create beans for them.\r\n\r\n### 3.1. Defining Data Source Beans\r\n\r\nIn your Spring Boot application, define multiple `DataSource` beans in a configuration class. For example:\r\n\r\n```java\r\n@Configuration\r\n@EnableTransactionManagement\r\npublic class DataSourceConfig {\r\n\r\n    @Primary\r\n    @Bean(name = \"primaryDataSource\")\r\n    @ConfigurationProperties(prefix = \"spring.datasource.primary\")\r\n    public DataSource primaryDataSource() {\r\n        return DataSourceBuilder.create().build();\r\n    }\r\n\r\n    @Bean(name = \"secondaryDataSource\")\r\n    @ConfigurationProperties(prefix = \"spring.datasource.secondary\")\r\n    public DataSource secondaryDataSource() {\r\n        return DataSourceBuilder.create().build();\r\n    }\r\n}\r\n```\r\n\r\nIn the code above, we use `@ConfigurationProperties` to bind the properties from `application.properties` to the respective `DataSource` beans.\r\n\r\n### 3.2. Creating JdbcTemplate Beans\r\n\r\nTo interact with the databases, create `JdbcTemplate` beans for each data source. These `JdbcTemplate` beans are responsible for executing SQL queries.\r\n\r\n```java\r\n@Configuration\r\npublic class JdbcTemplateConfig {\r\n\r\n    @Primary\r\n    @Bean(name = \"primaryJdbcTemplate\")\r\n    public JdbcTemplate primaryJdbcTemplate(@Qualifier(\"primaryDataSource\") DataSource dataSource) {\r\n        return new JdbcTemplate(dataSource);\r\n    }\r\n\r\n    @Bean(name = \"secondaryJdbcTemplate\")\r\n    public JdbcTemplate secondaryJdbcTemplate(@Qualifier(\"secondaryDataSource\") DataSource dataSource) {\r\n        return new JdbcTemplate(dataSource);\r\n    }\r\n}\r\n```\r\n\r\n## 4. Implementing Repository and Service Layers\r\n\r\nNow that you have configured multiple data sources, you can create repository and service layers to interact with each data source independently.\r\n\r\n### 4.1. Creating Entity Classes\r\n\r\nDefine entity classes for each data source. These classes represent the database tables and their relationships. Annotate them with `@Entity` and define the appropriate mappings.\r\n\r\n```java\r\n@Entity\r\n@Table(name = \"primary_table\")\r\npublic class PrimaryEntity {\r\n    // Define entity properties and relationships\r\n}\r\n\r\n@Entity\r\n@Table(name = \"secondary_table\")\r\npublic class SecondaryEntity {\r\n    // Define entity properties and relationships\r\n}\r\n```\r\n\r\n### 4.2. Building Repository Interfaces\r\n\r\nCreate repository interfaces for each entity using Spring Data JPA. These interfaces will provide CRUD (Create, Read, Update, Delete) operations.\r\n\r\n```java\r\npublic interface PrimaryRepository extends JpaRepository<PrimaryEntity, Long> {\r\n    // Define custom query methods if needed\r\n}\r\n\r\npublic interface SecondaryRepository extends JpaRepository<SecondaryEntity, Long> {\r\n    // Define custom query methods if needed\r\n}\r\n```\r\n\r\n### 4.3. Developing Service Classes\r\n\r\nBuild service classes that encapsulate business logic and interact with the repositories. These services will use the respective `JdbcTemplate`  beans to execute queries on the correct data source.\r\n\r\n```java\r\n@Service\r\npublic class PrimaryService {\r\n\r\n    private final JdbcTemplate primaryJdbcTemplate;\r\n\r\n    @Autowired\r\n    public PrimaryService(@Qualifier(\"primaryJdbcTemplate\") JdbcTemplate primaryJdbcTemplate) {\r\n        this.primaryJdbcTemplate = primaryJdbcTemplate;\r\n    }\r\n\r\n    // Implement service methods using primaryJdbcTemplate\r\n}\r\n\r\n@Service\r\npublic class SecondaryService {\r\n\r\n    private final JdbcTemplate secondaryJdbcTemplate;\r\n\r\n    @Autowired\r\n    public SecondaryService(@Qualifier(\"secondaryJdbcTemplate\") JdbcTemplate secondaryJdbcTemplate) {\r\n        this.secondaryJdbcTemplate = secondaryJdbcTemplate;\r\n    }\r\n\r\n    // Implement service methods using secondaryJdbcTemplate\r\n}\r\n```\r\n\r\n## 5. Transaction Management\r\n\r\nWhen working with multiple data sources, it's crucial to manage transactions correctly. Spring Boot provides transaction management capabilities that you can leverage.\r\n\r\n### 5.1. Configuring Transaction Managers\r\n\r\nConfigure transaction managers for each data source in your configuration class:\r\n\r\n```java\r\n@Configuration\r\n@EnableTransactionManagement\r\npublic class TransactionManagerConfig {\r\n\r\n    @Primary\r\n    @Bean(name = \"primaryTransactionManager\")\r\n    public PlatformTransactionManager primaryTransactionManager(\r\n            @Qualifier(\"primaryDataSource\") DataSource primaryDataSource) {\r\n        return new DataSourceTransactionManager(primaryDataSource);\r\n    }\r\n\r\n    @Bean(name = \"secondaryTransactionManager\")\r\n    public PlatformTransactionManager secondaryTransactionManager(\r\n            @Qualifier(\"secondaryDataSource\") DataSource secondaryDataSource) {\r\n        return new DataSourceTransactionManager(secondaryDataSource);\r\n    }\r\n}\r\n```\r\n\r\nIn the code above, we define `PlatformTransactionManager` beans for both data sources.\r\n\r\n### 5.2. Transactional Annotations\r\n\r\nUse the `@Transactional` annotation to specify transaction boundaries in your service methods. You can indicate which transaction manager to use for each method.\r\n\r\n```java\r\n@Service\r\npublic class PrimaryService {\r\n\r\n    private final JdbcTemplate primaryJdbcTemplate;\r\n\r\n    @Autowired\r\n    public PrimaryService(@Qualifier(\"primaryJdbcTemplate\") JdbcTemplate primaryJdbcTemplate) {\r\n        this.primaryJdbcTemplate = primaryJdbcTemplate;\r\n    }\r\n\r\n    @Transactional(transactionManager = \"primaryTransactionManager\")\r\n    public void performPrimaryDataOperation() {\r\n        // Perform database operations using primaryJdbcTemplate\r\n    }\r\n}\r\n\r\n@Service\r\npublic class SecondaryService {\r\n\r\n    private final JdbcTemplate secondaryJdbcTemplate;\r\n\r\n    @Autowired\r\n    public SecondaryService(@Qualifier(\"secondaryJdbcTemplate\") JdbcTemplate secondaryJdbcTemplate) {\r\n        this.secondaryJdbcTemplate = secondaryJdbcTemplate;\r\n    }\r\n\r\n    @Transactional(transactionManager = \"secondaryTransactionManager\")\r\n    public void performSecondaryDataOperation() {\r\n        // Perform database operations using secondaryJdbcTemplate\r\n    }\r\n}\r\n```\r\n\r\nBy specifying the `transactionManager` attribute in the `@Transactional` annotation, you ensure that each method operates within the correct transaction context.\r\n\r\n## 6. Testing Multiple Data Sources\r\n\r\nTo ensure the reliability and correctness of your multiple data source setup, you need to create comprehensive tests.\r\n\r\n### 6.1. Unit Testing\r\n\r\nFor unit testing, you can use tools like JUnit and Mockito to mock the data source interactions. Create test cases for your service methods and validate their behavior.\r\n\r\n```java\r\n@RunWith(MockitoJUnitRunner.class)\r\npublic class PrimaryServiceTest {\r\n\r\n    @InjectMocks\r\n    private PrimaryService primaryService;\r\n\r\n    @Mock\r\n    private JdbcTemplate primaryJdbcTemplate;\r\n\r\n    @Test\r\n    public void testPerformPrimaryDataOperation() {\r\n        // Mock database interaction and test the service method\r\n    }\r\n}\r\n\r\n@RunWith(MockitoJUnitRunner.class)\r\npublic class SecondaryServiceTest {\r\n\r\n    @InjectMocks\r\n    private SecondaryService secondaryService;\r\n\r\n    @Mock\r\n    private JdbcTemplate secondaryJdbcTemplate;\r\n\r\n    @Test\r\n    public void testPerformSecondaryDataOperation() {\r\n        // Mock database interaction and test the service method\r\n    }\r\n}\r\n```\r\n\r\n### 6.2. Integration Testing\r\n\r\nFor integration testing, you can use Spring's `@SpringBootTest` annotation to create test configurations that mimic your production environment. You can also use an embedded database like H2 for testing.\r\n\r\n```java\r\n@SpringBootTest\r\npublic class MultipleDataSourceIntegrationTest {\r\n\r\n    @Autowired\r\n    private PrimaryService primaryService;\r\n\r\n    @Autowired\r\n    private SecondaryService secondaryService;\r\n\r\n    @Test\r\n    public void testMultipleDataSources() {\r\n        // Write integration tests to validate interactions between services\r\n    }\r\n}\r\n```\r\n\r\n## 7. Conclusion\r\nSetting up and managing multiple data sources in a Spring Boot application can be a challenging but necessary task for many enterprise applications. By following the steps outlined in this article, you can achieve data isolation, optimize performance, and integrate seamlessly with various data sources.\r\n\r\nRemember to configure the necessary dependencies, create and configure data source beans and JdbcTemplate beans, implement repository and service layers, and manage transactions correctly. Comprehensive unit and integration testing are crucial to ensure the reliability and correctness of your multiple data source setup.\r\n\r\nWith the right design and careful implementation, Spring Boot makes it possible to work with multiple data sources efficiently, enabling you to build robust and scalable applications that meet the complex data requirements of modern enterprise systems.","reactions":{"url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/15/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/15/timeline","performed_via_github_app":null,"state_reason":"completed"}],"projects":[{"id":421885911,"node_id":"R_kgDOGSV31w","name":"Knowledgeable","full_name":"Pasquale-Favella/Knowledgeable","private":false,"owner":{"login":"Pasquale-Favella","id":62385965,"node_id":"MDQ6VXNlcjYyMzg1OTY1","avatar_url":"https://avatars.githubusercontent.com/u/62385965?v=4","gravatar_id":"","url":"https://api.github.com/users/Pasquale-Favella","html_url":"https://github.com/Pasquale-Favella","followers_url":"https://api.github.com/users/Pasquale-Favella/followers","following_url":"https://api.github.com/users/Pasquale-Favella/following{/other_user}","gists_url":"https://api.github.com/users/Pasquale-Favella/gists{/gist_id}","starred_url":"https://api.github.com/users/Pasquale-Favella/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Pasquale-Favella/subscriptions","organizations_url":"https://api.github.com/users/Pasquale-Favella/orgs","repos_url":"https://api.github.com/users/Pasquale-Favella/repos","events_url":"https://api.github.com/users/Pasquale-Favella/events{/privacy}","received_events_url":"https://api.github.com/users/Pasquale-Favella/received_events","type":"User","site_admin":false},"html_url":"https://github.com/Pasquale-Favella/Knowledgeable","description":"Beautiful wikipedia search engine with React Node & Express","fork":false,"url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable","forks_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/forks","keys_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/keys{/key_id}","collaborators_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/teams","hooks_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/hooks","issue_events_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/issues/events{/number}","events_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/events","assignees_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/assignees{/user}","branches_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/branches{/branch}","tags_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/tags","blobs_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/git/refs{/sha}","trees_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/git/trees{/sha}","statuses_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/statuses/{sha}","languages_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/languages","stargazers_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/stargazers","contributors_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/contributors","subscribers_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/subscribers","subscription_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/subscription","commits_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/commits{/sha}","git_commits_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/git/commits{/sha}","comments_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/comments{/number}","issue_comment_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/issues/comments{/number}","contents_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/contents/{+path}","compare_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/compare/{base}...{head}","merges_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/merges","archive_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/downloads","issues_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/issues{/number}","pulls_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/pulls{/number}","milestones_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/milestones{/number}","notifications_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/labels{/name}","releases_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/releases{/id}","deployments_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/deployments","created_at":"2021-10-27T16:06:07Z","updated_at":"2023-01-20T11:14:33Z","pushed_at":"2021-11-02T14:31:40Z","git_url":"git://github.com/Pasquale-Favella/Knowledgeable.git","ssh_url":"git@github.com:Pasquale-Favella/Knowledgeable.git","clone_url":"https://github.com/Pasquale-Favella/Knowledgeable.git","svn_url":"https://github.com/Pasquale-Favella/Knowledgeable","homepage":"https://knowledgeable.herokuapp.com/","size":1048,"stargazers_count":3,"watchers_count":3,"language":"JavaScript","has_issues":true,"has_projects":true,"has_downloads":true,"has_wiki":true,"has_pages":false,"has_discussions":false,"forks_count":0,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":0,"license":null,"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":["express","mern-stack","neumorphism","react","search-engine"],"visibility":"public","forks":0,"open_issues":0,"watchers":3,"default_branch":"master"},{"id":587325591,"node_id":"R_kgDOIwHglw","name":"pasquale-favella.github.io","full_name":"Pasquale-Favella/pasquale-favella.github.io","private":false,"owner":{"login":"Pasquale-Favella","id":62385965,"node_id":"MDQ6VXNlcjYyMzg1OTY1","avatar_url":"https://avatars.githubusercontent.com/u/62385965?v=4","gravatar_id":"","url":"https://api.github.com/users/Pasquale-Favella","html_url":"https://github.com/Pasquale-Favella","followers_url":"https://api.github.com/users/Pasquale-Favella/followers","following_url":"https://api.github.com/users/Pasquale-Favella/following{/other_user}","gists_url":"https://api.github.com/users/Pasquale-Favella/gists{/gist_id}","starred_url":"https://api.github.com/users/Pasquale-Favella/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Pasquale-Favella/subscriptions","organizations_url":"https://api.github.com/users/Pasquale-Favella/orgs","repos_url":"https://api.github.com/users/Pasquale-Favella/repos","events_url":"https://api.github.com/users/Pasquale-Favella/events{/privacy}","received_events_url":"https://api.github.com/users/Pasquale-Favella/received_events","type":"User","site_admin":false},"html_url":"https://github.com/Pasquale-Favella/pasquale-favella.github.io","description":"Awesome blogfolio with Next.js","fork":false,"url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io","forks_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/forks","keys_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/keys{/key_id}","collaborators_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/teams","hooks_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/hooks","issue_events_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/events{/number}","events_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/events","assignees_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/assignees{/user}","branches_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/branches{/branch}","tags_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/tags","blobs_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/git/refs{/sha}","trees_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/git/trees{/sha}","statuses_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/statuses/{sha}","languages_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/languages","stargazers_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/stargazers","contributors_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/contributors","subscribers_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/subscribers","subscription_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/subscription","commits_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/commits{/sha}","git_commits_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/git/commits{/sha}","comments_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/comments{/number}","issue_comment_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/comments{/number}","contents_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/contents/{+path}","compare_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/compare/{base}...{head}","merges_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/merges","archive_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/downloads","issues_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues{/number}","pulls_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/pulls{/number}","milestones_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/milestones{/number}","notifications_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/labels{/name}","releases_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/releases{/id}","deployments_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/deployments","created_at":"2023-01-10T13:48:57Z","updated_at":"2024-07-26T07:47:01Z","pushed_at":"2024-07-26T07:48:31Z","git_url":"git://github.com/Pasquale-Favella/pasquale-favella.github.io.git","ssh_url":"git@github.com:Pasquale-Favella/pasquale-favella.github.io.git","clone_url":"https://github.com/Pasquale-Favella/pasquale-favella.github.io.git","svn_url":"https://github.com/Pasquale-Favella/pasquale-favella.github.io","homepage":"https://pasquale-favella.github.io/","size":8983,"stargazers_count":3,"watchers_count":3,"language":"TypeScript","has_issues":true,"has_projects":true,"has_downloads":true,"has_wiki":true,"has_pages":true,"has_discussions":true,"forks_count":1,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":0,"license":{"key":"mit","name":"MIT License","spdx_id":"MIT","url":"https://api.github.com/licenses/mit","node_id":"MDc6TGljZW5zZTEz"},"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":["nextjs","portfolio","react","tailwindcss"],"visibility":"public","forks":1,"open_issues":0,"watchers":3,"default_branch":"main"},{"id":440884146,"node_id":"R_kgDOGkdbsg","name":"Spring-React-PokeShow","full_name":"Pasquale-Favella/Spring-React-PokeShow","private":false,"owner":{"login":"Pasquale-Favella","id":62385965,"node_id":"MDQ6VXNlcjYyMzg1OTY1","avatar_url":"https://avatars.githubusercontent.com/u/62385965?v=4","gravatar_id":"","url":"https://api.github.com/users/Pasquale-Favella","html_url":"https://github.com/Pasquale-Favella","followers_url":"https://api.github.com/users/Pasquale-Favella/followers","following_url":"https://api.github.com/users/Pasquale-Favella/following{/other_user}","gists_url":"https://api.github.com/users/Pasquale-Favella/gists{/gist_id}","starred_url":"https://api.github.com/users/Pasquale-Favella/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Pasquale-Favella/subscriptions","organizations_url":"https://api.github.com/users/Pasquale-Favella/orgs","repos_url":"https://api.github.com/users/Pasquale-Favella/repos","events_url":"https://api.github.com/users/Pasquale-Favella/events{/privacy}","received_events_url":"https://api.github.com/users/Pasquale-Favella/received_events","type":"User","site_admin":false},"html_url":"https://github.com/Pasquale-Favella/Spring-React-PokeShow","description":"Toy web app for pokemon discovery with spring boot and react","fork":false,"url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow","forks_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/forks","keys_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/keys{/key_id}","collaborators_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/teams","hooks_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/hooks","issue_events_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/issues/events{/number}","events_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/events","assignees_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/assignees{/user}","branches_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/branches{/branch}","tags_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/tags","blobs_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/git/refs{/sha}","trees_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/git/trees{/sha}","statuses_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/statuses/{sha}","languages_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/languages","stargazers_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/stargazers","contributors_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/contributors","subscribers_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/subscribers","subscription_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/subscription","commits_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/commits{/sha}","git_commits_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/git/commits{/sha}","comments_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/comments{/number}","issue_comment_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/issues/comments{/number}","contents_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/contents/{+path}","compare_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/compare/{base}...{head}","merges_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/merges","archive_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/downloads","issues_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/issues{/number}","pulls_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/pulls{/number}","milestones_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/milestones{/number}","notifications_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/labels{/name}","releases_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/releases{/id}","deployments_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/deployments","created_at":"2021-12-22T14:26:29Z","updated_at":"2023-01-20T11:15:41Z","pushed_at":"2021-12-29T15:55:35Z","git_url":"git://github.com/Pasquale-Favella/Spring-React-PokeShow.git","ssh_url":"git@github.com:Pasquale-Favella/Spring-React-PokeShow.git","clone_url":"https://github.com/Pasquale-Favella/Spring-React-PokeShow.git","svn_url":"https://github.com/Pasquale-Favella/Spring-React-PokeShow","homepage":"","size":393,"stargazers_count":3,"watchers_count":3,"language":"Java","has_issues":true,"has_projects":true,"has_downloads":true,"has_wiki":true,"has_pages":false,"has_discussions":false,"forks_count":0,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":0,"license":null,"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":["fullstack","react","spring-boot"],"visibility":"public","forks":0,"open_issues":0,"watchers":3,"default_branch":"master"}]},"__N_SSG":true}