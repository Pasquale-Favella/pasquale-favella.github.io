{"pageProps":{"posts":[{"url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/22","repository_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io","labels_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/22/labels{/name}","comments_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/22/comments","events_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/22/events","html_url":"https://github.com/Pasquale-Favella/pasquale-favella.github.io/issues/22","id":2581642697,"node_id":"I_kwDOIwHgl86Z4L3J","number":22,"title":"Functional Programming in Java: A Comprehensive Guide","user":{"login":"Pasquale-Favella","id":62385965,"node_id":"MDQ6VXNlcjYyMzg1OTY1","avatar_url":"https://avatars.githubusercontent.com/u/62385965?v=4","gravatar_id":"","url":"https://api.github.com/users/Pasquale-Favella","html_url":"https://github.com/Pasquale-Favella","followers_url":"https://api.github.com/users/Pasquale-Favella/followers","following_url":"https://api.github.com/users/Pasquale-Favella/following{/other_user}","gists_url":"https://api.github.com/users/Pasquale-Favella/gists{/gist_id}","starred_url":"https://api.github.com/users/Pasquale-Favella/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Pasquale-Favella/subscriptions","organizations_url":"https://api.github.com/users/Pasquale-Favella/orgs","repos_url":"https://api.github.com/users/Pasquale-Favella/repos","events_url":"https://api.github.com/users/Pasquale-Favella/events{/privacy}","received_events_url":"https://api.github.com/users/Pasquale-Favella/received_events","type":"User","site_admin":false},"labels":[{"id":4991782391,"node_id":"LA_kwDOIwHgl88AAAABKYiN9w","url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/labels/documentation","name":"documentation","color":"0075ca","default":true,"description":"Improvements or additions to documentation"},{"id":5176884231,"node_id":"LA_kwDOIwHgl88AAAABNJD8Bw","url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/labels/Java","name":"Java","color":"57627E","default":false,"description":""}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2024-10-11T15:24:53Z","updated_at":"2024-10-11T15:25:30Z","closed_at":"2024-10-11T15:25:30Z","author_association":"OWNER","active_lock_reason":null,"body":"Functional programming (FP) has become a core paradigm in modern software development, and with **Java 8**, the language adopted several functional constructs, such as **lambda expressions**, **streams**, and the **Optional** class. Although Java is primarily object-oriented, these new additions enable developers to write more declarative and concise code, enhancing productivity, readability, and maintainability.\r\n\r\nIn this guide, we will cover the basics of **functional programming in Java**, explore key concepts such as lambda expressions, method references, and the Stream API, and examine the advantages and potential pitfalls of functional programming. By the end, you will have a solid understanding of how to use functional programming constructs in Java to write more efficient and expressive code.\r\n\r\n## What is Functional Programming?\r\n\r\n**Functional programming** is a programming paradigm that treats computation as the evaluation of mathematical functions and avoids changing state and mutable data. In functional programming, **functions are first-class citizens**, meaning they can be passed around as arguments, returned from other functions, and stored in variables—just like any other object.\r\n\r\n### Key Characteristics of Functional Programming:\r\n- **First-class functions**: Functions are treated as values.\r\n- **Immutability**: Data is immutable, meaning once created, its state cannot change.\r\n- **Pure functions**: Functions do not have side effects, meaning they don’t alter any external state or data.\r\n- **Declarative approach**: Focuses on **what** to do rather than **how** to do it.\r\n- **Higher-order functions**: Functions can accept other functions as parameters or return them.\r\n\r\nWhile **Java** is not a purely functional language like **Haskell** or **Scala**, it adopts many functional programming principles, making Java more flexible and powerful.\r\n\r\n## Functional Programming Constructs in Java\r\n\r\n### 1. Lambda Expressions\r\n\r\nThe introduction of **lambda expressions** in Java 8 was a game changer for simplifying the verbosity of anonymous classes and enabling functional programming. A **lambda expression** is essentially an anonymous function—short snippets of code that can be passed as arguments or stored in variables.\r\n\r\nA typical lambda expression looks like this:\r\n\r\n```java\r\n(parameters) -> expression\r\n```\r\nHere’s an example of using a lambda expression to create a **Comparator** for sorting:\r\n\r\n```java\r\nList<String> names = Arrays.asList(\"Alice\", \"Bob\", \"Charlie\");\r\nCollections.sort(names, (s1, s2) -> s1.compareTo(s2));\r\n```\r\nIn this case, `(s1, s2) -> s1.compareTo(s2)` is a lambda expression representing a `Comparator`.\r\n\r\n#### Advantages of Lambda Expressions:\r\n- **Concise code**: Reduces boilerplate code and makes the code more readable.\r\n- **Declarative programming**: Focuses on what the function does rather than how it is implemented.\r\n\r\n### 2. Method References\r\n\r\n**Method references** are shorthand for lambda expressions that call an existing method. Java provides several types of method references:\r\n- **Static method reference**: `ClassName::staticMethod`\r\n- **Instance method reference**: `instance::method`\r\n- **Constructor reference**: `ClassName::new`\r\n\r\nHere’s an example using a method reference instead of a lambda expression:\r\n\r\n```java\r\nList<String> names = Arrays.asList(\"Alice\", \"Bob\", \"Charlie\");\r\nnames.forEach(System.out::println);\r\n```\r\nIn this case, `System.out::println` is a method reference pointing to the `println` method of `System.out`.\r\n\r\n### 3. Functional Interfaces\r\n\r\nA **functional interface** is an interface with a single abstract method but can have multiple default or static methods. Functional interfaces are used as the target types for lambda expressions and method references.\r\n\r\nJava provides several built-in functional interfaces in the `java.util.function` package, such as:\r\n- **Predicate<T>**: Takes one argument and returns a boolean.\r\n- **Function<T, R>**: Takes one argument and returns a result.\r\n- **Supplier<T>**: Returns a result and takes no arguments.\r\n- **Consumer<T>**: Takes one argument and performs an action without returning any result.\r\n\r\nExample of `Predicate` functional interface:\r\n\r\n```java\r\nPredicate<Integer> isEven = x -> x % 2 == 0;\r\nSystem.out.println(isEven.test(4));  // true\r\n```\r\n### 4. The Stream API\r\n\r\nThe **Stream API** is one of the most powerful features introduced in Java 8, enabling functional-style operations on sequences of elements, such as collections, arrays, or input sources. Streams allow you to express complex data processing queries in a declarative way.\r\n\r\nStreams support both **intermediate** operations, which are lazy and return a new stream (like `filter`, `map`, `sorted`), and **terminal** operations, which are eager and produce a result or a side-effect (like `forEach`, `collect`, `reduce`).\r\n\r\nHere’s an example of filtering and transforming a list using the Stream API:\r\n\r\n```java\r\nList<String> names = Arrays.asList(\"Alice\", \"Bob\", \"Charlie\", \"David\");\r\nList<String> filteredNames = names.stream()\r\n    .filter(name -> name.startsWith(\"A\"))\r\n    .map(String::toUpperCase)\r\n    .collect(Collectors.toList());\r\n\r\nSystem.out.println(filteredNames);  // [ALICE]\r\n```\r\nThis code snippet demonstrates the power of streams to compose multiple operations in a clean, declarative manner.\r\n\r\n### 5. Optional Class\r\n\r\nThe **Optional** class provides a way to handle null values more gracefully by encapsulating optional values and avoiding `NullPointerException`. Instead of using `null` to indicate the absence of a value, you can use `Optional` to explicitly state whether a value is present.\r\n\r\nExample of using `Optional`:\r\n\r\n```java\r\nOptional<String> name = Optional.ofNullable(\"John\");\r\nname.ifPresent(System.out::println);  // John\r\n\r\nOptional<String> emptyName = Optional.ofNullable(null);\r\nSystem.out.println(emptyName.orElse(\"Unknown\"));  // Unknown\r\n```\r\nThe `Optional` class makes the code more readable and less prone to errors when dealing with potentially missing values.\r\n\r\n## Benefits of Functional Programming in Java\r\n\r\n1. **More Readable Code**: With lambda expressions and the Stream API, Java code can become much more declarative, making it easier to read and understand at a glance.\r\n   \r\n2. **Less Boilerplate**: Functional programming in Java reduces the verbosity typical of object-oriented programming by eliminating the need for anonymous classes, especially when dealing with simple tasks like sorting or filtering collections.\r\n\r\n3. **Encourages Immutability**: Functional programming promotes immutability, which can lead to fewer bugs, especially in concurrent applications. Immutable objects are inherently thread-safe, avoiding issues related to shared state.\r\n\r\n4. **Modular and Testable**: Pure functions are isolated from the outside world, which makes them easier to test and reuse. They rely only on their input and always produce the same output for the same input.\r\n\r\n## Potential Pitfalls of Functional Programming in Java\r\n\r\n1. **Learning Curve**: For developers unfamiliar with functional programming concepts, it may take time to adjust to writing and understanding lambda expressions, method references, and higher-order functions.\r\n\r\n2. **Performance Considerations**: While functional-style code can be more expressive, it can also introduce performance overhead, especially when using streams and lambda expressions in scenarios where performance is critical. Lazy evaluation in streams can mitigate some of this, but it’s essential to profile and optimize if necessary.\r\n\r\n3. **Overuse of `Optional`**: Although `Optional` helps to avoid null checks, overuse or inappropriate use (e.g., returning `Optional` in collections) can lead to performance issues and complicate the code.\r\n\r\n## Best Practices for Functional Programming in Java\r\n\r\n1. **Use Streams for Collection Processing**: Whenever you’re working with collections, consider using streams to filter, map, and reduce data rather than using traditional loops.\r\n\r\n2. **Leverage Method References**: Use method references where possible to make your code cleaner and more readable.\r\n\r\n3. **Use `Optional` Wisely**: Use `Optional` to represent optional return values but avoid overusing it in places like fields, method parameters, or collections.\r\n\r\n4. **Keep Functions Pure**: Whenever possible, write pure functions to avoid unintended side effects. This makes your code easier to reason about and test.\r\n\r\n## Conclusion\r\n\r\nFunctional programming has transformed the way developers write Java code. With the addition of lambda expressions, the Stream API, and the `Optional` class, Java has become much more expressive and powerful. While functional programming may initially seem foreign to Java developers who are used to object-oriented paradigms, embracing these new constructs can lead to more concise, maintainable, and testable code.\r\n\r\nBy understanding and applying functional programming principles in Java, you can write more efficient and elegant solutions to complex problems. However, as with any paradigm, it’s important to strike a balance between functional and object-oriented styles to avoid overcomplicating your code.\r\n\r\nHappy coding!\r\n\r\n\r\n","closed_by":{"login":"Pasquale-Favella","id":62385965,"node_id":"MDQ6VXNlcjYyMzg1OTY1","avatar_url":"https://avatars.githubusercontent.com/u/62385965?v=4","gravatar_id":"","url":"https://api.github.com/users/Pasquale-Favella","html_url":"https://github.com/Pasquale-Favella","followers_url":"https://api.github.com/users/Pasquale-Favella/followers","following_url":"https://api.github.com/users/Pasquale-Favella/following{/other_user}","gists_url":"https://api.github.com/users/Pasquale-Favella/gists{/gist_id}","starred_url":"https://api.github.com/users/Pasquale-Favella/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Pasquale-Favella/subscriptions","organizations_url":"https://api.github.com/users/Pasquale-Favella/orgs","repos_url":"https://api.github.com/users/Pasquale-Favella/repos","events_url":"https://api.github.com/users/Pasquale-Favella/events{/privacy}","received_events_url":"https://api.github.com/users/Pasquale-Favella/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/22/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/22/timeline","performed_via_github_app":null,"state_reason":"completed"},{"url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/21","repository_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io","labels_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/21/labels{/name}","comments_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/21/comments","events_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/21/events","html_url":"https://github.com/Pasquale-Favella/pasquale-favella.github.io/issues/21","id":2509823097,"node_id":"I_kwDOIwHgl86VmNx5","number":21,"title":"How to Prevent Angular Issues with API Contract Changes Using Zod","user":{"login":"Pasquale-Favella","id":62385965,"node_id":"MDQ6VXNlcjYyMzg1OTY1","avatar_url":"https://avatars.githubusercontent.com/u/62385965?v=4","gravatar_id":"","url":"https://api.github.com/users/Pasquale-Favella","html_url":"https://github.com/Pasquale-Favella","followers_url":"https://api.github.com/users/Pasquale-Favella/followers","following_url":"https://api.github.com/users/Pasquale-Favella/following{/other_user}","gists_url":"https://api.github.com/users/Pasquale-Favella/gists{/gist_id}","starred_url":"https://api.github.com/users/Pasquale-Favella/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Pasquale-Favella/subscriptions","organizations_url":"https://api.github.com/users/Pasquale-Favella/orgs","repos_url":"https://api.github.com/users/Pasquale-Favella/repos","events_url":"https://api.github.com/users/Pasquale-Favella/events{/privacy}","received_events_url":"https://api.github.com/users/Pasquale-Favella/received_events","type":"User","site_admin":false},"labels":[{"id":4991782391,"node_id":"LA_kwDOIwHgl88AAAABKYiN9w","url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/labels/documentation","name":"documentation","color":"0075ca","default":true,"description":"Improvements or additions to documentation"},{"id":5011828087,"node_id":"LA_kwDOIwHgl88AAAABKrptdw","url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/labels/Angular","name":"Angular","color":"F85A56","default":false,"description":""}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2024-09-06T08:21:30Z","updated_at":"2024-09-06T08:28:18Z","closed_at":"2024-09-06T08:28:18Z","author_association":"OWNER","active_lock_reason":null,"body":"As a front-end developer, one common problem you may face is ensuring your application doesn't break when the API contract changes. Whether you're working with API responses, external data, or handling backend integration, it’s critical to have a solution that validates the data your front-end consumes. In this article, we’ll explore how using `Zod`, a popular data validation library, can help prevent front-end issues due to `API contract changes`.\r\n\r\n## Common Problem: Front-End Breaks Due to API Contract Changes\r\n\r\nImagine you’re developing a feature for your project, and you agree on an `API contract` with the back-end team. You write your code, implement the feature, and even cover multiple test scenarios. Everything works perfectly. However, some time later, the feature stops working.\r\n\r\nUpon investigation, you find that the `front-end code` is fine, and all your tests are passing. The issue? The `API response` has changed, and the `API contract` you initially agreed upon is no longer valid. As a result, the feature breaks, and these changes propagate through your entire application.\r\n\r\nThis is a common issue that many developers face when working with `API integrations`. The key question is: how can you prevent your application from breaking due to unexpected changes in external data?\r\n\r\n## Solution: Using Zod for Data Validation\r\n\r\nOne of the best ways to prevent front-end issues caused by API changes is by validating the external data before using it in your application. This is where `Zod`, a lightweight and flexible data validation library, comes into play. [Zod](https://zod.dev/) allows you to define `schemas` for your data and validate it at runtime, ensuring that any incoming data adheres to the expected structure.\r\n\r\nLet’s dive into how you can use Zod to solve this issue.\r\n\r\n## Step-by-Step Guide: How to Use Zod for Data Validation\r\n\r\nZod supports various types of data validation. Let’s start with something simple: validating string data.\r\n\r\n```javascript\r\nimport { z } from 'zod';\r\n\r\nconst StringSchema = z.string();\r\nconst EmailSchema = z.string().email();\r\nconst LengthSchema = z.string().min(3).max(15);\r\n```\r\nIn the above example, we are defining schemas that validate the data type. Zod doesn’t just check if the value is a string but also ensures that the string matches certain conditions—such as validating an email format or checking if the string has a specific length.\r\n\r\nHere’s how you can validate data with Zod:\r\n\r\n```javascript\r\nStringSchema.parse(456); // Throws an error because 456 is not a string\r\nStringSchema.parse('hello'); // Passes validation because 'hello' is a string\r\n\r\nconst result = EmailSchema.safeParse('not-an-email'); \r\n// Returns { success: false, error: {...} }\r\n```\r\nYou can also customize the error messages to be more informative:\r\n\r\n```javascript\r\nconst CustomStringSchema = z.string().refine(val => val === 'expected', {\r\n  message: 'This is not the expected value!',\r\n});\r\n```\r\n## Using Zod to Validate API Responses\r\n\r\nLet’s apply Zod to a more complex scenario: `validating API responses`. Imagine you’re working with an API that returns the following structure:\r\n\r\n```typescript\r\ninterface ApiResponse {\r\n  id: number;\r\n  name: string;\r\n  items: Item[];\r\n}\r\n\r\ninterface Item {\r\n  productId: string;\r\n  quantity: number;\r\n}\r\n```\r\nIn a typical `Angular` application, you might fetch this data using the `HttpClient` service like this:\r\n\r\n```typescript\r\n@Injectable({ providedIn: 'root' })\r\nexport class ApiService {\r\n  private readonly http = inject(HttpClient);\r\n\r\n  fetchData(): Observable<ApiResponse> {\r\n    return this.http.get<ApiResponse>('/api/data');\r\n  }\r\n}\r\n```\r\nUsing `Zod`, you can define a schema that mirrors this structure and validates the API response:\r\n\r\n```typescript\r\nimport { z } from 'zod';\r\n\r\nconst ApiResponseSchema = z.object({\r\n  id: z.number(),\r\n  name: z.string(),\r\n  items: z.array(\r\n    z.object({\r\n      productId: z.string(),\r\n      quantity: z.number(),\r\n    })\r\n  ),\r\n});\r\n\r\ntype ApiResponse = z.infer<typeof ApiResponseSchema>;\r\n```\r\nHere’s how you can integrate this `schema` into your service to ensure the data is valid:\r\n\r\n```typescript\r\n@Injectable({ providedIn: 'root' })\r\nexport class ZodApiService {\r\n  private readonly http = inject(HttpClient);\r\n\r\n  fetchData(): Observable<ApiResponse> {\r\n    return this.http.get('/api/data').pipe(\r\n      map((response) => ApiResponseSchema.parse(response)) // Validates the response\r\n    );\r\n  }\r\n}\r\n```\r\nNow, if the API changes unexpectedly—say the backend sends `itemId` instead of `productId`—Zod will throw an error, allowing you to catch the issue immediately. This proactive validation helps prevent bugs caused by inconsistent data structures.\r\n\r\n## Advanced Usage: Creating Custom RxJs Operators for Validation\r\n\r\nYou can simplify the process even further by creating a custom `RxJs operator` to validate data throughout your application:\r\n\r\n```typescript\r\nexport function validateWithZod<T extends z.ZodTypeAny>(schema: T) {\r\n  return map((response: unknown) => schema.parse(response));\r\n}\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ZodApiService {\r\n  private readonly http = inject(HttpClient);\r\n\r\n  fetchData(): Observable<ApiResponse> {\r\n    return this.http.get('/api/data').pipe(validateWithZod(ApiResponseSchema));\r\n  }\r\n}\r\n```\r\nNow, whenever the backend returns an invalid response, `Zod` will catch it and display a clear error message in your browser’s console.\r\n\r\nFor instance, if the backend sends the following response:\r\n```json\r\n{\r\n  \"id\": 101,\r\n  \"name\": \"Example\",\r\n  \"items\": [\r\n    { \"productId\": \"abc\", \"quantity\": 3 },\r\n    { \"productId\": \"def\", \"quantity\": 2 }\r\n  ]\r\n}\r\n```\r\nZod will validate the response. If the API structure is incorrect, Zod will notify you with an error message, making it clear where things went wrong.\r\n\r\n## Why Data Validation is Crucial for Front-End Developers\r\n\r\nIn modern `front-end development`, applications often rely on data fetched from external APIs. Since this data is external, it falls outside the scope of TypeScript’s type-checking. This means that when the API response structure changes, your front-end application is at risk of breaking—unless you validate the data.\r\n\r\nUsing a data validation library like Zod allows you to:\r\n- `Ensure data consistency` across your application\r\n- `Catch errors early`, before they propagate through the system\r\n- `Handle unexpected API changes` effectively\r\n- Provide `better error messages` for debugging\r\n\r\n## Conclusion\r\n\r\nTo sum up, `validating API responses` and other external data is a crucial step in ensuring your front-end application remains robust, even when external systems change. While you can generate types from the API, using a runtime validation tool like Zod provides an extra layer of protection. Zod not only helps you validate data but also allows you to catch and handle errors proactively, saving you time and preventing bugs in the long run.\r\n\r\nBy integrating Zod into your front-end development workflow, you can effectively mitigate the risks associated with changing API contracts and maintain a stable application.\r\n\r\nHappy coding!","closed_by":{"login":"Pasquale-Favella","id":62385965,"node_id":"MDQ6VXNlcjYyMzg1OTY1","avatar_url":"https://avatars.githubusercontent.com/u/62385965?v=4","gravatar_id":"","url":"https://api.github.com/users/Pasquale-Favella","html_url":"https://github.com/Pasquale-Favella","followers_url":"https://api.github.com/users/Pasquale-Favella/followers","following_url":"https://api.github.com/users/Pasquale-Favella/following{/other_user}","gists_url":"https://api.github.com/users/Pasquale-Favella/gists{/gist_id}","starred_url":"https://api.github.com/users/Pasquale-Favella/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Pasquale-Favella/subscriptions","organizations_url":"https://api.github.com/users/Pasquale-Favella/orgs","repos_url":"https://api.github.com/users/Pasquale-Favella/repos","events_url":"https://api.github.com/users/Pasquale-Favella/events{/privacy}","received_events_url":"https://api.github.com/users/Pasquale-Favella/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/21/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/21/timeline","performed_via_github_app":null,"state_reason":"completed"},{"url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/16","repository_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io","labels_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/16/labels{/name}","comments_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/16/comments","events_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/16/events","html_url":"https://github.com/Pasquale-Favella/pasquale-favella.github.io/issues/16","id":2070945385,"node_id":"I_kwDOIwHgl857cB5p","number":16,"title":"Angular Signals with RxJS - A practical example","user":{"login":"Pasquale-Favella","id":62385965,"node_id":"MDQ6VXNlcjYyMzg1OTY1","avatar_url":"https://avatars.githubusercontent.com/u/62385965?v=4","gravatar_id":"","url":"https://api.github.com/users/Pasquale-Favella","html_url":"https://github.com/Pasquale-Favella","followers_url":"https://api.github.com/users/Pasquale-Favella/followers","following_url":"https://api.github.com/users/Pasquale-Favella/following{/other_user}","gists_url":"https://api.github.com/users/Pasquale-Favella/gists{/gist_id}","starred_url":"https://api.github.com/users/Pasquale-Favella/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Pasquale-Favella/subscriptions","organizations_url":"https://api.github.com/users/Pasquale-Favella/orgs","repos_url":"https://api.github.com/users/Pasquale-Favella/repos","events_url":"https://api.github.com/users/Pasquale-Favella/events{/privacy}","received_events_url":"https://api.github.com/users/Pasquale-Favella/received_events","type":"User","site_admin":false},"labels":[{"id":4991782391,"node_id":"LA_kwDOIwHgl88AAAABKYiN9w","url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/labels/documentation","name":"documentation","color":"0075ca","default":true,"description":"Improvements or additions to documentation"},{"id":5011828087,"node_id":"LA_kwDOIwHgl88AAAABKrptdw","url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/labels/Angular","name":"Angular","color":"F85A56","default":false,"description":""},{"id":5012942463,"node_id":"LA_kwDOIwHgl88AAAABKstufw","url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/labels/Rxjs","name":"Rxjs","color":"f9d0c4","default":false,"description":""}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2024-01-08T17:44:37Z","updated_at":"2024-04-12T08:43:56Z","closed_at":"2024-04-12T08:43:56Z","author_association":"OWNER","active_lock_reason":null,"body":"This article will delve into the seamless fusion of Angular Signals and RxJS, highlighting how these two technologies can effortlessly blend together, showcasing that RxJS continues to shine brightly in their combined usage. The combination of these two technologies can lead to a more efficient and streamlined development process, allowing developers to create more complex applications with ease. By leveraging the power of Angular Signals and RxJS, developers can create reactive applications that are both scalable and maintainable.\r\n\r\n## Initial Setup\r\n```html\r\n <input type=\"text\" (keyup)=\"search($event)\" />\r\n```\r\n*just an input with a keyup event.*\r\n```typescript\r\n export class AppComponent {\r\n  http = inject(HttpClient);\r\n\r\n  search(event: Event) {\r\n    const value = (event.target as HTMLInputElement).value;\r\n  }\r\n}\r\n```\r\nInside our class has been injected `HttpClient` and created a search function which gets a value of the input but doesn't do anything else.\r\n\r\n## Implementing API call\r\n\r\nNow, the challenge lies in implementing the retrieval of data from the API both upon initialization and after entering text into the input. We aim to incorporate debouncing to prevent excessive API calls, ensuring that we don't overlook any submitted values already present.\r\n\r\n> This is exactly the case where RxJS shines in comparison to signals.\r\nWhat we are getting from signals is simply a state to read or update the value and computed which returns some value based on another signal. The last thing that we get from signals is effect which allows us to do something when our signal is changed.\r\n\r\nThis is not what we need for our case here. We have the case where RxJS can help us a lot.\r\n```typescript\r\nexport class AppComponent {\r\n  ...\r\n  searchSig = signal<string>('');\r\n\r\n  search(event: Event) {\r\n    const value = (event.target as HTMLInputElement).value;\r\n    this.searchSig.set(value);\r\n  }\r\n}\r\n```\r\nOur first step here is to create a `signal` which stores our search value. Now we can update this `signal` when we change the input with `set` function.\r\n\r\nBut it is not all. We want to make an API call every single time when we change our search. The main problem is that we can't write this code with signal effectively. Now we have a function in Angular which allows us to transform `signal` to the `observable`.\r\n```typescript\r\nimport { toObservable, toSignal } from '@angular/core/rxjs-interop';\r\n\r\nexport class AppComponent {\r\n  ...\r\n  searchSig = signal<string>('');\r\n  articles$ = toObservable(this.searchSig).pipe(\r\n    debounceTime(300),\r\n    distinctUntilChanged(),\r\n    switchMap((searchTerm) =>\r\n      this.http.get<Article[]>(\r\n        `http://localhost:8080/articles?title=${searchTerm}`\r\n      )\r\n    )\r\n  );\r\n}\r\n```\r\nIn this instance, we employed the `toObservable` function to convert our `signal` into an `observable`, enabling the application of `RxJS` functions. We incorporated `debounceTime` to prevent excessive API calls, `distinctUntilChanged` to avoid redundant API calls with identical data, and `switchMap` to execute an HTTP request\r\n>So this code just creates an observable from the signal.\r\n\r\nThis doesn't signal a return to our previous less efficient practices, such as relying on async pipes or subscriptions. We're determined to steer clear of reverting to the digest cycle and the inherent issues it brings.\r\n```typescript\r\nexport class AppComponent {\r\n  ...\r\n  articlesSig = toSignal(this.articles$);\r\n}\r\n```\r\nThis is why here we created one more property which is a `signal`. We used `toSignal` function to convert our RxJS `observable` to a signal. Now we can safely use it inside our markup is a normal signal.\r\n```html\r\n<div *ngFor=\"let article of articlesSig()\">\r\n  {{ article.title }}\r\n</div>\r\n```\r\n*or with the new built-in for loop.*\r\n```html\r\n@for (article of articlesSig(); track article.title) {\r\n  {{ article.title }}\r\n} \r\n```\r\nWe can see that our API call is done and we rendered a list of article. When we type something it refetches the data with the rules that we wrote in RxJS.\r\n\r\n## Conclusion\r\n\r\nthis article has explored the harmonious integration of Angular Signals and RxJS, demonstrating their synergistic collaboration. By showcasing the effective fusion of these two technologies, we've underscored the ongoing strength of RxJS within this combined usage.\r\n\r\nHappy coding!","closed_by":{"login":"Pasquale-Favella","id":62385965,"node_id":"MDQ6VXNlcjYyMzg1OTY1","avatar_url":"https://avatars.githubusercontent.com/u/62385965?v=4","gravatar_id":"","url":"https://api.github.com/users/Pasquale-Favella","html_url":"https://github.com/Pasquale-Favella","followers_url":"https://api.github.com/users/Pasquale-Favella/followers","following_url":"https://api.github.com/users/Pasquale-Favella/following{/other_user}","gists_url":"https://api.github.com/users/Pasquale-Favella/gists{/gist_id}","starred_url":"https://api.github.com/users/Pasquale-Favella/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Pasquale-Favella/subscriptions","organizations_url":"https://api.github.com/users/Pasquale-Favella/orgs","repos_url":"https://api.github.com/users/Pasquale-Favella/repos","events_url":"https://api.github.com/users/Pasquale-Favella/events{/privacy}","received_events_url":"https://api.github.com/users/Pasquale-Favella/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/16/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/16/timeline","performed_via_github_app":null,"state_reason":"completed"}],"projects":[{"id":421885911,"node_id":"R_kgDOGSV31w","name":"Knowledgeable","full_name":"Pasquale-Favella/Knowledgeable","private":false,"owner":{"login":"Pasquale-Favella","id":62385965,"node_id":"MDQ6VXNlcjYyMzg1OTY1","avatar_url":"https://avatars.githubusercontent.com/u/62385965?v=4","gravatar_id":"","url":"https://api.github.com/users/Pasquale-Favella","html_url":"https://github.com/Pasquale-Favella","followers_url":"https://api.github.com/users/Pasquale-Favella/followers","following_url":"https://api.github.com/users/Pasquale-Favella/following{/other_user}","gists_url":"https://api.github.com/users/Pasquale-Favella/gists{/gist_id}","starred_url":"https://api.github.com/users/Pasquale-Favella/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Pasquale-Favella/subscriptions","organizations_url":"https://api.github.com/users/Pasquale-Favella/orgs","repos_url":"https://api.github.com/users/Pasquale-Favella/repos","events_url":"https://api.github.com/users/Pasquale-Favella/events{/privacy}","received_events_url":"https://api.github.com/users/Pasquale-Favella/received_events","type":"User","site_admin":false},"html_url":"https://github.com/Pasquale-Favella/Knowledgeable","description":"Beautiful wikipedia search engine with React Node & Express","fork":false,"url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable","forks_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/forks","keys_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/keys{/key_id}","collaborators_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/teams","hooks_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/hooks","issue_events_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/issues/events{/number}","events_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/events","assignees_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/assignees{/user}","branches_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/branches{/branch}","tags_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/tags","blobs_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/git/refs{/sha}","trees_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/git/trees{/sha}","statuses_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/statuses/{sha}","languages_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/languages","stargazers_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/stargazers","contributors_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/contributors","subscribers_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/subscribers","subscription_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/subscription","commits_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/commits{/sha}","git_commits_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/git/commits{/sha}","comments_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/comments{/number}","issue_comment_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/issues/comments{/number}","contents_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/contents/{+path}","compare_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/compare/{base}...{head}","merges_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/merges","archive_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/downloads","issues_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/issues{/number}","pulls_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/pulls{/number}","milestones_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/milestones{/number}","notifications_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/labels{/name}","releases_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/releases{/id}","deployments_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/deployments","created_at":"2021-10-27T16:06:07Z","updated_at":"2023-01-20T11:14:33Z","pushed_at":"2021-11-02T14:31:40Z","git_url":"git://github.com/Pasquale-Favella/Knowledgeable.git","ssh_url":"git@github.com:Pasquale-Favella/Knowledgeable.git","clone_url":"https://github.com/Pasquale-Favella/Knowledgeable.git","svn_url":"https://github.com/Pasquale-Favella/Knowledgeable","homepage":"https://knowledgeable.herokuapp.com/","size":1048,"stargazers_count":3,"watchers_count":3,"language":"JavaScript","has_issues":true,"has_projects":true,"has_downloads":true,"has_wiki":true,"has_pages":false,"has_discussions":false,"forks_count":0,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":0,"license":null,"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":["express","mern-stack","neumorphism","react","search-engine"],"visibility":"public","forks":0,"open_issues":0,"watchers":3,"default_branch":"master"},{"id":587325591,"node_id":"R_kgDOIwHglw","name":"pasquale-favella.github.io","full_name":"Pasquale-Favella/pasquale-favella.github.io","private":false,"owner":{"login":"Pasquale-Favella","id":62385965,"node_id":"MDQ6VXNlcjYyMzg1OTY1","avatar_url":"https://avatars.githubusercontent.com/u/62385965?v=4","gravatar_id":"","url":"https://api.github.com/users/Pasquale-Favella","html_url":"https://github.com/Pasquale-Favella","followers_url":"https://api.github.com/users/Pasquale-Favella/followers","following_url":"https://api.github.com/users/Pasquale-Favella/following{/other_user}","gists_url":"https://api.github.com/users/Pasquale-Favella/gists{/gist_id}","starred_url":"https://api.github.com/users/Pasquale-Favella/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Pasquale-Favella/subscriptions","organizations_url":"https://api.github.com/users/Pasquale-Favella/orgs","repos_url":"https://api.github.com/users/Pasquale-Favella/repos","events_url":"https://api.github.com/users/Pasquale-Favella/events{/privacy}","received_events_url":"https://api.github.com/users/Pasquale-Favella/received_events","type":"User","site_admin":false},"html_url":"https://github.com/Pasquale-Favella/pasquale-favella.github.io","description":"Awesome blogfolio with Next.js","fork":false,"url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io","forks_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/forks","keys_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/keys{/key_id}","collaborators_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/teams","hooks_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/hooks","issue_events_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/events{/number}","events_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/events","assignees_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/assignees{/user}","branches_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/branches{/branch}","tags_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/tags","blobs_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/git/refs{/sha}","trees_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/git/trees{/sha}","statuses_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/statuses/{sha}","languages_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/languages","stargazers_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/stargazers","contributors_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/contributors","subscribers_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/subscribers","subscription_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/subscription","commits_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/commits{/sha}","git_commits_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/git/commits{/sha}","comments_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/comments{/number}","issue_comment_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/comments{/number}","contents_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/contents/{+path}","compare_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/compare/{base}...{head}","merges_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/merges","archive_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/downloads","issues_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues{/number}","pulls_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/pulls{/number}","milestones_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/milestones{/number}","notifications_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/labels{/name}","releases_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/releases{/id}","deployments_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/deployments","created_at":"2023-01-10T13:48:57Z","updated_at":"2024-10-11T15:00:47Z","pushed_at":"2024-10-11T15:02:14Z","git_url":"git://github.com/Pasquale-Favella/pasquale-favella.github.io.git","ssh_url":"git@github.com:Pasquale-Favella/pasquale-favella.github.io.git","clone_url":"https://github.com/Pasquale-Favella/pasquale-favella.github.io.git","svn_url":"https://github.com/Pasquale-Favella/pasquale-favella.github.io","homepage":"https://pasquale-favella.github.io/","size":9093,"stargazers_count":3,"watchers_count":3,"language":"TypeScript","has_issues":true,"has_projects":true,"has_downloads":true,"has_wiki":true,"has_pages":true,"has_discussions":true,"forks_count":1,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":0,"license":{"key":"mit","name":"MIT License","spdx_id":"MIT","url":"https://api.github.com/licenses/mit","node_id":"MDc6TGljZW5zZTEz"},"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":["nextjs","portfolio","react","tailwindcss"],"visibility":"public","forks":1,"open_issues":0,"watchers":3,"default_branch":"main"},{"id":440884146,"node_id":"R_kgDOGkdbsg","name":"Spring-React-PokeShow","full_name":"Pasquale-Favella/Spring-React-PokeShow","private":false,"owner":{"login":"Pasquale-Favella","id":62385965,"node_id":"MDQ6VXNlcjYyMzg1OTY1","avatar_url":"https://avatars.githubusercontent.com/u/62385965?v=4","gravatar_id":"","url":"https://api.github.com/users/Pasquale-Favella","html_url":"https://github.com/Pasquale-Favella","followers_url":"https://api.github.com/users/Pasquale-Favella/followers","following_url":"https://api.github.com/users/Pasquale-Favella/following{/other_user}","gists_url":"https://api.github.com/users/Pasquale-Favella/gists{/gist_id}","starred_url":"https://api.github.com/users/Pasquale-Favella/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Pasquale-Favella/subscriptions","organizations_url":"https://api.github.com/users/Pasquale-Favella/orgs","repos_url":"https://api.github.com/users/Pasquale-Favella/repos","events_url":"https://api.github.com/users/Pasquale-Favella/events{/privacy}","received_events_url":"https://api.github.com/users/Pasquale-Favella/received_events","type":"User","site_admin":false},"html_url":"https://github.com/Pasquale-Favella/Spring-React-PokeShow","description":"Toy web app for pokemon discovery with spring boot and react","fork":false,"url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow","forks_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/forks","keys_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/keys{/key_id}","collaborators_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/teams","hooks_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/hooks","issue_events_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/issues/events{/number}","events_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/events","assignees_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/assignees{/user}","branches_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/branches{/branch}","tags_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/tags","blobs_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/git/refs{/sha}","trees_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/git/trees{/sha}","statuses_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/statuses/{sha}","languages_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/languages","stargazers_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/stargazers","contributors_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/contributors","subscribers_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/subscribers","subscription_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/subscription","commits_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/commits{/sha}","git_commits_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/git/commits{/sha}","comments_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/comments{/number}","issue_comment_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/issues/comments{/number}","contents_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/contents/{+path}","compare_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/compare/{base}...{head}","merges_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/merges","archive_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/downloads","issues_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/issues{/number}","pulls_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/pulls{/number}","milestones_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/milestones{/number}","notifications_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/labels{/name}","releases_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/releases{/id}","deployments_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/deployments","created_at":"2021-12-22T14:26:29Z","updated_at":"2023-01-20T11:15:41Z","pushed_at":"2021-12-29T15:55:35Z","git_url":"git://github.com/Pasquale-Favella/Spring-React-PokeShow.git","ssh_url":"git@github.com:Pasquale-Favella/Spring-React-PokeShow.git","clone_url":"https://github.com/Pasquale-Favella/Spring-React-PokeShow.git","svn_url":"https://github.com/Pasquale-Favella/Spring-React-PokeShow","homepage":"","size":393,"stargazers_count":3,"watchers_count":3,"language":"Java","has_issues":true,"has_projects":true,"has_downloads":true,"has_wiki":true,"has_pages":false,"has_discussions":false,"forks_count":0,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":0,"license":null,"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":["fullstack","react","spring-boot"],"visibility":"public","forks":0,"open_issues":0,"watchers":3,"default_branch":"master"}]},"__N_SSG":true}