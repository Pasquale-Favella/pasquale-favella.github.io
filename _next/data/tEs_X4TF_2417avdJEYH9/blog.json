{"pageProps":{"posts":[{"url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/24","repository_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io","labels_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/24/labels{/name}","comments_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/24/comments","events_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/24/events","html_url":"https://github.com/Pasquale-Favella/pasquale-favella.github.io/issues/24","id":2583503584,"node_id":"I_kwDOIwHgl86Z_SLg","number":24,"title":"Angular  NgRx Component Store: A Comprehensive Guide","user":{"login":"Pasquale-Favella","id":62385965,"node_id":"MDQ6VXNlcjYyMzg1OTY1","avatar_url":"https://avatars.githubusercontent.com/u/62385965?v=4","gravatar_id":"","url":"https://api.github.com/users/Pasquale-Favella","html_url":"https://github.com/Pasquale-Favella","followers_url":"https://api.github.com/users/Pasquale-Favella/followers","following_url":"https://api.github.com/users/Pasquale-Favella/following{/other_user}","gists_url":"https://api.github.com/users/Pasquale-Favella/gists{/gist_id}","starred_url":"https://api.github.com/users/Pasquale-Favella/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Pasquale-Favella/subscriptions","organizations_url":"https://api.github.com/users/Pasquale-Favella/orgs","repos_url":"https://api.github.com/users/Pasquale-Favella/repos","events_url":"https://api.github.com/users/Pasquale-Favella/events{/privacy}","received_events_url":"https://api.github.com/users/Pasquale-Favella/received_events","type":"User","site_admin":false},"labels":[{"id":4991782391,"node_id":"LA_kwDOIwHgl88AAAABKYiN9w","url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/labels/documentation","name":"documentation","color":"0075ca","default":true,"description":"Improvements or additions to documentation"},{"id":5011828087,"node_id":"LA_kwDOIwHgl88AAAABKrptdw","url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/labels/Angular","name":"Angular","color":"F85A56","default":false,"description":""},{"id":5012942463,"node_id":"LA_kwDOIwHgl88AAAABKstufw","url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/labels/Rxjs","name":"Rxjs","color":"f9d0c4","default":false,"description":""}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2024-10-12T23:34:12Z","updated_at":"2024-10-12T23:34:49Z","closed_at":"2024-10-12T23:34:49Z","author_association":"OWNER","active_lock_reason":null,"body":"# Introduction\n\nIn the ever-evolving world of Angular development, efficient state management is crucial for building robust and scalable applications. NgRx Component Store, a powerful library in the NgRx ecosystem, offers a streamlined approach to managing local state in Angular apps. This comprehensive guide will walk you through implementing NgRx Component Store in a real-world scenario: an e-commerce product catalog system.\n\n## Getting Started with NgRx Component Store\n\nBefore diving into our e-commerce example, let's set up NgRx Component Store in your Angular project:\n\n```bash\nng add @ngrx/component-store\n```\n\nThis command adds the necessary dependencies to your project, setting the stage for efficient state management.\n\n## Building a Product Catalog Store\n\nLet's create a component store for our product catalog:\n\n```typescript\nimport { Injectable } from '@angular/core';\nimport { ComponentStore } from '@ngrx/component-store';\n\ninterface Product {\n  id: number;\n  name: string;\n  description: string;\n  price: number;\n  category: string;\n  inStock: boolean;\n}\n\ninterface ProductCatalogState {\n  products: Product[];\n  loading: boolean;\n  error: string | null;\n  selectedProductId: number | null;\n  searchTerm: string;\n  categoryFilter: string | null;\n}\n\n@Injectable()\nexport class ProductCatalogStore extends ComponentStore<ProductCatalogState> {\n  constructor() {\n    super({\n      products: [],\n      loading: false,\n      error: null,\n      selectedProductId: null,\n      searchTerm: '',\n      categoryFilter: null\n    });\n  }\n}\n```\n\nThis structure forms the foundation of our product catalog state management.\n\n## Effective State Management Techniques\n\nEfficient state management is key to a performant Angular application. Let's add selectors to our store:\n\n```typescript\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class ProductCatalogStore extends ComponentStore<ProductCatalogState> {\n  // ... previous code\n\n  // Selectors\n  readonly products$: Observable<Product[]> = this.select(state => state.products);\n  readonly loading$: Observable<boolean> = this.select(state => state.loading);\n  readonly error$: Observable<string | null> = this.select(state => state.error);\n  readonly selectedProduct$: Observable<Product | undefined> = this.select(\n    state => state.products.find(product => product.id === state.selectedProductId)\n  );\n  readonly filteredProducts$: Observable<Product[]> = this.select(\n    this.products$,\n    state => state.searchTerm,\n    state => state.categoryFilter,\n    (products, searchTerm, categoryFilter) => {\n      return products\n        .filter(product => product.name.toLowerCase().includes(searchTerm.toLowerCase()))\n        .filter(product => !categoryFilter || product.category === categoryFilter);\n    }\n  );\n}\n```\n\nThese selectors provide a clean way to access and derive state in your components.\n\n## Implementing CRUD Operations\n\nCRUD (Create, Read, Update, Delete) operations are essential for any e-commerce platform. Let's implement these using updaters:\n\n```typescript\n@Injectable()\nexport class ProductCatalogStore extends ComponentStore<ProductCatalogState> {\n  // ... previous code\n\n  // Updaters\n  readonly setProducts = this.updater((state, products: Product[]) => ({\n    ...state,\n    products\n  }));\n\n  readonly addProduct = this.updater((state, product: Product) => ({\n    ...state,\n    products: [...state.products, product]\n  }));\n\n  readonly updateProduct = this.updater((state, updatedProduct: Product) => ({\n    ...state,\n    products: state.products.map(product =>\n      product.id === updatedProduct.id ? updatedProduct : product\n    )\n  }));\n\n  readonly removeProduct = this.updater((state, productId: number) => ({\n    ...state,\n    products: state.products.filter(product => product.id !== productId)\n  }));\n}\n```\n\nThese updaters provide a predictable way to modify the state of our product catalog.\n\n## Optimizing Performance with Selectors\n\nSelectors play a crucial role in optimizing the performance of your Angular application. They help in deriving complex state and preventing unnecessary re-renders:\n\n```typescript\nimport { map } from 'rxjs/operators';\n\n@Injectable()\nexport class ProductCatalogStore extends ComponentStore<ProductCatalogState> {\n  // ... previous code\n\n  readonly productsByCategory$ = this.select(\n    this.products$,\n    (products) => {\n      const categorizedProducts: { [key: string]: Product[] } = {};\n      products.forEach(product => {\n        if (!categorizedProducts[product.category]) {\n          categorizedProducts[product.category] = [];\n        }\n        categorizedProducts[product.category].push(product);\n      });\n      return categorizedProducts;\n    }\n  );\n\n  readonly totalValue$ = this.select(\n    this.products$,\n    (products) => products.reduce((total, product) => total + product.price, 0)\n  );\n}\n```\n\nThese advanced selectors demonstrate how to derive complex state efficiently.\n\n## Handling Asynchronous Operations\n\nIn real-world applications, asynchronous operations like API calls are common. Let's implement effects to handle these:\n\n```typescript\nimport { Injectable } from '@angular/core';\nimport { ComponentStore } from '@ngrx/component-store';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, catchError, switchMap, tap } from 'rxjs';\n\n@Injectable()\nexport class ProductCatalogStore extends ComponentStore<ProductCatalogState> {\n  constructor(private http: HttpClient) {\n    super({\n      products: [],\n      loading: false,\n      error: null,\n      selectedProductId: null,\n      searchTerm: '',\n      categoryFilter: null\n    });\n  }\n\n  // ... previous code\n\n  // Effects\n  readonly loadProducts = this.effect((trigger$: Observable<void>) => {\n    return trigger$.pipe(\n      tap(() => this.setLoading(true)),\n      switchMap(() => this.http.get<Product[]>('https://api.example.com/products').pipe(\n        tap({\n          next: (products) => {\n            this.setProducts(products);\n            this.setLoading(false);\n          },\n          error: (error) => {\n            this.setError('Failed to load products. Please try again later.');\n            this.setLoading(false);\n          }\n        }),\n        catchError(() => []) // Return empty array on error\n      ))\n    );\n  });\n}\n```\n\nThis effect demonstrates how to handle API calls and manage loading states effectively.\n\n## Advanced Features: Search and Filtering\n\nImplementing search and filtering enhances user experience in an e-commerce application:\n\n```typescript\n@Injectable()\nexport class ProductCatalogStore extends ComponentStore<ProductCatalogState> {\n  // ... previous code\n\n  readonly search = this.effect((searchTerm$: Observable<string>) => {\n    return searchTerm$.pipe(\n      tap((searchTerm) => this.setSearchTerm(searchTerm)),\n      switchMap((searchTerm) =>\n        this.http.get<Product[]>(`https://api.example.com/products?search=${searchTerm}`).pipe(\n          tap({\n            next: (products) => this.setProducts(products),\n            error: (error) => this.setError('Failed to search products. Please try again.')\n          })\n        )\n      )\n    );\n  });\n\n  readonly filterByCategory = this.effect((category$: Observable<string | null>) => {\n    return category$.pipe(\n      tap((category) => this.setCategoryFilter(category)),\n      switchMap((category) =>\n        this.http.get<Product[]>(`https://api.example.com/products${category ? `?category=${category}` : ''}`).pipe(\n          tap({\n            next: (products) => this.setProducts(products),\n            error: (error) => this.setError('Failed to filter products. Please try again.')\n          })\n        )\n      )\n    );\n  });\n}\n```\n\nThese effects demonstrate how to implement search and filtering functionality using NgRx Component Store.\n\n## Best Practices for NgRx Component Store\n\nTo get the most out of NgRx Component Store, follow these best practices:\n\n1. **Minimize State**: Keep your state as lean as possible. Derive complex state using selectors.\n2. **Use Updaters for Synchronous Operations**: Prefer updaters for simple, synchronous state changes.\n3. **Leverage Effects for Asynchronous Operations**: Use effects to handle side effects and asynchronous operations like API calls.\n4. **Optimize Selectors**: Use the `distinctUntilChanged` operator on your selectors to prevent unnecessary re-renders.\n5. **Handle Errors Gracefully**: Always include error handling in your effects and provide meaningful error messages to users.\n6. **Test Your Store**: Write unit tests for your selectors, updaters, and effects to ensure they work as expected.\n\n## Conclusion\n\nNgRx Component Store offers a powerful and flexible approach to state management in Angular applications. By following the techniques and best practices outlined in this guide, you can build efficient, scalable, and maintainable e-commerce applications. Remember to keep your state focused, leverage RxJS operators for complex operations, and always prioritize performance and user experience.\n\nAs you continue to explore NgRx Component Store, you'll discover even more ways to optimize your Angular applications. \n\nHappy coding","closed_by":{"login":"Pasquale-Favella","id":62385965,"node_id":"MDQ6VXNlcjYyMzg1OTY1","avatar_url":"https://avatars.githubusercontent.com/u/62385965?v=4","gravatar_id":"","url":"https://api.github.com/users/Pasquale-Favella","html_url":"https://github.com/Pasquale-Favella","followers_url":"https://api.github.com/users/Pasquale-Favella/followers","following_url":"https://api.github.com/users/Pasquale-Favella/following{/other_user}","gists_url":"https://api.github.com/users/Pasquale-Favella/gists{/gist_id}","starred_url":"https://api.github.com/users/Pasquale-Favella/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Pasquale-Favella/subscriptions","organizations_url":"https://api.github.com/users/Pasquale-Favella/orgs","repos_url":"https://api.github.com/users/Pasquale-Favella/repos","events_url":"https://api.github.com/users/Pasquale-Favella/events{/privacy}","received_events_url":"https://api.github.com/users/Pasquale-Favella/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/24/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/24/timeline","performed_via_github_app":null,"state_reason":"completed"},{"url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/23","repository_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io","labels_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/23/labels{/name}","comments_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/23/comments","events_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/23/events","html_url":"https://github.com/Pasquale-Favella/pasquale-favella.github.io/issues/23","id":2581663460,"node_id":"I_kwDOIwHgl86Z4Q7k","number":23,"title":"Leveraging @Aspect in Spring Boot: Enhancing Application Architecture","user":{"login":"Pasquale-Favella","id":62385965,"node_id":"MDQ6VXNlcjYyMzg1OTY1","avatar_url":"https://avatars.githubusercontent.com/u/62385965?v=4","gravatar_id":"","url":"https://api.github.com/users/Pasquale-Favella","html_url":"https://github.com/Pasquale-Favella","followers_url":"https://api.github.com/users/Pasquale-Favella/followers","following_url":"https://api.github.com/users/Pasquale-Favella/following{/other_user}","gists_url":"https://api.github.com/users/Pasquale-Favella/gists{/gist_id}","starred_url":"https://api.github.com/users/Pasquale-Favella/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Pasquale-Favella/subscriptions","organizations_url":"https://api.github.com/users/Pasquale-Favella/orgs","repos_url":"https://api.github.com/users/Pasquale-Favella/repos","events_url":"https://api.github.com/users/Pasquale-Favella/events{/privacy}","received_events_url":"https://api.github.com/users/Pasquale-Favella/received_events","type":"User","site_admin":false},"labels":[{"id":4991782391,"node_id":"LA_kwDOIwHgl88AAAABKYiN9w","url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/labels/documentation","name":"documentation","color":"0075ca","default":true,"description":"Improvements or additions to documentation"},{"id":5176884231,"node_id":"LA_kwDOIwHgl88AAAABNJD8Bw","url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/labels/Java","name":"Java","color":"57627E","default":false,"description":""},{"id":5176887291,"node_id":"LA_kwDOIwHgl88AAAABNJEH-w","url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/labels/Spring%20Boot","name":"Spring Boot","color":"10AE3D","default":false,"description":""}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2024-10-11T15:34:01Z","updated_at":"2024-10-11T15:34:24Z","closed_at":"2024-10-11T15:34:24Z","author_association":"OWNER","active_lock_reason":null,"body":"In the ever-evolving landscape of Java development, optimizing application architecture is crucial for maintaining efficient, scalable, and maintainable codebases. One powerful feature that has gained significant traction in the Spring Boot ecosystem is the `@Aspect` annotation. This article explores how `@Aspect` can revolutionize your application's structure, leading to improved performance and code organization.\r\n\r\n## Understanding @Aspect in Spring Boot\r\n\r\n`@Aspect` is a key component of Aspect-Oriented Programming (AOP) in Spring Boot. AOP is a programming paradigm that allows developers to separate cross-cutting concerns from the main business logic of an application. This separation results in cleaner, more modular code that is easier to maintain and extend.\r\n\r\n## Key Benefits of Using @Aspect\r\n\r\n1. **Improved Code Organization**: By separating cross-cutting concerns, developers can focus on core business logic, resulting in cleaner and more maintainable code.\r\n\r\n2. **Enhanced Performance**: `@Aspect` allows for efficient handling of repetitive tasks, such as logging and security checks, without cluttering the main codebase.\r\n\r\n3. **Increased Productivity**: Developers can reuse aspect code across multiple parts of the application, reducing development time and increasing overall productivity.\r\n\r\n4. **Better Resource Management**: Aspects can be used to optimize resource allocation and management, leading to improved application performance.\r\n\r\n5. **Simplified Debugging and Monitoring**: Centralized handling of cross-cutting concerns makes it easier to debug issues and monitor application performance.\r\n\r\n## Practical Applications with Code Examples\r\n\r\n### 1. Logging and Auditing\r\n\r\nImplementing comprehensive logging and auditing systems is crucial for maintaining security and compliance. With `@Aspect`, you can automatically log method entries and exits, track actions, and monitor performance metrics without modifying existing code.\r\n\r\nExample of a logging aspect:\r\n\r\n```java\r\nimport org.aspectj.lang.ProceedingJoinPoint;\r\nimport org.aspectj.lang.annotation.Around;\r\nimport org.aspectj.lang.annotation.Aspect;\r\nimport org.springframework.stereotype.Component;\r\n\r\n@Aspect\r\n@Component\r\npublic class LoggingAspect {\r\n\r\n    @Around(\"execution(* com.yourcompany.*.service.*.*(..))\")\r\n    public Object logMethodExecution(ProceedingJoinPoint joinPoint) throws Throwable {\r\n        String methodName = joinPoint.getSignature().getName();\r\n        logger.info(\"Entering method: {}\", methodName);\r\n        \r\n        long startTime = System.currentTimeMillis();\r\n        Object result = joinPoint.proceed();\r\n        long executionTime = System.currentTimeMillis() - startTime;\r\n        \r\n        logger.info(\"Exiting method: {}. Execution time: {}ms\", methodName, executionTime);\r\n        return result;\r\n    }\r\n}\r\n```\r\n\r\nThis aspect will automatically log the entry and exit of all methods in your service layer, along with their execution time.\r\n\r\n### 2. Security and Authentication\r\n\r\nEnhancing application security is a top priority for any organization. `@Aspect` can be used to implement method-level security checks and validate user permissions before executing sensitive operations.\r\n\r\nExample of a security aspect:\r\n\r\n```java\r\nimport org.aspectj.lang.ProceedingJoinPoint;\r\nimport org.aspectj.lang.annotation.Around;\r\nimport org.aspectj.lang.annotation.Aspect;\r\nimport org.springframework.stereotype.Component;\r\n\r\n@Aspect\r\n@Component\r\npublic class SecurityAspect {\r\n\r\n    @Around(\"@annotation(com.yourcompany.security.RequiresAdmin)\")\r\n    public Object checkAdminAccess(ProceedingJoinPoint joinPoint) throws Throwable {\r\n        if (securityService.currentUserIsAdmin()) {\r\n            return joinPoint.proceed();\r\n        } else {\r\n            throw new AccessDeniedException(\"Admin access required for this operation\");\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nThis aspect intercepts methods annotated with `@RequiresAdmin` and checks if the current user has admin privileges before allowing the method to execute.\r\n\r\n### 3. Transaction Management\r\n\r\nEnsuring data integrity in complex business operations is critical. `@Aspect` simplifies transaction management by automatically starting, committing, or rolling back transactions.\r\n\r\nExample of a transaction management aspect:\r\n\r\n```java\r\nimport org.aspectj.lang.ProceedingJoinPoint;\r\nimport org.aspectj.lang.annotation.Around;\r\nimport org.aspectj.lang.annotation.Aspect;\r\nimport org.springframework.stereotype.Component;\r\nimport org.springframework.transaction.TransactionStatus;\r\nimport org.springframework.transaction.support.TransactionTemplate;\r\n\r\n@Aspect\r\n@Component\r\npublic class TransactionAspect {\r\n\r\n    private final TransactionTemplate transactionTemplate;\r\n\r\n    public TransactionAspect(TransactionTemplate transactionTemplate) {\r\n        this.transactionTemplate = transactionTemplate;\r\n    }\r\n\r\n    @Around(\"@annotation(com.yourcompany.transaction.Transactional)\")\r\n    public Object manageTransaction(ProceedingJoinPoint joinPoint) throws Throwable {\r\n        return transactionTemplate.execute((TransactionStatus status) -> {\r\n            try {\r\n                return joinPoint.proceed();\r\n            } catch (Throwable throwable) {\r\n                status.setRollbackOnly();\r\n                throw new RuntimeException(\"Transaction failed, rolling back\", throwable);\r\n            }\r\n        });\r\n    }\r\n}\r\n```\r\n\r\nThis aspect manages transactions for methods annotated with `@Transactional`, automatically committing successful operations and rolling back in case of exceptions.\r\n\r\n### 4. Caching\r\n\r\nOptimizing application performance often involves effective caching strategies. With `@Aspect`, you can implement method-level caching without modifying existing code.\r\n\r\nExample of a caching aspect:\r\n\r\n```java\r\nimport org.aspectj.lang.ProceedingJoinPoint;\r\nimport org.aspectj.lang.annotation.Around;\r\nimport org.aspectj.lang.annotation.Aspect;\r\nimport org.springframework.stereotype.Component;\r\nimport java.util.concurrent.ConcurrentHashMap;\r\n\r\n@Aspect\r\n@Component\r\npublic class CachingAspect {\r\n\r\n    private final ConcurrentHashMap<String, Object> cache = new ConcurrentHashMap<>();\r\n\r\n    @Around(\"@annotation(com.yourcompany.cache.Cacheable)\")\r\n    public Object cacheMethod(ProceedingJoinPoint joinPoint) throws Throwable {\r\n        String cacheKey = generateCacheKey(joinPoint);\r\n        \r\n        if (cache.containsKey(cacheKey)) {\r\n            return cache.get(cacheKey);\r\n        }\r\n        \r\n        Object result = joinPoint.proceed();\r\n        cache.put(cacheKey, result);\r\n        return result;\r\n    }\r\n\r\n    private String generateCacheKey(ProceedingJoinPoint joinPoint) {\r\n        // Implementation to generate a unique cache key based on method and parameters\r\n        return joinPoint.getSignature().toString();\r\n    }\r\n}\r\n```\r\n\r\nThis aspect implements a simple caching mechanism for methods annotated with `@Cacheable`, storing and retrieving results based on method signatures.\r\n\r\n## Implementation Strategy\r\n\r\nTo successfully leverage `@Aspect` in your Spring Boot applications, consider the following strategy:\r\n\r\n1. **Identify Cross-Cutting Concerns**: Work with your development team to identify common functionalities that span multiple parts of your application.\r\n\r\n2. **Design Aspect Architecture**: Create a clear architecture for implementing aspects, ensuring they are modular and reusable.\r\n\r\n3. **Implement Gradually**: Start by implementing aspects for non-critical functionalities, gradually expanding to more complex use cases.\r\n\r\n4. **Monitor and Optimize**: Regularly review the performance impact of implemented aspects and optimize as necessary.\r\n\r\n5. **Educate and Train**: Invest in training your development team to ensure they can effectively leverage `@Aspect` in their daily work.\r\n\r\n## Conclusion\r\n\r\nIncorporating `@Aspect` into your Spring Boot applications can significantly enhance your software development practices. By enabling cleaner code, improved performance, and increased developer productivity, `@Aspect` provides a powerful tool for modern Java applications.\r\n\r\nAs you explore the possibilities of Aspect-Oriented Programming in Spring Boot, remember that the key to successful implementation lies in careful planning, gradual adoption, and ongoing optimization. With the right approach, `@Aspect` can be a game-changer for your application's architecture and overall performance.\r\n\r\nHappy coding!","closed_by":{"login":"Pasquale-Favella","id":62385965,"node_id":"MDQ6VXNlcjYyMzg1OTY1","avatar_url":"https://avatars.githubusercontent.com/u/62385965?v=4","gravatar_id":"","url":"https://api.github.com/users/Pasquale-Favella","html_url":"https://github.com/Pasquale-Favella","followers_url":"https://api.github.com/users/Pasquale-Favella/followers","following_url":"https://api.github.com/users/Pasquale-Favella/following{/other_user}","gists_url":"https://api.github.com/users/Pasquale-Favella/gists{/gist_id}","starred_url":"https://api.github.com/users/Pasquale-Favella/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Pasquale-Favella/subscriptions","organizations_url":"https://api.github.com/users/Pasquale-Favella/orgs","repos_url":"https://api.github.com/users/Pasquale-Favella/repos","events_url":"https://api.github.com/users/Pasquale-Favella/events{/privacy}","received_events_url":"https://api.github.com/users/Pasquale-Favella/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/23/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/23/timeline","performed_via_github_app":null,"state_reason":"completed"},{"url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/22","repository_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io","labels_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/22/labels{/name}","comments_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/22/comments","events_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/22/events","html_url":"https://github.com/Pasquale-Favella/pasquale-favella.github.io/issues/22","id":2581642697,"node_id":"I_kwDOIwHgl86Z4L3J","number":22,"title":"Functional Programming in Java: A Comprehensive Guide","user":{"login":"Pasquale-Favella","id":62385965,"node_id":"MDQ6VXNlcjYyMzg1OTY1","avatar_url":"https://avatars.githubusercontent.com/u/62385965?v=4","gravatar_id":"","url":"https://api.github.com/users/Pasquale-Favella","html_url":"https://github.com/Pasquale-Favella","followers_url":"https://api.github.com/users/Pasquale-Favella/followers","following_url":"https://api.github.com/users/Pasquale-Favella/following{/other_user}","gists_url":"https://api.github.com/users/Pasquale-Favella/gists{/gist_id}","starred_url":"https://api.github.com/users/Pasquale-Favella/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Pasquale-Favella/subscriptions","organizations_url":"https://api.github.com/users/Pasquale-Favella/orgs","repos_url":"https://api.github.com/users/Pasquale-Favella/repos","events_url":"https://api.github.com/users/Pasquale-Favella/events{/privacy}","received_events_url":"https://api.github.com/users/Pasquale-Favella/received_events","type":"User","site_admin":false},"labels":[{"id":4991782391,"node_id":"LA_kwDOIwHgl88AAAABKYiN9w","url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/labels/documentation","name":"documentation","color":"0075ca","default":true,"description":"Improvements or additions to documentation"},{"id":5176884231,"node_id":"LA_kwDOIwHgl88AAAABNJD8Bw","url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/labels/Java","name":"Java","color":"57627E","default":false,"description":""}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2024-10-11T15:24:53Z","updated_at":"2024-10-11T15:25:30Z","closed_at":"2024-10-11T15:25:30Z","author_association":"OWNER","active_lock_reason":null,"body":"Functional programming (FP) has become a core paradigm in modern software development, and with **Java 8**, the language adopted several functional constructs, such as **lambda expressions**, **streams**, and the **Optional** class. Although Java is primarily object-oriented, these new additions enable developers to write more declarative and concise code, enhancing productivity, readability, and maintainability.\r\n\r\nIn this guide, we will cover the basics of **functional programming in Java**, explore key concepts such as lambda expressions, method references, and the Stream API, and examine the advantages and potential pitfalls of functional programming. By the end, you will have a solid understanding of how to use functional programming constructs in Java to write more efficient and expressive code.\r\n\r\n## What is Functional Programming?\r\n\r\n**Functional programming** is a programming paradigm that treats computation as the evaluation of mathematical functions and avoids changing state and mutable data. In functional programming, **functions are first-class citizens**, meaning they can be passed around as arguments, returned from other functions, and stored in variables—just like any other object.\r\n\r\n### Key Characteristics of Functional Programming:\r\n- **First-class functions**: Functions are treated as values.\r\n- **Immutability**: Data is immutable, meaning once created, its state cannot change.\r\n- **Pure functions**: Functions do not have side effects, meaning they don’t alter any external state or data.\r\n- **Declarative approach**: Focuses on **what** to do rather than **how** to do it.\r\n- **Higher-order functions**: Functions can accept other functions as parameters or return them.\r\n\r\nWhile **Java** is not a purely functional language like **Haskell** or **Scala**, it adopts many functional programming principles, making Java more flexible and powerful.\r\n\r\n## Functional Programming Constructs in Java\r\n\r\n### 1. Lambda Expressions\r\n\r\nThe introduction of **lambda expressions** in Java 8 was a game changer for simplifying the verbosity of anonymous classes and enabling functional programming. A **lambda expression** is essentially an anonymous function—short snippets of code that can be passed as arguments or stored in variables.\r\n\r\nA typical lambda expression looks like this:\r\n\r\n```java\r\n(parameters) -> expression\r\n```\r\nHere’s an example of using a lambda expression to create a **Comparator** for sorting:\r\n\r\n```java\r\nList<String> names = Arrays.asList(\"Alice\", \"Bob\", \"Charlie\");\r\nCollections.sort(names, (s1, s2) -> s1.compareTo(s2));\r\n```\r\nIn this case, `(s1, s2) -> s1.compareTo(s2)` is a lambda expression representing a `Comparator`.\r\n\r\n#### Advantages of Lambda Expressions:\r\n- **Concise code**: Reduces boilerplate code and makes the code more readable.\r\n- **Declarative programming**: Focuses on what the function does rather than how it is implemented.\r\n\r\n### 2. Method References\r\n\r\n**Method references** are shorthand for lambda expressions that call an existing method. Java provides several types of method references:\r\n- **Static method reference**: `ClassName::staticMethod`\r\n- **Instance method reference**: `instance::method`\r\n- **Constructor reference**: `ClassName::new`\r\n\r\nHere’s an example using a method reference instead of a lambda expression:\r\n\r\n```java\r\nList<String> names = Arrays.asList(\"Alice\", \"Bob\", \"Charlie\");\r\nnames.forEach(System.out::println);\r\n```\r\nIn this case, `System.out::println` is a method reference pointing to the `println` method of `System.out`.\r\n\r\n### 3. Functional Interfaces\r\n\r\nA **functional interface** is an interface with a single abstract method but can have multiple default or static methods. Functional interfaces are used as the target types for lambda expressions and method references.\r\n\r\nJava provides several built-in functional interfaces in the `java.util.function` package, such as:\r\n- **Predicate<T>**: Takes one argument and returns a boolean.\r\n- **Function<T, R>**: Takes one argument and returns a result.\r\n- **Supplier<T>**: Returns a result and takes no arguments.\r\n- **Consumer<T>**: Takes one argument and performs an action without returning any result.\r\n\r\nExample of `Predicate` functional interface:\r\n\r\n```java\r\nPredicate<Integer> isEven = x -> x % 2 == 0;\r\nSystem.out.println(isEven.test(4));  // true\r\n```\r\n### 4. The Stream API\r\n\r\nThe **Stream API** is one of the most powerful features introduced in Java 8, enabling functional-style operations on sequences of elements, such as collections, arrays, or input sources. Streams allow you to express complex data processing queries in a declarative way.\r\n\r\nStreams support both **intermediate** operations, which are lazy and return a new stream (like `filter`, `map`, `sorted`), and **terminal** operations, which are eager and produce a result or a side-effect (like `forEach`, `collect`, `reduce`).\r\n\r\nHere’s an example of filtering and transforming a list using the Stream API:\r\n\r\n```java\r\nList<String> names = Arrays.asList(\"Alice\", \"Bob\", \"Charlie\", \"David\");\r\nList<String> filteredNames = names.stream()\r\n    .filter(name -> name.startsWith(\"A\"))\r\n    .map(String::toUpperCase)\r\n    .collect(Collectors.toList());\r\n\r\nSystem.out.println(filteredNames);  // [ALICE]\r\n```\r\nThis code snippet demonstrates the power of streams to compose multiple operations in a clean, declarative manner.\r\n\r\n### 5. Optional Class\r\n\r\nThe **Optional** class provides a way to handle null values more gracefully by encapsulating optional values and avoiding `NullPointerException`. Instead of using `null` to indicate the absence of a value, you can use `Optional` to explicitly state whether a value is present.\r\n\r\nExample of using `Optional`:\r\n\r\n```java\r\nOptional<String> name = Optional.ofNullable(\"John\");\r\nname.ifPresent(System.out::println);  // John\r\n\r\nOptional<String> emptyName = Optional.ofNullable(null);\r\nSystem.out.println(emptyName.orElse(\"Unknown\"));  // Unknown\r\n```\r\nThe `Optional` class makes the code more readable and less prone to errors when dealing with potentially missing values.\r\n\r\n## Benefits of Functional Programming in Java\r\n\r\n1. **More Readable Code**: With lambda expressions and the Stream API, Java code can become much more declarative, making it easier to read and understand at a glance.\r\n   \r\n2. **Less Boilerplate**: Functional programming in Java reduces the verbosity typical of object-oriented programming by eliminating the need for anonymous classes, especially when dealing with simple tasks like sorting or filtering collections.\r\n\r\n3. **Encourages Immutability**: Functional programming promotes immutability, which can lead to fewer bugs, especially in concurrent applications. Immutable objects are inherently thread-safe, avoiding issues related to shared state.\r\n\r\n4. **Modular and Testable**: Pure functions are isolated from the outside world, which makes them easier to test and reuse. They rely only on their input and always produce the same output for the same input.\r\n\r\n## Potential Pitfalls of Functional Programming in Java\r\n\r\n1. **Learning Curve**: For developers unfamiliar with functional programming concepts, it may take time to adjust to writing and understanding lambda expressions, method references, and higher-order functions.\r\n\r\n2. **Performance Considerations**: While functional-style code can be more expressive, it can also introduce performance overhead, especially when using streams and lambda expressions in scenarios where performance is critical. Lazy evaluation in streams can mitigate some of this, but it’s essential to profile and optimize if necessary.\r\n\r\n3. **Overuse of `Optional`**: Although `Optional` helps to avoid null checks, overuse or inappropriate use (e.g., returning `Optional` in collections) can lead to performance issues and complicate the code.\r\n\r\n## Best Practices for Functional Programming in Java\r\n\r\n1. **Use Streams for Collection Processing**: Whenever you’re working with collections, consider using streams to filter, map, and reduce data rather than using traditional loops.\r\n\r\n2. **Leverage Method References**: Use method references where possible to make your code cleaner and more readable.\r\n\r\n3. **Use `Optional` Wisely**: Use `Optional` to represent optional return values but avoid overusing it in places like fields, method parameters, or collections.\r\n\r\n4. **Keep Functions Pure**: Whenever possible, write pure functions to avoid unintended side effects. This makes your code easier to reason about and test.\r\n\r\n## Conclusion\r\n\r\nFunctional programming has transformed the way developers write Java code. With the addition of lambda expressions, the Stream API, and the `Optional` class, Java has become much more expressive and powerful. While functional programming may initially seem foreign to Java developers who are used to object-oriented paradigms, embracing these new constructs can lead to more concise, maintainable, and testable code.\r\n\r\nBy understanding and applying functional programming principles in Java, you can write more efficient and elegant solutions to complex problems. However, as with any paradigm, it’s important to strike a balance between functional and object-oriented styles to avoid overcomplicating your code.\r\n\r\nHappy coding!\r\n\r\n\r\n","closed_by":{"login":"Pasquale-Favella","id":62385965,"node_id":"MDQ6VXNlcjYyMzg1OTY1","avatar_url":"https://avatars.githubusercontent.com/u/62385965?v=4","gravatar_id":"","url":"https://api.github.com/users/Pasquale-Favella","html_url":"https://github.com/Pasquale-Favella","followers_url":"https://api.github.com/users/Pasquale-Favella/followers","following_url":"https://api.github.com/users/Pasquale-Favella/following{/other_user}","gists_url":"https://api.github.com/users/Pasquale-Favella/gists{/gist_id}","starred_url":"https://api.github.com/users/Pasquale-Favella/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Pasquale-Favella/subscriptions","organizations_url":"https://api.github.com/users/Pasquale-Favella/orgs","repos_url":"https://api.github.com/users/Pasquale-Favella/repos","events_url":"https://api.github.com/users/Pasquale-Favella/events{/privacy}","received_events_url":"https://api.github.com/users/Pasquale-Favella/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/22/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/22/timeline","performed_via_github_app":null,"state_reason":"completed"},{"url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/21","repository_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io","labels_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/21/labels{/name}","comments_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/21/comments","events_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/21/events","html_url":"https://github.com/Pasquale-Favella/pasquale-favella.github.io/issues/21","id":2509823097,"node_id":"I_kwDOIwHgl86VmNx5","number":21,"title":"How to Prevent Angular Issues with API Contract Changes Using Zod","user":{"login":"Pasquale-Favella","id":62385965,"node_id":"MDQ6VXNlcjYyMzg1OTY1","avatar_url":"https://avatars.githubusercontent.com/u/62385965?v=4","gravatar_id":"","url":"https://api.github.com/users/Pasquale-Favella","html_url":"https://github.com/Pasquale-Favella","followers_url":"https://api.github.com/users/Pasquale-Favella/followers","following_url":"https://api.github.com/users/Pasquale-Favella/following{/other_user}","gists_url":"https://api.github.com/users/Pasquale-Favella/gists{/gist_id}","starred_url":"https://api.github.com/users/Pasquale-Favella/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Pasquale-Favella/subscriptions","organizations_url":"https://api.github.com/users/Pasquale-Favella/orgs","repos_url":"https://api.github.com/users/Pasquale-Favella/repos","events_url":"https://api.github.com/users/Pasquale-Favella/events{/privacy}","received_events_url":"https://api.github.com/users/Pasquale-Favella/received_events","type":"User","site_admin":false},"labels":[{"id":4991782391,"node_id":"LA_kwDOIwHgl88AAAABKYiN9w","url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/labels/documentation","name":"documentation","color":"0075ca","default":true,"description":"Improvements or additions to documentation"},{"id":5011828087,"node_id":"LA_kwDOIwHgl88AAAABKrptdw","url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/labels/Angular","name":"Angular","color":"F85A56","default":false,"description":""}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2024-09-06T08:21:30Z","updated_at":"2024-09-06T08:28:18Z","closed_at":"2024-09-06T08:28:18Z","author_association":"OWNER","active_lock_reason":null,"body":"As a front-end developer, one common problem you may face is ensuring your application doesn't break when the API contract changes. Whether you're working with API responses, external data, or handling backend integration, it’s critical to have a solution that validates the data your front-end consumes. In this article, we’ll explore how using `Zod`, a popular data validation library, can help prevent front-end issues due to `API contract changes`.\r\n\r\n## Common Problem: Front-End Breaks Due to API Contract Changes\r\n\r\nImagine you’re developing a feature for your project, and you agree on an `API contract` with the back-end team. You write your code, implement the feature, and even cover multiple test scenarios. Everything works perfectly. However, some time later, the feature stops working.\r\n\r\nUpon investigation, you find that the `front-end code` is fine, and all your tests are passing. The issue? The `API response` has changed, and the `API contract` you initially agreed upon is no longer valid. As a result, the feature breaks, and these changes propagate through your entire application.\r\n\r\nThis is a common issue that many developers face when working with `API integrations`. The key question is: how can you prevent your application from breaking due to unexpected changes in external data?\r\n\r\n## Solution: Using Zod for Data Validation\r\n\r\nOne of the best ways to prevent front-end issues caused by API changes is by validating the external data before using it in your application. This is where `Zod`, a lightweight and flexible data validation library, comes into play. [Zod](https://zod.dev/) allows you to define `schemas` for your data and validate it at runtime, ensuring that any incoming data adheres to the expected structure.\r\n\r\nLet’s dive into how you can use Zod to solve this issue.\r\n\r\n## Step-by-Step Guide: How to Use Zod for Data Validation\r\n\r\nZod supports various types of data validation. Let’s start with something simple: validating string data.\r\n\r\n```javascript\r\nimport { z } from 'zod';\r\n\r\nconst StringSchema = z.string();\r\nconst EmailSchema = z.string().email();\r\nconst LengthSchema = z.string().min(3).max(15);\r\n```\r\nIn the above example, we are defining schemas that validate the data type. Zod doesn’t just check if the value is a string but also ensures that the string matches certain conditions—such as validating an email format or checking if the string has a specific length.\r\n\r\nHere’s how you can validate data with Zod:\r\n\r\n```javascript\r\nStringSchema.parse(456); // Throws an error because 456 is not a string\r\nStringSchema.parse('hello'); // Passes validation because 'hello' is a string\r\n\r\nconst result = EmailSchema.safeParse('not-an-email'); \r\n// Returns { success: false, error: {...} }\r\n```\r\nYou can also customize the error messages to be more informative:\r\n\r\n```javascript\r\nconst CustomStringSchema = z.string().refine(val => val === 'expected', {\r\n  message: 'This is not the expected value!',\r\n});\r\n```\r\n## Using Zod to Validate API Responses\r\n\r\nLet’s apply Zod to a more complex scenario: `validating API responses`. Imagine you’re working with an API that returns the following structure:\r\n\r\n```typescript\r\ninterface ApiResponse {\r\n  id: number;\r\n  name: string;\r\n  items: Item[];\r\n}\r\n\r\ninterface Item {\r\n  productId: string;\r\n  quantity: number;\r\n}\r\n```\r\nIn a typical `Angular` application, you might fetch this data using the `HttpClient` service like this:\r\n\r\n```typescript\r\n@Injectable({ providedIn: 'root' })\r\nexport class ApiService {\r\n  private readonly http = inject(HttpClient);\r\n\r\n  fetchData(): Observable<ApiResponse> {\r\n    return this.http.get<ApiResponse>('/api/data');\r\n  }\r\n}\r\n```\r\nUsing `Zod`, you can define a schema that mirrors this structure and validates the API response:\r\n\r\n```typescript\r\nimport { z } from 'zod';\r\n\r\nconst ApiResponseSchema = z.object({\r\n  id: z.number(),\r\n  name: z.string(),\r\n  items: z.array(\r\n    z.object({\r\n      productId: z.string(),\r\n      quantity: z.number(),\r\n    })\r\n  ),\r\n});\r\n\r\ntype ApiResponse = z.infer<typeof ApiResponseSchema>;\r\n```\r\nHere’s how you can integrate this `schema` into your service to ensure the data is valid:\r\n\r\n```typescript\r\n@Injectable({ providedIn: 'root' })\r\nexport class ZodApiService {\r\n  private readonly http = inject(HttpClient);\r\n\r\n  fetchData(): Observable<ApiResponse> {\r\n    return this.http.get('/api/data').pipe(\r\n      map((response) => ApiResponseSchema.parse(response)) // Validates the response\r\n    );\r\n  }\r\n}\r\n```\r\nNow, if the API changes unexpectedly—say the backend sends `itemId` instead of `productId`—Zod will throw an error, allowing you to catch the issue immediately. This proactive validation helps prevent bugs caused by inconsistent data structures.\r\n\r\n## Advanced Usage: Creating Custom RxJs Operators for Validation\r\n\r\nYou can simplify the process even further by creating a custom `RxJs operator` to validate data throughout your application:\r\n\r\n```typescript\r\nexport function validateWithZod<T extends z.ZodTypeAny>(schema: T) {\r\n  return map((response: unknown) => schema.parse(response));\r\n}\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ZodApiService {\r\n  private readonly http = inject(HttpClient);\r\n\r\n  fetchData(): Observable<ApiResponse> {\r\n    return this.http.get('/api/data').pipe(validateWithZod(ApiResponseSchema));\r\n  }\r\n}\r\n```\r\nNow, whenever the backend returns an invalid response, `Zod` will catch it and display a clear error message in your browser’s console.\r\n\r\nFor instance, if the backend sends the following response:\r\n```json\r\n{\r\n  \"id\": 101,\r\n  \"name\": \"Example\",\r\n  \"items\": [\r\n    { \"productId\": \"abc\", \"quantity\": 3 },\r\n    { \"productId\": \"def\", \"quantity\": 2 }\r\n  ]\r\n}\r\n```\r\nZod will validate the response. If the API structure is incorrect, Zod will notify you with an error message, making it clear where things went wrong.\r\n\r\n## Why Data Validation is Crucial for Front-End Developers\r\n\r\nIn modern `front-end development`, applications often rely on data fetched from external APIs. Since this data is external, it falls outside the scope of TypeScript’s type-checking. This means that when the API response structure changes, your front-end application is at risk of breaking—unless you validate the data.\r\n\r\nUsing a data validation library like Zod allows you to:\r\n- `Ensure data consistency` across your application\r\n- `Catch errors early`, before they propagate through the system\r\n- `Handle unexpected API changes` effectively\r\n- Provide `better error messages` for debugging\r\n\r\n## Conclusion\r\n\r\nTo sum up, `validating API responses` and other external data is a crucial step in ensuring your front-end application remains robust, even when external systems change. While you can generate types from the API, using a runtime validation tool like Zod provides an extra layer of protection. Zod not only helps you validate data but also allows you to catch and handle errors proactively, saving you time and preventing bugs in the long run.\r\n\r\nBy integrating Zod into your front-end development workflow, you can effectively mitigate the risks associated with changing API contracts and maintain a stable application.\r\n\r\nHappy coding!","closed_by":{"login":"Pasquale-Favella","id":62385965,"node_id":"MDQ6VXNlcjYyMzg1OTY1","avatar_url":"https://avatars.githubusercontent.com/u/62385965?v=4","gravatar_id":"","url":"https://api.github.com/users/Pasquale-Favella","html_url":"https://github.com/Pasquale-Favella","followers_url":"https://api.github.com/users/Pasquale-Favella/followers","following_url":"https://api.github.com/users/Pasquale-Favella/following{/other_user}","gists_url":"https://api.github.com/users/Pasquale-Favella/gists{/gist_id}","starred_url":"https://api.github.com/users/Pasquale-Favella/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Pasquale-Favella/subscriptions","organizations_url":"https://api.github.com/users/Pasquale-Favella/orgs","repos_url":"https://api.github.com/users/Pasquale-Favella/repos","events_url":"https://api.github.com/users/Pasquale-Favella/events{/privacy}","received_events_url":"https://api.github.com/users/Pasquale-Favella/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/21/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/21/timeline","performed_via_github_app":null,"state_reason":"completed"},{"url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/16","repository_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io","labels_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/16/labels{/name}","comments_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/16/comments","events_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/16/events","html_url":"https://github.com/Pasquale-Favella/pasquale-favella.github.io/issues/16","id":2070945385,"node_id":"I_kwDOIwHgl857cB5p","number":16,"title":"Angular Signals with RxJS - A practical example","user":{"login":"Pasquale-Favella","id":62385965,"node_id":"MDQ6VXNlcjYyMzg1OTY1","avatar_url":"https://avatars.githubusercontent.com/u/62385965?v=4","gravatar_id":"","url":"https://api.github.com/users/Pasquale-Favella","html_url":"https://github.com/Pasquale-Favella","followers_url":"https://api.github.com/users/Pasquale-Favella/followers","following_url":"https://api.github.com/users/Pasquale-Favella/following{/other_user}","gists_url":"https://api.github.com/users/Pasquale-Favella/gists{/gist_id}","starred_url":"https://api.github.com/users/Pasquale-Favella/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Pasquale-Favella/subscriptions","organizations_url":"https://api.github.com/users/Pasquale-Favella/orgs","repos_url":"https://api.github.com/users/Pasquale-Favella/repos","events_url":"https://api.github.com/users/Pasquale-Favella/events{/privacy}","received_events_url":"https://api.github.com/users/Pasquale-Favella/received_events","type":"User","site_admin":false},"labels":[{"id":4991782391,"node_id":"LA_kwDOIwHgl88AAAABKYiN9w","url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/labels/documentation","name":"documentation","color":"0075ca","default":true,"description":"Improvements or additions to documentation"},{"id":5011828087,"node_id":"LA_kwDOIwHgl88AAAABKrptdw","url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/labels/Angular","name":"Angular","color":"F85A56","default":false,"description":""},{"id":5012942463,"node_id":"LA_kwDOIwHgl88AAAABKstufw","url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/labels/Rxjs","name":"Rxjs","color":"f9d0c4","default":false,"description":""}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2024-01-08T17:44:37Z","updated_at":"2024-04-12T08:43:56Z","closed_at":"2024-04-12T08:43:56Z","author_association":"OWNER","active_lock_reason":null,"body":"This article will delve into the seamless fusion of Angular Signals and RxJS, highlighting how these two technologies can effortlessly blend together, showcasing that RxJS continues to shine brightly in their combined usage. The combination of these two technologies can lead to a more efficient and streamlined development process, allowing developers to create more complex applications with ease. By leveraging the power of Angular Signals and RxJS, developers can create reactive applications that are both scalable and maintainable.\r\n\r\n## Initial Setup\r\n```html\r\n <input type=\"text\" (keyup)=\"search($event)\" />\r\n```\r\n*just an input with a keyup event.*\r\n```typescript\r\n export class AppComponent {\r\n  http = inject(HttpClient);\r\n\r\n  search(event: Event) {\r\n    const value = (event.target as HTMLInputElement).value;\r\n  }\r\n}\r\n```\r\nInside our class has been injected `HttpClient` and created a search function which gets a value of the input but doesn't do anything else.\r\n\r\n## Implementing API call\r\n\r\nNow, the challenge lies in implementing the retrieval of data from the API both upon initialization and after entering text into the input. We aim to incorporate debouncing to prevent excessive API calls, ensuring that we don't overlook any submitted values already present.\r\n\r\n> This is exactly the case where RxJS shines in comparison to signals.\r\nWhat we are getting from signals is simply a state to read or update the value and computed which returns some value based on another signal. The last thing that we get from signals is effect which allows us to do something when our signal is changed.\r\n\r\nThis is not what we need for our case here. We have the case where RxJS can help us a lot.\r\n```typescript\r\nexport class AppComponent {\r\n  ...\r\n  searchSig = signal<string>('');\r\n\r\n  search(event: Event) {\r\n    const value = (event.target as HTMLInputElement).value;\r\n    this.searchSig.set(value);\r\n  }\r\n}\r\n```\r\nOur first step here is to create a `signal` which stores our search value. Now we can update this `signal` when we change the input with `set` function.\r\n\r\nBut it is not all. We want to make an API call every single time when we change our search. The main problem is that we can't write this code with signal effectively. Now we have a function in Angular which allows us to transform `signal` to the `observable`.\r\n```typescript\r\nimport { toObservable, toSignal } from '@angular/core/rxjs-interop';\r\n\r\nexport class AppComponent {\r\n  ...\r\n  searchSig = signal<string>('');\r\n  articles$ = toObservable(this.searchSig).pipe(\r\n    debounceTime(300),\r\n    distinctUntilChanged(),\r\n    switchMap((searchTerm) =>\r\n      this.http.get<Article[]>(\r\n        `http://localhost:8080/articles?title=${searchTerm}`\r\n      )\r\n    )\r\n  );\r\n}\r\n```\r\nIn this instance, we employed the `toObservable` function to convert our `signal` into an `observable`, enabling the application of `RxJS` functions. We incorporated `debounceTime` to prevent excessive API calls, `distinctUntilChanged` to avoid redundant API calls with identical data, and `switchMap` to execute an HTTP request\r\n>So this code just creates an observable from the signal.\r\n\r\nThis doesn't signal a return to our previous less efficient practices, such as relying on async pipes or subscriptions. We're determined to steer clear of reverting to the digest cycle and the inherent issues it brings.\r\n```typescript\r\nexport class AppComponent {\r\n  ...\r\n  articlesSig = toSignal(this.articles$);\r\n}\r\n```\r\nThis is why here we created one more property which is a `signal`. We used `toSignal` function to convert our RxJS `observable` to a signal. Now we can safely use it inside our markup is a normal signal.\r\n```html\r\n<div *ngFor=\"let article of articlesSig()\">\r\n  {{ article.title }}\r\n</div>\r\n```\r\n*or with the new built-in for loop.*\r\n```html\r\n@for (article of articlesSig(); track article.title) {\r\n  {{ article.title }}\r\n} \r\n```\r\nWe can see that our API call is done and we rendered a list of article. When we type something it refetches the data with the rules that we wrote in RxJS.\r\n\r\n## Conclusion\r\n\r\nthis article has explored the harmonious integration of Angular Signals and RxJS, demonstrating their synergistic collaboration. By showcasing the effective fusion of these two technologies, we've underscored the ongoing strength of RxJS within this combined usage.\r\n\r\nHappy coding!","closed_by":{"login":"Pasquale-Favella","id":62385965,"node_id":"MDQ6VXNlcjYyMzg1OTY1","avatar_url":"https://avatars.githubusercontent.com/u/62385965?v=4","gravatar_id":"","url":"https://api.github.com/users/Pasquale-Favella","html_url":"https://github.com/Pasquale-Favella","followers_url":"https://api.github.com/users/Pasquale-Favella/followers","following_url":"https://api.github.com/users/Pasquale-Favella/following{/other_user}","gists_url":"https://api.github.com/users/Pasquale-Favella/gists{/gist_id}","starred_url":"https://api.github.com/users/Pasquale-Favella/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Pasquale-Favella/subscriptions","organizations_url":"https://api.github.com/users/Pasquale-Favella/orgs","repos_url":"https://api.github.com/users/Pasquale-Favella/repos","events_url":"https://api.github.com/users/Pasquale-Favella/events{/privacy}","received_events_url":"https://api.github.com/users/Pasquale-Favella/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/16/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/16/timeline","performed_via_github_app":null,"state_reason":"completed"},{"url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/15","repository_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io","labels_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/15/labels{/name}","comments_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/15/comments","events_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/15/events","html_url":"https://github.com/Pasquale-Favella/pasquale-favella.github.io/issues/15","id":1935035053,"node_id":"I_kwDOIwHgl85zVkqt","number":15,"title":"Setting Up Multiple Data Sources in a Spring Boot Application","user":{"login":"Pasquale-Favella","id":62385965,"node_id":"MDQ6VXNlcjYyMzg1OTY1","avatar_url":"https://avatars.githubusercontent.com/u/62385965?v=4","gravatar_id":"","url":"https://api.github.com/users/Pasquale-Favella","html_url":"https://github.com/Pasquale-Favella","followers_url":"https://api.github.com/users/Pasquale-Favella/followers","following_url":"https://api.github.com/users/Pasquale-Favella/following{/other_user}","gists_url":"https://api.github.com/users/Pasquale-Favella/gists{/gist_id}","starred_url":"https://api.github.com/users/Pasquale-Favella/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Pasquale-Favella/subscriptions","organizations_url":"https://api.github.com/users/Pasquale-Favella/orgs","repos_url":"https://api.github.com/users/Pasquale-Favella/repos","events_url":"https://api.github.com/users/Pasquale-Favella/events{/privacy}","received_events_url":"https://api.github.com/users/Pasquale-Favella/received_events","type":"User","site_admin":false},"labels":[{"id":4991782391,"node_id":"LA_kwDOIwHgl88AAAABKYiN9w","url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/labels/documentation","name":"documentation","color":"0075ca","default":true,"description":"Improvements or additions to documentation"},{"id":5176884231,"node_id":"LA_kwDOIwHgl88AAAABNJD8Bw","url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/labels/Java","name":"Java","color":"57627E","default":false,"description":""},{"id":5176887291,"node_id":"LA_kwDOIwHgl88AAAABNJEH-w","url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/labels/Spring%20Boot","name":"Spring Boot","color":"10AE3D","default":false,"description":""}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2023-10-10T10:41:51Z","updated_at":"2024-04-12T08:44:41Z","closed_at":"2024-04-12T08:44:40Z","author_association":"OWNER","active_lock_reason":null,"body":"Spring Boot is a popular Java framework that simplifies the process of building robust and scalable applications. One common requirement in enterprise applications is the need to work with multiple data sources. This could be due to various reasons, such as handling different databases, connecting to external services, or segregating data for performance and security purposes. In this article, we will explore how to set up and manage multiple data sources in a Spring Boot application.\r\n\r\n## 1. Why Use Multiple Data Sources?\r\n\r\nBefore diving into the technical details, it's essential to understand why you might need multiple data sources in a Spring Boot application:\r\n\r\n- **Data Isolation**: Separate data sources can be used to isolate sensitive data from the main application database. For example, you may store user credentials in a separate database for added security.\r\n\r\n- **Performance Optimization**: By segregating data, you can optimize the performance of your application. For instance, storing frequently accessed data in a dedicated database can improve response times.\r\n\r\n- **Integration with External Services**: You might need to connect to external services or databases that are not part of your main application database.\r\n\r\n- **Legacy Systems**: In enterprise environments, you may need to interact with legacy systems that use different data sources.\r\n\r\n## 2. Configuration and Dependency Setup\r\n\r\nTo set up multiple data sources in a Spring Boot application, you need to follow these steps:\r\n\r\n### 2.1. Adding Dependencies\r\n\r\nIn your `pom.xml` file, include the necessary dependencies:\r\n\r\n```xml\r\n<!-- Spring Boot Starter -->\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter</artifactId>\r\n</dependency>\r\n\r\n<!-- Spring Data JPA for the primary data source -->\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-data-jpa</artifactId>\r\n</dependency>\r\n\r\n<!-- HikariCP for connection pooling -->\r\n<dependency>\r\n    <groupId>com.zaxxer</groupId>\r\n    <artifactId>HikariCP</artifactId>\r\n</dependency>\r\n\r\n<!-- JDBC driver for your primary database -->\r\n<dependency>\r\n    <groupId>com.mysql.cj</groupId>\r\n    <artifactId>mysql-connector-java</artifactId>\r\n</dependency>\r\n\r\n<!-- Additional dependencies for secondary data sources -->\r\n<!-- Add dependencies for secondary databases here -->\r\n```\r\nEnsure you include the JDBC driver for your primary database and any additional dependencies required for your secondary data sources.\r\n\r\n### 2.2. Creating Configuration Properties\r\n\r\nCreate configuration properties for your data sources in `application.properties` or `application.yml`. Define properties for the primary and secondary data sources, such as URL, username, password, and driver class. For example:\r\n\r\n```properties\r\n# Primary DataSource\r\nspring.datasource.primary.url=jdbc:mysql://localhost:3306/primary_db\r\nspring.datasource.primary.username=root\r\nspring.datasource.primary.password=root\r\nspring.datasource.primary.driver-class-name=com.mysql.cj.jdbc.Driver\r\n\r\n# Secondary DataSource\r\nspring.datasource.secondary.url=jdbc:mysql://localhost:3306/secondary_db\r\nspring.datasource.secondary.username=root\r\nspring.datasource.secondary.password=root\r\nspring.datasource.secondary.driver-class-name=com.mysql.cj.jdbc.Driver\r\n```\r\n\r\n## 3. Configuring Multiple Data Sources\r\n\r\nIn this section, we will configure multiple data sources and create beans for them.\r\n\r\n### 3.1. Defining Data Source Beans\r\n\r\nIn your Spring Boot application, define multiple `DataSource` beans in a configuration class. For example:\r\n\r\n```java\r\n@Configuration\r\n@EnableTransactionManagement\r\npublic class DataSourceConfig {\r\n\r\n    @Primary\r\n    @Bean(name = \"primaryDataSource\")\r\n    @ConfigurationProperties(prefix = \"spring.datasource.primary\")\r\n    public DataSource primaryDataSource() {\r\n        return DataSourceBuilder.create().build();\r\n    }\r\n\r\n    @Bean(name = \"secondaryDataSource\")\r\n    @ConfigurationProperties(prefix = \"spring.datasource.secondary\")\r\n    public DataSource secondaryDataSource() {\r\n        return DataSourceBuilder.create().build();\r\n    }\r\n}\r\n```\r\n\r\nIn the code above, we use `@ConfigurationProperties` to bind the properties from `application.properties` to the respective `DataSource` beans.\r\n\r\n### 3.2. Creating JdbcTemplate Beans\r\n\r\nTo interact with the databases, create `JdbcTemplate` beans for each data source. These `JdbcTemplate` beans are responsible for executing SQL queries.\r\n\r\n```java\r\n@Configuration\r\npublic class JdbcTemplateConfig {\r\n\r\n    @Primary\r\n    @Bean(name = \"primaryJdbcTemplate\")\r\n    public JdbcTemplate primaryJdbcTemplate(@Qualifier(\"primaryDataSource\") DataSource dataSource) {\r\n        return new JdbcTemplate(dataSource);\r\n    }\r\n\r\n    @Bean(name = \"secondaryJdbcTemplate\")\r\n    public JdbcTemplate secondaryJdbcTemplate(@Qualifier(\"secondaryDataSource\") DataSource dataSource) {\r\n        return new JdbcTemplate(dataSource);\r\n    }\r\n}\r\n```\r\n\r\n## 4. Implementing Repository and Service Layers\r\n\r\nNow that you have configured multiple data sources, you can create repository and service layers to interact with each data source independently.\r\n\r\n### 4.1. Creating Entity Classes\r\n\r\nDefine entity classes for each data source. These classes represent the database tables and their relationships. Annotate them with `@Entity` and define the appropriate mappings.\r\n\r\n```java\r\n@Entity\r\n@Table(name = \"primary_table\")\r\npublic class PrimaryEntity {\r\n    // Define entity properties and relationships\r\n}\r\n\r\n@Entity\r\n@Table(name = \"secondary_table\")\r\npublic class SecondaryEntity {\r\n    // Define entity properties and relationships\r\n}\r\n```\r\n\r\n### 4.2. Building Repository Interfaces\r\n\r\nCreate repository interfaces for each entity using Spring Data JPA. These interfaces will provide CRUD (Create, Read, Update, Delete) operations.\r\n\r\n```java\r\npublic interface PrimaryRepository extends JpaRepository<PrimaryEntity, Long> {\r\n    // Define custom query methods if needed\r\n}\r\n\r\npublic interface SecondaryRepository extends JpaRepository<SecondaryEntity, Long> {\r\n    // Define custom query methods if needed\r\n}\r\n```\r\n\r\n### 4.3. Developing Service Classes\r\n\r\nBuild service classes that encapsulate business logic and interact with the repositories. These services will use the respective `JdbcTemplate`  beans to execute queries on the correct data source.\r\n\r\n```java\r\n@Service\r\npublic class PrimaryService {\r\n\r\n    private final JdbcTemplate primaryJdbcTemplate;\r\n\r\n    @Autowired\r\n    public PrimaryService(@Qualifier(\"primaryJdbcTemplate\") JdbcTemplate primaryJdbcTemplate) {\r\n        this.primaryJdbcTemplate = primaryJdbcTemplate;\r\n    }\r\n\r\n    // Implement service methods using primaryJdbcTemplate\r\n}\r\n\r\n@Service\r\npublic class SecondaryService {\r\n\r\n    private final JdbcTemplate secondaryJdbcTemplate;\r\n\r\n    @Autowired\r\n    public SecondaryService(@Qualifier(\"secondaryJdbcTemplate\") JdbcTemplate secondaryJdbcTemplate) {\r\n        this.secondaryJdbcTemplate = secondaryJdbcTemplate;\r\n    }\r\n\r\n    // Implement service methods using secondaryJdbcTemplate\r\n}\r\n```\r\n\r\n## 5. Transaction Management\r\n\r\nWhen working with multiple data sources, it's crucial to manage transactions correctly. Spring Boot provides transaction management capabilities that you can leverage.\r\n\r\n### 5.1. Configuring Transaction Managers\r\n\r\nConfigure transaction managers for each data source in your configuration class:\r\n\r\n```java\r\n@Configuration\r\n@EnableTransactionManagement\r\npublic class TransactionManagerConfig {\r\n\r\n    @Primary\r\n    @Bean(name = \"primaryTransactionManager\")\r\n    public PlatformTransactionManager primaryTransactionManager(\r\n            @Qualifier(\"primaryDataSource\") DataSource primaryDataSource) {\r\n        return new DataSourceTransactionManager(primaryDataSource);\r\n    }\r\n\r\n    @Bean(name = \"secondaryTransactionManager\")\r\n    public PlatformTransactionManager secondaryTransactionManager(\r\n            @Qualifier(\"secondaryDataSource\") DataSource secondaryDataSource) {\r\n        return new DataSourceTransactionManager(secondaryDataSource);\r\n    }\r\n}\r\n```\r\n\r\nIn the code above, we define `PlatformTransactionManager` beans for both data sources.\r\n\r\n### 5.2. Transactional Annotations\r\n\r\nUse the `@Transactional` annotation to specify transaction boundaries in your service methods. You can indicate which transaction manager to use for each method.\r\n\r\n```java\r\n@Service\r\npublic class PrimaryService {\r\n\r\n    private final JdbcTemplate primaryJdbcTemplate;\r\n\r\n    @Autowired\r\n    public PrimaryService(@Qualifier(\"primaryJdbcTemplate\") JdbcTemplate primaryJdbcTemplate) {\r\n        this.primaryJdbcTemplate = primaryJdbcTemplate;\r\n    }\r\n\r\n    @Transactional(transactionManager = \"primaryTransactionManager\")\r\n    public void performPrimaryDataOperation() {\r\n        // Perform database operations using primaryJdbcTemplate\r\n    }\r\n}\r\n\r\n@Service\r\npublic class SecondaryService {\r\n\r\n    private final JdbcTemplate secondaryJdbcTemplate;\r\n\r\n    @Autowired\r\n    public SecondaryService(@Qualifier(\"secondaryJdbcTemplate\") JdbcTemplate secondaryJdbcTemplate) {\r\n        this.secondaryJdbcTemplate = secondaryJdbcTemplate;\r\n    }\r\n\r\n    @Transactional(transactionManager = \"secondaryTransactionManager\")\r\n    public void performSecondaryDataOperation() {\r\n        // Perform database operations using secondaryJdbcTemplate\r\n    }\r\n}\r\n```\r\n\r\nBy specifying the `transactionManager` attribute in the `@Transactional` annotation, you ensure that each method operates within the correct transaction context.\r\n\r\n## 6. Testing Multiple Data Sources\r\n\r\nTo ensure the reliability and correctness of your multiple data source setup, you need to create comprehensive tests.\r\n\r\n### 6.1. Unit Testing\r\n\r\nFor unit testing, you can use tools like JUnit and Mockito to mock the data source interactions. Create test cases for your service methods and validate their behavior.\r\n\r\n```java\r\n@RunWith(MockitoJUnitRunner.class)\r\npublic class PrimaryServiceTest {\r\n\r\n    @InjectMocks\r\n    private PrimaryService primaryService;\r\n\r\n    @Mock\r\n    private JdbcTemplate primaryJdbcTemplate;\r\n\r\n    @Test\r\n    public void testPerformPrimaryDataOperation() {\r\n        // Mock database interaction and test the service method\r\n    }\r\n}\r\n\r\n@RunWith(MockitoJUnitRunner.class)\r\npublic class SecondaryServiceTest {\r\n\r\n    @InjectMocks\r\n    private SecondaryService secondaryService;\r\n\r\n    @Mock\r\n    private JdbcTemplate secondaryJdbcTemplate;\r\n\r\n    @Test\r\n    public void testPerformSecondaryDataOperation() {\r\n        // Mock database interaction and test the service method\r\n    }\r\n}\r\n```\r\n\r\n### 6.2. Integration Testing\r\n\r\nFor integration testing, you can use Spring's `@SpringBootTest` annotation to create test configurations that mimic your production environment. You can also use an embedded database like H2 for testing.\r\n\r\n```java\r\n@SpringBootTest\r\npublic class MultipleDataSourceIntegrationTest {\r\n\r\n    @Autowired\r\n    private PrimaryService primaryService;\r\n\r\n    @Autowired\r\n    private SecondaryService secondaryService;\r\n\r\n    @Test\r\n    public void testMultipleDataSources() {\r\n        // Write integration tests to validate interactions between services\r\n    }\r\n}\r\n```\r\n\r\n## 7. Conclusion\r\nSetting up and managing multiple data sources in a Spring Boot application can be a challenging but necessary task for many enterprise applications. By following the steps outlined in this article, you can achieve data isolation, optimize performance, and integrate seamlessly with various data sources.\r\n\r\nRemember to configure the necessary dependencies, create and configure data source beans and JdbcTemplate beans, implement repository and service layers, and manage transactions correctly. Comprehensive unit and integration testing are crucial to ensure the reliability and correctness of your multiple data source setup.\r\n\r\nWith the right design and careful implementation, Spring Boot makes it possible to work with multiple data sources efficiently, enabling you to build robust and scalable applications that meet the complex data requirements of modern enterprise systems.","closed_by":{"login":"Pasquale-Favella","id":62385965,"node_id":"MDQ6VXNlcjYyMzg1OTY1","avatar_url":"https://avatars.githubusercontent.com/u/62385965?v=4","gravatar_id":"","url":"https://api.github.com/users/Pasquale-Favella","html_url":"https://github.com/Pasquale-Favella","followers_url":"https://api.github.com/users/Pasquale-Favella/followers","following_url":"https://api.github.com/users/Pasquale-Favella/following{/other_user}","gists_url":"https://api.github.com/users/Pasquale-Favella/gists{/gist_id}","starred_url":"https://api.github.com/users/Pasquale-Favella/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Pasquale-Favella/subscriptions","organizations_url":"https://api.github.com/users/Pasquale-Favella/orgs","repos_url":"https://api.github.com/users/Pasquale-Favella/repos","events_url":"https://api.github.com/users/Pasquale-Favella/events{/privacy}","received_events_url":"https://api.github.com/users/Pasquale-Favella/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/15/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/15/timeline","performed_via_github_app":null,"state_reason":"completed"},{"url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/14","repository_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io","labels_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/14/labels{/name}","comments_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/14/comments","events_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/14/events","html_url":"https://github.com/Pasquale-Favella/pasquale-favella.github.io/issues/14","id":1830660798,"node_id":"I_kwDOIwHgl85tHaq-","number":14,"title":"Using Lazy and Suspense in React.js and Next.js","user":{"login":"Pasquale-Favella","id":62385965,"node_id":"MDQ6VXNlcjYyMzg1OTY1","avatar_url":"https://avatars.githubusercontent.com/u/62385965?v=4","gravatar_id":"","url":"https://api.github.com/users/Pasquale-Favella","html_url":"https://github.com/Pasquale-Favella","followers_url":"https://api.github.com/users/Pasquale-Favella/followers","following_url":"https://api.github.com/users/Pasquale-Favella/following{/other_user}","gists_url":"https://api.github.com/users/Pasquale-Favella/gists{/gist_id}","starred_url":"https://api.github.com/users/Pasquale-Favella/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Pasquale-Favella/subscriptions","organizations_url":"https://api.github.com/users/Pasquale-Favella/orgs","repos_url":"https://api.github.com/users/Pasquale-Favella/repos","events_url":"https://api.github.com/users/Pasquale-Favella/events{/privacy}","received_events_url":"https://api.github.com/users/Pasquale-Favella/received_events","type":"User","site_admin":false},"labels":[{"id":4991782391,"node_id":"LA_kwDOIwHgl88AAAABKYiN9w","url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/labels/documentation","name":"documentation","color":"0075ca","default":true,"description":"Improvements or additions to documentation"},{"id":5011911244,"node_id":"LA_kwDOIwHgl88AAAABKruyTA","url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/labels/React","name":"React","color":"1d76db","default":false,"description":""},{"id":5744992208,"node_id":"LA_kwDOIwHgl88AAAABVm2f0A","url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/labels/Next%20JS","name":"Next JS","color":"5319e7","default":false,"description":""}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2023-08-01T07:43:38Z","updated_at":"2024-04-12T08:47:47Z","closed_at":"2024-04-12T08:47:47Z","author_association":"OWNER","active_lock_reason":null,"body":"React is a popular JavaScript library for building user interfaces, and Next is a powerful framework built on top of React, designed for server-side rendering and static site generation. With the continuous improvement of React and Next, new features have been introduced to enhance performance and user experience. Two such features are Lazy and Suspense.\r\n\r\n## Lazy Loading\r\n\r\nLazy loading is a technique that allows you to load components only when they are needed. This can significantly improve the initial load time of your application by reducing the size of the initial JavaScript bundle.\r\n\r\nIn React, you can use the `React.lazy` function to create a lazy-loaded component. The `React.lazy` function takes a function that returns a dynamic import. This means you can use dynamic imports to load the component's module only when it's required.\r\n\r\n```jsx\r\nimport React, { lazy, Suspense } from 'react';\r\n\r\nconst LazyComponent = lazy(() => import('./LazyComponent'));\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <Suspense fallback={<div>Loading...</div>}>\r\n        <LazyComponent />\r\n      </Suspense>\r\n    </div>\r\n  );\r\n}\r\n```\r\nIn the code above, the `LazyComponent` is imported lazily using `React.lazy`. The `Suspense` component is used to wrap the lazy component and specify a fallback to display while the lazy component is being loaded. The fallback will be shown until the lazy component is fully loaded and ready to render.\r\n\r\n## Suspense for Data Fetching\r\n\r\nReact's Suspense feature goes beyond lazy loading and also allows you to handle asynchronous data fetching in a more elegant way. Before Suspense, handling asynchronous data fetching involved using various libraries and complex state management. With Suspense, you can easily handle data fetching and error handling using a more declarative approach.\r\n\r\nTo use `Suspense` for data fetching, you can use the `React.Suspense` component along with the `React.lazy` function. Here's an example of fetching data from an API and displaying it with Suspense:\r\n\r\n```jsx\r\nimport React, { lazy, Suspense } from 'react';\r\n\r\nconst fetchData = () => {\r\n  return fetch('https://api.example.com/data')\r\n    .then((response) => response.json());\r\n};\r\n\r\nconst LazyComponentWithData = lazy(() => import('./LazyComponentWithData'));\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <Suspense fallback={<div>Loading...</div>}>\r\n        <LazyComponentWithData data={fetchData()} />\r\n      </Suspense>\r\n    </div>\r\n  );\r\n}\r\n```\r\n## Error Handling with Suspense\r\n\r\nAnother advantage of using Suspense is its built-in error handling. If the lazy component or the data fetching encounters an error, Suspense will automatically catch the error and display the fallback UI.\r\n\r\nTo handle errors with Suspense, you can use the `ErrorBoundary` component provided by React:\r\n\r\n```jsx\r\nimport React, { lazy, Suspense } from 'react';\r\n\r\nconst fetchData = () => {\r\n  return fetch('https://api.example.com/data')\r\n    .then((response) => response.json());\r\n};\r\n\r\nconst LazyComponentWithData = lazy(() => import('./LazyComponentWithData'));\r\n\r\nclass ErrorBoundary extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { hasError: false };\r\n  }\r\n\r\n  static getDerivedStateFromError(error) {\r\n    return { hasError: true };\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      return <div>Something went wrong.</div>;\r\n    }\r\n\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <ErrorBoundary>\r\n        <Suspense fallback={<div>Loading...</div>}>\r\n          <LazyComponentWithData data={fetchData()} />\r\n        </Suspense>\r\n      </ErrorBoundary>\r\n    </div>\r\n  );\r\n}\r\n```\r\n\r\nIn this example, we've created an `ErrorBoundary` component that catches any errors that occur within its children. If an error occurs, it will display an error message. By wrapping the `Suspense` component with the `ErrorBoundary`, you can handle errors that may happen during lazy loading or data fetching gracefully.\r\n\r\n## Using Lazy and Suspense in Next.js\r\n\r\nNext.js extends the capabilities of React by adding server-side rendering (SSR) and static site generation (SSG). The good news is that you can also use Lazy and Suspense in your Next.js applications to improve the performance and user experience.\r\n\r\nTo use Lazy and Suspense in Next.js, you can follow the same approach as in regular React applications. Simply use the `React.lazy` function to create lazy-loaded components and wrap them with the `React.Suspense` component for data fetching, just like we did earlier.\r\n\r\nHowever, there is one additional step you need to consider in Next.js. Since Next.js supports server-side rendering and static site generation, you need to make sure that dynamic imports are used only on the client-side to avoid any server-side conflicts.\r\n\r\nTo achieve this, you can use the `dynamic` function from Next.js instead of the `React.lazy` function. The `dynamic` function allows you to specify options, such as whether the component should be loaded on the server-side or the client-side.\r\n\r\nHere's an example of using `dynamic` in Next.js:\r\n\r\n```jsx\r\nimport React, { Suspense } from 'react';\r\nimport dynamic from 'next/dynamic';\r\n\r\nconst DynamicComponent = dynamic(() => import('./DynamicComponent'), {\r\n  loading: () => <div>Loading...</div>,\r\n  ssr: false, // Set to true if you want to load the component on the server-side\r\n});\r\n\r\nfunction NextApp() {\r\n  return (\r\n    <div>\r\n      <Suspense fallback={<div>Loading...</div>}>\r\n        <DynamicComponent />\r\n      </Suspense>\r\n    </div>\r\n  );\r\n}\r\n```\r\n\r\nIn this example, we import the `dynamic` function from Next.js and use it to load the `DynamicComponent`. We set `ssr` to `false` to ensure that the component is only loaded on the client-side.\r\n\r\n## Conclusion\r\n\r\nLazy and Suspense are powerful features introduced in React to enhance the performance and user experience of your applications. By leveraging lazy loading and Suspense for data fetching, you can significantly improve the loading time and handle asynchronous data fetching with ease. Additionally, when using Next.js, make sure to use the `dynamic` function to ensure proper handling of server-side rendering and static site generation. So, consider using Lazy and Suspense in your React and Next.js applications to take advantage of these powerful features and create faster and more efficient web applications.\r\n\r\nHappy coding!","closed_by":{"login":"Pasquale-Favella","id":62385965,"node_id":"MDQ6VXNlcjYyMzg1OTY1","avatar_url":"https://avatars.githubusercontent.com/u/62385965?v=4","gravatar_id":"","url":"https://api.github.com/users/Pasquale-Favella","html_url":"https://github.com/Pasquale-Favella","followers_url":"https://api.github.com/users/Pasquale-Favella/followers","following_url":"https://api.github.com/users/Pasquale-Favella/following{/other_user}","gists_url":"https://api.github.com/users/Pasquale-Favella/gists{/gist_id}","starred_url":"https://api.github.com/users/Pasquale-Favella/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Pasquale-Favella/subscriptions","organizations_url":"https://api.github.com/users/Pasquale-Favella/orgs","repos_url":"https://api.github.com/users/Pasquale-Favella/repos","events_url":"https://api.github.com/users/Pasquale-Favella/events{/privacy}","received_events_url":"https://api.github.com/users/Pasquale-Favella/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/14/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/14/timeline","performed_via_github_app":null,"state_reason":"completed"},{"url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/13","repository_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io","labels_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/13/labels{/name}","comments_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/13/comments","events_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/13/events","html_url":"https://github.com/Pasquale-Favella/pasquale-favella.github.io/issues/13","id":1808074550,"node_id":"I_kwDOIwHgl85rxQc2","number":13,"title":"Introduction to Incremental Static Generation (ISG) in Next.js","user":{"login":"Pasquale-Favella","id":62385965,"node_id":"MDQ6VXNlcjYyMzg1OTY1","avatar_url":"https://avatars.githubusercontent.com/u/62385965?v=4","gravatar_id":"","url":"https://api.github.com/users/Pasquale-Favella","html_url":"https://github.com/Pasquale-Favella","followers_url":"https://api.github.com/users/Pasquale-Favella/followers","following_url":"https://api.github.com/users/Pasquale-Favella/following{/other_user}","gists_url":"https://api.github.com/users/Pasquale-Favella/gists{/gist_id}","starred_url":"https://api.github.com/users/Pasquale-Favella/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Pasquale-Favella/subscriptions","organizations_url":"https://api.github.com/users/Pasquale-Favella/orgs","repos_url":"https://api.github.com/users/Pasquale-Favella/repos","events_url":"https://api.github.com/users/Pasquale-Favella/events{/privacy}","received_events_url":"https://api.github.com/users/Pasquale-Favella/received_events","type":"User","site_admin":false},"labels":[{"id":4991782391,"node_id":"LA_kwDOIwHgl88AAAABKYiN9w","url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/labels/documentation","name":"documentation","color":"0075ca","default":true,"description":"Improvements or additions to documentation"},{"id":5744992208,"node_id":"LA_kwDOIwHgl88AAAABVm2f0A","url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/labels/Next%20JS","name":"Next JS","color":"5319e7","default":false,"description":""}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2023-07-17T15:51:40Z","updated_at":"2024-04-12T08:48:08Z","closed_at":"2024-04-12T08:48:08Z","author_association":"OWNER","active_lock_reason":null,"body":"In the world of web development, delivering high-performance and dynamic websites is crucial for providing an exceptional user experience. Static Generation (SG) has been a go-to approach for generating static pages in Next.js, ensuring fast load times and server efficiency. However, as applications become more dynamic, maintaining up-to-date content can be challenging. That's where Incremental Static Generation (ISG) steps in, bridging the gap between static pages and real-time updates.\r\n\r\nNext.js, a popular React framework, introduces ISG as an advanced feature that takes the benefits of Static Generation and augments them with the ability to update pages at runtime. It offers developers the power to seamlessly blend pre-rendered pages with dynamic content, resulting in fast-loading websites that display the latest data.\r\n\r\n## Static Generation (SG) in Next.js\r\nStatic Generation is a feature in Next.js that allows you to pre-render pages at build time. This means that the HTML for each page is generated once and then served to clients as static files, greatly improving performance and reducing server load.\r\n\r\nHowever, there are cases where Static Generation alone may not be sufficient. For example, if you have dynamic content that frequently changes or data that needs to be fetched from an external API, static pages generated during build time won't reflect the latest data.\r\n\r\n## Enter Incremental Static Generation (ISG)\r\nIncremental Static Generation (ISG) is an advanced feature introduced in Next.js 10.2 that combines the benefits of Static Generation with the ability to update static pages at runtime. It allows you to re-generate static pages on-demand or in the background, ensuring that your website or application always displays up-to-date information.\r\n\r\n## How does ISG work?\r\nISG leverages Next.js's hybrid approach to rendering. It initially generates static pages during the build process but leaves certain parts of the page as \"unfilled\" or \"unstable.\" These unfilled parts act as placeholders for dynamic content that will be generated or updated later.\r\n\r\nWhen a user visits a page with unfilled parts, Next.js loads the static content immediately and then fetches the dynamic data in the background. Once the data is available, Next.js regenerates the page with the updated content and caches it for subsequent requests.\r\n\r\n## Benefits of ISG\r\n1. **Improved performance**: ISG allows you to have the best of both worlds by serving static content for fast initial page loads while still updating and re-rendering dynamic parts as needed. This approach strikes a balance between performance and up-to-date information.\r\n\r\n2. **Real-time data**: With ISG, you can fetch data from APIs or databases at runtime, ensuring that your pages are always displaying the latest information. This is particularly useful for frequently changing data, such as social media feeds or stock prices.\r\n\r\n3. **Lower server load**: By generating and caching static pages, ISG reduces the load on your server. It can handle more traffic and decreases the need for frequent API calls or database queries for every page request.\r\n\r\n4. **Better user experience**: ISG allows you to show meaningful content to users immediately, even if some parts are still loading. This reduces the time spent waiting for the page to load, leading to a better user experience and increased engagement.\r\n\r\n## Implementing ISG in Next.js\r\nTo illustrate how Incremental Static Generation works in Next.js, let's consider an example of a blog application.\r\n\r\nSuppose you're building a blog application with Next.js, and you want to display a list of blog posts on the homepage. The blog posts are dynamic and can change frequently, so you want to ensure that the latest posts are always displayed.\r\n\r\nTo implement ISG in Next.js for this example:\r\n\r\n1. Create a new Next.js project and set up the necessary files and folder structure.\r\n\r\n2. In your pages directory, create a file called `index.js`. This will be the homepage of your blog application.\r\n\r\n3. Inside `index.js`, define a functional component called `HomePage` that will render the blog post list.\r\n\r\n4. Use the `getStaticProps` function to fetch the blog posts data during the build process. In this example, let's assume the blog posts are fetched from an API endpoint.\r\n\r\n```jsx\r\nimport React from 'react';\r\n\r\nfunction HomePage({ posts }) {\r\n  return (\r\n    <div>\r\n      <h1>Welcome to My Blog</h1>\r\n      <ul>\r\n        {posts.map((post) => (\r\n          <li key={post.id}>{post.title}</li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport async function getStaticProps() {\r\n  const res = await fetch('https://api.example.com/posts');\r\n  const posts = await res.json();\r\n\r\n  return {\r\n    props: {\r\n      posts,\r\n    },\r\n    revalidate: 60,\r\n  };\r\n}\r\n\r\nexport default HomePage;\r\n```\r\n\r\nIn this example, we're using the `getStaticProps` function to fetch the blog posts data during the build process. The fetched data is passed as a prop (`posts`) to the `HomePage` component. Additionally, we set the `revalidate` option to 60 seconds, indicating that Next.js should attempt to re-generate the page and fetch updated data every 60 seconds.\r\n\r\n5. Run the Next.js development server and navigate to the homepage. You should see the list of blog posts rendered.\r\n\r\n6. If a new blog post is published after the initial build, Next.js will attempt to re-generate the page and fetch the latest blog posts after the revalidation interval (60 seconds in this example).\r\n\r\n7. When a user visits the homepage again after the revalidation interval, Next.js will serve the previously generated static page. However, in the background, Next.js will make an API request to fetch the latest blog posts.\r\n\r\n8. Once the API request is complete, Next.js will re-render the `HomePage` component with the updated data and cache it for subsequent requests.\r\n\r\nBy utilizing ISG in this example, you ensure that the blog post list on the homepage remains up-to-date while still providing the benefits of static page generation for improved performance.\r\n\r\nRemember to customize the example to suit your specific needs, such as integrating with your own API or database to fetch the blog posts data.\r\n\r\n## Conclusion\r\nIncremental Static Generation (ISG) is a powerful feature in Next.js that combines the benefits of Static Generation with the ability to update static pages at runtime. It allows you to have fast-loading, pre-rendered pages while still delivering real-time data to users. By implementing ISG, you can achieve better performance, improved user experience, and reduced server load. Next.js continues to innovate and provide developers with the tools they need to build modern, scalable web applications.","closed_by":{"login":"Pasquale-Favella","id":62385965,"node_id":"MDQ6VXNlcjYyMzg1OTY1","avatar_url":"https://avatars.githubusercontent.com/u/62385965?v=4","gravatar_id":"","url":"https://api.github.com/users/Pasquale-Favella","html_url":"https://github.com/Pasquale-Favella","followers_url":"https://api.github.com/users/Pasquale-Favella/followers","following_url":"https://api.github.com/users/Pasquale-Favella/following{/other_user}","gists_url":"https://api.github.com/users/Pasquale-Favella/gists{/gist_id}","starred_url":"https://api.github.com/users/Pasquale-Favella/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Pasquale-Favella/subscriptions","organizations_url":"https://api.github.com/users/Pasquale-Favella/orgs","repos_url":"https://api.github.com/users/Pasquale-Favella/repos","events_url":"https://api.github.com/users/Pasquale-Favella/events{/privacy}","received_events_url":"https://api.github.com/users/Pasquale-Favella/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/13/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/13/timeline","performed_via_github_app":null,"state_reason":"completed"},{"url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/12","repository_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io","labels_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/12/labels{/name}","comments_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/12/comments","events_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/12/events","html_url":"https://github.com/Pasquale-Favella/pasquale-favella.github.io/issues/12","id":1774157007,"node_id":"I_kwDOIwHgl85pv3zP","number":12,"title":"Decoding useLayoutEffect vs. useEffect","user":{"login":"Pasquale-Favella","id":62385965,"node_id":"MDQ6VXNlcjYyMzg1OTY1","avatar_url":"https://avatars.githubusercontent.com/u/62385965?v=4","gravatar_id":"","url":"https://api.github.com/users/Pasquale-Favella","html_url":"https://github.com/Pasquale-Favella","followers_url":"https://api.github.com/users/Pasquale-Favella/followers","following_url":"https://api.github.com/users/Pasquale-Favella/following{/other_user}","gists_url":"https://api.github.com/users/Pasquale-Favella/gists{/gist_id}","starred_url":"https://api.github.com/users/Pasquale-Favella/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Pasquale-Favella/subscriptions","organizations_url":"https://api.github.com/users/Pasquale-Favella/orgs","repos_url":"https://api.github.com/users/Pasquale-Favella/repos","events_url":"https://api.github.com/users/Pasquale-Favella/events{/privacy}","received_events_url":"https://api.github.com/users/Pasquale-Favella/received_events","type":"User","site_admin":false},"labels":[{"id":4991782391,"node_id":"LA_kwDOIwHgl88AAAABKYiN9w","url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/labels/documentation","name":"documentation","color":"0075ca","default":true,"description":"Improvements or additions to documentation"},{"id":5011911244,"node_id":"LA_kwDOIwHgl88AAAABKruyTA","url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/labels/React","name":"React","color":"1d76db","default":false,"description":""},{"id":5012912803,"node_id":"LA_kwDOIwHgl88AAAABKsr6ow","url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/labels/Hooks","name":"Hooks","color":"fbca04","default":false,"description":""}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2023-06-26T07:50:09Z","updated_at":"2024-04-12T08:48:20Z","closed_at":"2024-04-12T08:48:20Z","author_association":"OWNER","active_lock_reason":null,"body":"React, a popular JavaScript library for building user interfaces, provides developers with a range of powerful tools and hooks to manage state, handle side effects, and perform other critical tasks. Two commonly used hooks in React are `useEffect` and `useLayoutEffect`. While they may seem similar at first glance, they have distinct differences that developers should be aware of in order to use them effectively.\r\n\r\n## Purpose of the Hooks\r\n\r\nBoth `useEffect` and `useLayoutEffect` allow you to perform side effects in your React components. Side effects typically include tasks such as fetching data from an API, manipulating the DOM, subscribing to events, or cleaning up resources. The main difference between the two hooks lies in the timing of when they are executed.\r\n\r\n### `useEffect`\r\n\r\n`useEffect` is a hook that is executed after the rendering is complete and the browser has painted the screen. It's a post-rendering hook that ensures the side effect is performed asynchronously, without blocking the rendering process. This makes it suitable for most scenarios, as it doesn't interfere with the user interface updates and helps maintain a smooth user experience.\r\n\r\nHere's an example of using `useEffect` to fetch data asynchronously:\r\n\r\n```jsx\r\nimport React, { useState, useEffect } from 'react';\r\n\r\nconst ExampleComponent = () => {\r\n  const [data, setData] = useState(null);\r\n\r\n  useEffect(() => {\r\n    // Fetch data asynchronously\r\n    fetchData()\r\n      .then((response) => setData(response))\r\n      .catch((error) => console.error(error));\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <p>Data: {data}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\n// Mock fetch data function\r\nconst fetchData = () => {\r\n  return new Promise((resolve) => {\r\n    setTimeout(() => {\r\n      resolve('Mock Data');\r\n    }, 2000);\r\n  });\r\n};\r\n```\r\n\r\nIn this example, the `useEffect` hook is used to fetch data asynchronously. It runs once when the component mounts, thanks to the empty dependency array `[]`. The fetched data is stored in the `data` state using the `setData` function. This way, the component renders initially without any data and updates once the asynchronous data fetching is complete.\r\n\r\n### `useLayoutEffect`\r\n\r\n`useLayoutEffect` is similar to `useEffect` in that it allows you to perform side effects. However, it is executed synchronously, immediately after the rendering phase, but before the browser has painted the screen. This means that the side effect performed inside `useLayoutEffect` will block the painting and layout of the UI until it is finished. Consequently, using `useLayoutEffect` can lead to performance issues and should be used with caution.\r\n\r\nHere's an example of using `useLayoutEffect` to measure an element's dimensions synchronously:\r\n\r\n```jsx\r\nimport React, { useState, useLayoutEffect } from 'react';\r\n\r\nconst ExampleComponent = () => {\r\n  const [dimensions, setDimensions] = useState({ width: 0, height: 0 });\r\n\r\n  useLayoutEffect(() => {\r\n    // Measure element dimensions synchronously\r\n    const element = document.getElementById('myElement');\r\n    const { width, height } = element.getBoundingClientRect();\r\n    setDimensions({ width, height });\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <div id=\"myElement\">Example Element</div>\r\n      <p>Dimensions: {dimensions.width} x {dimensions.height}</p>\r\n    </div>\r\n  );\r\n};\r\n```\r\n\r\nIn this example, the `useLayoutEffect` hook is used to measure the dimensions of the element with the ID `myElement`. It runs once when the component mounts, as indicated by the empty dependency array `[]`. The dimensions are obtained synchronously using `getBoundingClientRect()`, and the width and height values are stored in the `dimensions` state using the `setDimensions` function. This ensures that the latest DOM layout data is available for further calculations or rendering.\r\n\r\n## Choosing the Right Hook\r\n\r\nIt's important to choose the appropriate hook based on your specific requirements. Here's a summary of the differences between `useEffect` and `useLayoutEffect`:\r\n\r\n1. Timing: `useEffect` is executed asynchronously after the rendering and painting phase, while `useLayoutEffect` is executed synchronously before the painting phase.\r\n2. Blocking: `useEffect` doesn't block the rendering or painting process, whereas `useLayoutEffect` can introduce delays as it blocks the UI updates until the side effect is complete.\r\n3. Use cases: `useEffect` is suitable for most scenarios where you need to perform side effects, while `useLayoutEffect` is more appropriate when you need to read or manipulate the DOM immediately after a component update.\r\n\r\nIn most cases, using `useEffect` will be sufficient for handling side effects in React components. It ensures a smooth user experience by performing asynchronous side effects after rendering. However, when you require synchronous access to the DOM layout, `useLayoutEffect` can be a valuable tool.\r\n\r\nRemember to use `useLayoutEffect` judiciously, as it can potentially impact performance by blocking rendering. Only utilize it when you genuinely need to read or manipulate the DOM layout synchronously.\r\n\r\nBy understanding the differences between `useEffect` and `useLayoutEffect`, you can make informed decisions and write more efficient and performant React components that fulfill your specific requirements.","closed_by":{"login":"Pasquale-Favella","id":62385965,"node_id":"MDQ6VXNlcjYyMzg1OTY1","avatar_url":"https://avatars.githubusercontent.com/u/62385965?v=4","gravatar_id":"","url":"https://api.github.com/users/Pasquale-Favella","html_url":"https://github.com/Pasquale-Favella","followers_url":"https://api.github.com/users/Pasquale-Favella/followers","following_url":"https://api.github.com/users/Pasquale-Favella/following{/other_user}","gists_url":"https://api.github.com/users/Pasquale-Favella/gists{/gist_id}","starred_url":"https://api.github.com/users/Pasquale-Favella/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Pasquale-Favella/subscriptions","organizations_url":"https://api.github.com/users/Pasquale-Favella/orgs","repos_url":"https://api.github.com/users/Pasquale-Favella/repos","events_url":"https://api.github.com/users/Pasquale-Favella/events{/privacy}","received_events_url":"https://api.github.com/users/Pasquale-Favella/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/12/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/12/timeline","performed_via_github_app":null,"state_reason":"completed"},{"url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/11","repository_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io","labels_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/11/labels{/name}","comments_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/11/comments","events_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/11/events","html_url":"https://github.com/Pasquale-Favella/pasquale-favella.github.io/issues/11","id":1763269539,"node_id":"I_kwDOIwHgl85pGVuj","number":11,"title":"Enhancing Batch Processing with Spring Boot StepLet","user":{"login":"Pasquale-Favella","id":62385965,"node_id":"MDQ6VXNlcjYyMzg1OTY1","avatar_url":"https://avatars.githubusercontent.com/u/62385965?v=4","gravatar_id":"","url":"https://api.github.com/users/Pasquale-Favella","html_url":"https://github.com/Pasquale-Favella","followers_url":"https://api.github.com/users/Pasquale-Favella/followers","following_url":"https://api.github.com/users/Pasquale-Favella/following{/other_user}","gists_url":"https://api.github.com/users/Pasquale-Favella/gists{/gist_id}","starred_url":"https://api.github.com/users/Pasquale-Favella/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Pasquale-Favella/subscriptions","organizations_url":"https://api.github.com/users/Pasquale-Favella/orgs","repos_url":"https://api.github.com/users/Pasquale-Favella/repos","events_url":"https://api.github.com/users/Pasquale-Favella/events{/privacy}","received_events_url":"https://api.github.com/users/Pasquale-Favella/received_events","type":"User","site_admin":false},"labels":[{"id":4991782391,"node_id":"LA_kwDOIwHgl88AAAABKYiN9w","url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/labels/documentation","name":"documentation","color":"0075ca","default":true,"description":"Improvements or additions to documentation"},{"id":5176884231,"node_id":"LA_kwDOIwHgl88AAAABNJD8Bw","url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/labels/Java","name":"Java","color":"57627E","default":false,"description":""},{"id":5176887291,"node_id":"LA_kwDOIwHgl88AAAABNJEH-w","url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/labels/Spring%20Boot","name":"Spring Boot","color":"10AE3D","default":false,"description":""}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2023-06-19T10:48:11Z","updated_at":"2024-04-12T08:48:28Z","closed_at":"2024-04-12T08:48:28Z","author_association":"OWNER","active_lock_reason":null,"body":"Spring Boot, a widely used Java framework, provides developers with a simplified and opinionated approach to building Java applications. Spring Boot seamlessly integrates with Spring Batch, a lightweight framework for developing scalable and robust batch processing applications. In this article, we will delve into the intricacies of Spring Boot StepLet and explore how it revolutionizes the development of batch processing tasks.\r\n\r\n## Understanding Spring Boot StepLet\r\nIn Spring Batch, a step represents a self-contained unit of work within a batch job, encompassing tasks such as reading data, processing it, and writing the results. Spring Boot StepLet builds upon this concept and introduces a modular and reusable approach.\r\n\r\nA StepLet is a self-contained and reusable component that encapsulates a single step of a batch job. It allows developers to define and configure individual steps as independent modules, promoting code reusability. Multiple StepLets can be combined to create complex batch processes, providing flexibility and maintainability.\r\n\r\n## Benefits of Spring Boot StepLet\r\n### Reusability\r\n> StepLets encapsulate individual steps as independent modules, enabling code reuse across multiple batch processes. This reduces code duplication and promotes a modular design, making development and maintenance tasks more manageable.\r\n### Testability\r\n> StepLets can be easily tested in isolation, facilitating unit tests for each step. This ensures better code quality, simplifies debugging, and aids troubleshooting. Testing individual StepLets guarantees the correctness of each module before composing them into a batch job.\r\n### Maintainability\r\n> StepLets promote writing and maintaining small, self-contained modules, improving codebase maintainability. Changes to one StepLet have minimal impact on other parts of the batch process, making the application easier to understand and extend.\r\n### Scalability\r\n> StepLets can be combined to create complex batch processes, enabling scalability. Developers can add or remove StepLets as required without affecting the rest of the workflow. This flexibility allows batch jobs to adapt and expand effortlessly.\r\n\r\n## Creating a Spring Boot StepLet\r\nTo create a StepLet in Spring Boot, follow these steps:\r\n\r\n1. Define the StepLet:\r\n```java\r\npublic class MyStepLet implements Step {\r\n\r\n    @Override\r\n    public void execute(StepExecutionContext context) throws StepExecutionException {\r\n        // Step logic\r\n        // Read data, process it, and write the results\r\n    }\r\n}\r\n```\r\n2.Configure the StepLet:\r\n```java\r\n@Configuration\r\npublic class BatchConfig {\r\n\r\n    @Autowired\r\n    private JobBuilderFactory jobBuilderFactory;\r\n\r\n    @Autowired\r\n    private StepBuilderFactory stepBuilderFactory;\r\n\r\n    @Bean\r\n    public Step myStepLet() {\r\n        return stepBuilderFactory.get(\"myStepLet\")\r\n                .tasklet(new MyStepLet())\r\n                .build();\r\n    }\r\n\r\n    @Bean\r\n    public Job myJob(Step myStepLet) {\r\n        return jobBuilderFactory.get(\"myJob\")\r\n                .start(myStepLet)\r\n                .build();\r\n    }\r\n}\r\n```\r\n3.Compose StepLets:\r\n```java\r\n@Configuration\r\npublic class BatchConfig {\r\n\r\n    // ...\r\n\r\n    @Bean\r\n    public Step step1() {\r\n        return stepBuilderFactory.get(\"step1\")\r\n                .tasklet(new Step1Tasklet())\r\n                .build();\r\n    }\r\n\r\n    @Bean\r\n    public Step step2() {\r\n        return stepBuilderFactory.get(\"step2\")\r\n                .tasklet(new Step2Tasklet())\r\n                .build();\r\n    }\r\n\r\n    @Bean\r\n    public Job myJob(Step step1, Step step2) {\r\n        return jobBuilderFactory.get(\"myJob\")\r\n                .start(step1)\r\n                .next(step2)\r\n                .build();\r\n    }\r\n}\r\n```\r\n4.Run the Batch Job:\r\n```java\r\n@SpringBootApplication\r\npublic class Application {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(Application.class, args);\r\n    }\r\n\r\n    @Bean\r\n    public CommandLineRunner run(JobLauncher jobLauncher, Job myJob) {\r\n        return args -> jobLauncher.run(myJob, new JobParameters());\r\n    }\r\n}\r\n```\r\n## Conclusion\r\nSpring Boot StepLet significantly enhances the Spring Batch framework, empowering developers to create modular and reusable components for batch processing tasks. By leveraging StepLets, developers achieve code reusability, testability, maintainability, and scalability in their batch jobs. Spring Batch, in conjunction with Spring Boot, remains a powerful choice for developing robust and efficient batch processing applications.","closed_by":{"login":"Pasquale-Favella","id":62385965,"node_id":"MDQ6VXNlcjYyMzg1OTY1","avatar_url":"https://avatars.githubusercontent.com/u/62385965?v=4","gravatar_id":"","url":"https://api.github.com/users/Pasquale-Favella","html_url":"https://github.com/Pasquale-Favella","followers_url":"https://api.github.com/users/Pasquale-Favella/followers","following_url":"https://api.github.com/users/Pasquale-Favella/following{/other_user}","gists_url":"https://api.github.com/users/Pasquale-Favella/gists{/gist_id}","starred_url":"https://api.github.com/users/Pasquale-Favella/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Pasquale-Favella/subscriptions","organizations_url":"https://api.github.com/users/Pasquale-Favella/orgs","repos_url":"https://api.github.com/users/Pasquale-Favella/repos","events_url":"https://api.github.com/users/Pasquale-Favella/events{/privacy}","received_events_url":"https://api.github.com/users/Pasquale-Favella/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/11/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/11/timeline","performed_via_github_app":null,"state_reason":"completed"},{"url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/10","repository_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io","labels_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/10/labels{/name}","comments_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/10/comments","events_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/10/events","html_url":"https://github.com/Pasquale-Favella/pasquale-favella.github.io/issues/10","id":1696285649,"node_id":"I_kwDOIwHgl85lG0PR","number":10,"title":"Angular View-Model (VM) Pattern with combineLatest","user":{"login":"Pasquale-Favella","id":62385965,"node_id":"MDQ6VXNlcjYyMzg1OTY1","avatar_url":"https://avatars.githubusercontent.com/u/62385965?v=4","gravatar_id":"","url":"https://api.github.com/users/Pasquale-Favella","html_url":"https://github.com/Pasquale-Favella","followers_url":"https://api.github.com/users/Pasquale-Favella/followers","following_url":"https://api.github.com/users/Pasquale-Favella/following{/other_user}","gists_url":"https://api.github.com/users/Pasquale-Favella/gists{/gist_id}","starred_url":"https://api.github.com/users/Pasquale-Favella/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Pasquale-Favella/subscriptions","organizations_url":"https://api.github.com/users/Pasquale-Favella/orgs","repos_url":"https://api.github.com/users/Pasquale-Favella/repos","events_url":"https://api.github.com/users/Pasquale-Favella/events{/privacy}","received_events_url":"https://api.github.com/users/Pasquale-Favella/received_events","type":"User","site_admin":false},"labels":[{"id":4991782391,"node_id":"LA_kwDOIwHgl88AAAABKYiN9w","url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/labels/documentation","name":"documentation","color":"0075ca","default":true,"description":"Improvements or additions to documentation"},{"id":5011828087,"node_id":"LA_kwDOIwHgl88AAAABKrptdw","url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/labels/Angular","name":"Angular","color":"F85A56","default":false,"description":""},{"id":5012942463,"node_id":"LA_kwDOIwHgl88AAAABKstufw","url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/labels/Rxjs","name":"Rxjs","color":"f9d0c4","default":false,"description":""}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2023-05-04T15:52:51Z","updated_at":"2024-04-12T08:48:36Z","closed_at":"2024-04-12T08:48:36Z","author_association":"OWNER","active_lock_reason":null,"body":"When developing Angular applications, it's important to have a clear separation of concerns between the UI and the data layer. One way to achieve this is by using the View-Model (VM) pattern, where the VM acts as an intermediary between the UI and the data layer.\r\n\r\nIn this article, we'll explore how to use the VM pattern with the `combineLatest` operator in Angular to efficiently manage complex UI interactions.\r\n\r\n## The VM Pattern\r\n\r\nThe VM pattern is a design pattern that separates the concerns of the UI and the data layer. The VM acts as a mediator between the two layers, handling data requests and updates on behalf of the UI.\r\n\r\nIn Angular, the VM is typically implemented as a component class that contains the UI state and logic. The VM class interacts with the data layer through services and provides data to the UI through observables.\r\n\r\nOne of the key benefits of using the VM pattern is that it enables developers to decouple the UI from the data layer, making it easier to test and maintain the codebase.\r\n\r\n## Using combineLatest\r\n\r\nThe `combineLatest` operator is a powerful tool in the RxJS library that enables developers to combine multiple observables into a single observable. This can be especially useful in the context of the VM pattern, where multiple data streams need to be combined to update the UI state.\r\n\r\nConsider a scenario where we have a component that displays a list of posts for a selected user. To implement this functionality using the VM pattern, we would create a VM class that contains two observables: one for the selected user and one for the posts.\r\n\r\nWe can use the `combineLatest` operator to combine these two observables into a single observable that emits the posts for the selected user. Here's an example:\r\n\r\n```js\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { combineLatest, Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { Post } from './post';\r\nimport { PostService } from './post.service';\r\nimport { User } from './user';\r\nimport { UserService } from './user.service';\r\n\r\n@Component({\r\n  selector: 'app-post-list',\r\n  template: `\r\n    <h2>Posts by {{ selectedUser?.name }}</h2>\r\n    <ul>\r\n      <li *ngFor=\"let post of posts$ | async\">\r\n        {{ post.title }}\r\n      </li>\r\n    </ul>\r\n  `\r\n})\r\nexport class PostListComponent implements OnInit {\r\n  selectedUser: User | undefined;\r\n  posts$: Observable<Post[]> | undefined;\r\n\r\n  constructor(\r\n    private userService: UserService,\r\n    private postService: PostService\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    // Combine the selected user and posts observables using combineLatest\r\n    this.posts$ = combineLatest([\r\n      this.userService.selectedUser$,\r\n      this.postService.posts$\r\n    ]).pipe(\r\n      // Map the combined observables to only return posts by the selected user\r\n      map(([selectedUser, posts]) =>\r\n        selectedUser ? posts.filter(post => post.userId === selectedUser.id) : []\r\n      )\r\n    );\r\n  }\r\n\r\n  onSelectUser(user: User) {\r\n    // Set the selected user\r\n    this.userService.setSelectedUser(user);\r\n  }\r\n}\r\n```\r\nIn this example, we have a `PostListComponent` that displays a list of posts for a selected user.\r\n\r\nThe `ngOnInit` method of the component sets up the `posts$` observable by combining the `selectedUser$` observable from the `UserService` and the `posts$` observable from the `PostService` using `combineLatest`. The `map` operator is used to filter the posts to only include those by the selected user.\r\n\r\nThe `onSelectUser` method is used to update the selected user in the `UserService`.\r\n\r\nBy using `combineLatest` in this way, we are able to efficiently manage complex UI interactions while maintaining a separation of concerns between the UI and the data layer.\r\n\r\n## Conclusion\r\n\r\nIn this article, we explored how to use the VM pattern with the `combineLatest` operator in Angular to efficiently manage complex UI interactions. By decoupling the UI from the data layer and using reactive programming techniques, we can create more maintainable and testable codebases.\r\n\r\nAs with any design pattern or library, it's important to use these tools in a way that makes sense for your specific application. By understanding the principles behind the VM pattern and `combineLatest`, we can make informed decisions about when and how to use them in our own projects.","closed_by":{"login":"Pasquale-Favella","id":62385965,"node_id":"MDQ6VXNlcjYyMzg1OTY1","avatar_url":"https://avatars.githubusercontent.com/u/62385965?v=4","gravatar_id":"","url":"https://api.github.com/users/Pasquale-Favella","html_url":"https://github.com/Pasquale-Favella","followers_url":"https://api.github.com/users/Pasquale-Favella/followers","following_url":"https://api.github.com/users/Pasquale-Favella/following{/other_user}","gists_url":"https://api.github.com/users/Pasquale-Favella/gists{/gist_id}","starred_url":"https://api.github.com/users/Pasquale-Favella/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Pasquale-Favella/subscriptions","organizations_url":"https://api.github.com/users/Pasquale-Favella/orgs","repos_url":"https://api.github.com/users/Pasquale-Favella/repos","events_url":"https://api.github.com/users/Pasquale-Favella/events{/privacy}","received_events_url":"https://api.github.com/users/Pasquale-Favella/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/10/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/10/timeline","performed_via_github_app":null,"state_reason":"completed"},{"url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/9","repository_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io","labels_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/9/labels{/name}","comments_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/9/comments","events_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/9/events","html_url":"https://github.com/Pasquale-Favella/pasquale-favella.github.io/issues/9","id":1591979011,"node_id":"I_kwDOIwHgl85e46wD","number":9,"title":"Spring Mongo JPA - the basics","user":{"login":"Pasquale-Favella","id":62385965,"node_id":"MDQ6VXNlcjYyMzg1OTY1","avatar_url":"https://avatars.githubusercontent.com/u/62385965?v=4","gravatar_id":"","url":"https://api.github.com/users/Pasquale-Favella","html_url":"https://github.com/Pasquale-Favella","followers_url":"https://api.github.com/users/Pasquale-Favella/followers","following_url":"https://api.github.com/users/Pasquale-Favella/following{/other_user}","gists_url":"https://api.github.com/users/Pasquale-Favella/gists{/gist_id}","starred_url":"https://api.github.com/users/Pasquale-Favella/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Pasquale-Favella/subscriptions","organizations_url":"https://api.github.com/users/Pasquale-Favella/orgs","repos_url":"https://api.github.com/users/Pasquale-Favella/repos","events_url":"https://api.github.com/users/Pasquale-Favella/events{/privacy}","received_events_url":"https://api.github.com/users/Pasquale-Favella/received_events","type":"User","site_admin":false},"labels":[{"id":4991782391,"node_id":"LA_kwDOIwHgl88AAAABKYiN9w","url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/labels/documentation","name":"documentation","color":"0075ca","default":true,"description":"Improvements or additions to documentation"},{"id":5176884231,"node_id":"LA_kwDOIwHgl88AAAABNJD8Bw","url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/labels/Java","name":"Java","color":"57627E","default":false,"description":""},{"id":5176887291,"node_id":"LA_kwDOIwHgl88AAAABNJEH-w","url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/labels/Spring%20Boot","name":"Spring Boot","color":"10AE3D","default":false,"description":""}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2023-02-20T14:33:56Z","updated_at":"2024-04-12T08:48:45Z","closed_at":"2024-04-12T08:48:45Z","author_association":"OWNER","active_lock_reason":null,"body":"Mongo JPA, or the Java Persistence API, is a powerful tool that allows developers to interact with MongoDB databases using the standard JPA interface. JPA is a specification for object-relational mapping in Java, which means that it allows developers to map Java classes to database tables and perform CRUD (Create, Read, Update, Delete) operations on those tables using standard Java methods.\r\n\r\nMongoDB is a popular NoSQL database that is widely used in modern web applications due to its flexibility and scalability. With the rise of microservices architecture, many developers are turning to MongoDB as a preferred database solution. However, working with MongoDB can be challenging for developers who are not familiar with NoSQL concepts and query languages.\r\n\r\nThat's where Mongo JPA comes in. It provides a simple and intuitive way to work with MongoDB databases, allowing developers to focus on their business logic rather than database implementation details. By using Mongo JPA, developers can take advantage of the powerful features of MongoDB, such as schemaless data modeling, dynamic queries, and horizontal scaling.\r\n\r\nOne of the key benefits of using Mongo JPA is that it provides a consistent API for working with different types of databases, including relational databases and NoSQL databases. This means that developers can use the same Java code to interact with MongoDB and other databases, which can simplify their codebase and reduce the learning curve for new developers.\r\n\r\nAnother advantage of using Mongo JPA is that it supports the JPA Criteria API, which allows developers to create type-safe queries using Java code. This can help prevent errors and make code easier to maintain, especially for larger projects. Additionally, Mongo JPA supports advanced query features such as aggregation, sorting, and pagination, which can be challenging to implement using raw MongoDB queries.\r\n\r\nTo use Mongo JPA, developers can add the necessary dependencies to their project and create entity classes that map to MongoDB collections. They can then use standard JPA methods to interact with the database, such as `find` , `persist` , `merge` , and `remove`. Mongo JPA also provides annotations that can be used to define indexes, map embedded objects, and specify other database-related details.\r\nHere an example\r\n``` java\r\n@Entity\r\npublic class User {\r\n    \r\n    @Id\r\n    private String id;\r\n    \r\n    @Column(name = \"username\")\r\n    private String username;\r\n    \r\n    @Column(name = \"password\")\r\n    private String password;\r\n    \r\n    @Embedded\r\n    private Address address;\r\n    \r\n    // Getters and setters\r\n    \r\n    public String getId() {\r\n        return id;\r\n    }\r\n    \r\n    public void setId(String id) {\r\n        this.id = id;\r\n    }\r\n    \r\n    public String getUsername() {\r\n        return username;\r\n    }\r\n    \r\n    public void setUsername(String username) {\r\n        this.username = username;\r\n    }\r\n    \r\n    public String getPassword() {\r\n        return password;\r\n    }\r\n    \r\n    public void setPassword(String password) {\r\n        this.password = password;\r\n    }\r\n    \r\n    public Address getAddress() {\r\n        return address;\r\n    }\r\n    \r\n    public void setAddress(Address address) {\r\n        this.address = address;\r\n    }\r\n    \r\n    // Embedded class\r\n    \r\n    @Embeddable\r\n    public static class Address {\r\n        \r\n        @Column(name = \"street\")\r\n        private String street;\r\n        \r\n        @Column(name = \"city\")\r\n        private String city;\r\n        \r\n        @Column(name = \"state\")\r\n        private String state;\r\n        \r\n        @Column(name = \"zip\")\r\n        private String zip;\r\n        \r\n        // Getters and setters\r\n        \r\n        public String getStreet() {\r\n            return street;\r\n        }\r\n        \r\n        public void setStreet(String street) {\r\n            this.street = street;\r\n        }\r\n        \r\n        public String getCity() {\r\n            return city;\r\n        }\r\n        \r\n        public void setCity(String city) {\r\n            this.city = city;\r\n        }\r\n        \r\n        public String getState() {\r\n            return state;\r\n        }\r\n        \r\n        public void setState(String state) {\r\n            this.state = state;\r\n        }\r\n        \r\n        public String getZip() {\r\n            return zip;\r\n        }\r\n        \r\n        public void setZip(String zip) {\r\n            this.zip = zip;\r\n        }\r\n    }\r\n}\r\n```\r\nIn this example, the `User` class is annotated with `@Entity`, which tells Mongo JPA that it should be mapped to a MongoDB collection. The `@Id` annotation is used to indicate that the `id` field is the primary key for the collection. The `@Column` annotation is used to specify the names of the fields in the collection.\r\nThe `Address` class is embedded in the `User` class using the `@Embedded` annotation. It is also annotated with `@Embeddable`, which indicates that it should be stored as part of the `User` document in the MongoDB collection.\r\n\r\nThe class above can be used to build a `MongoRepository`\r\n``` java\r\n@Repository\r\npublic interface UserRepository extends MongoRepository<User, String> {\r\n    \r\n    User findByUsername(String username);\r\n    \r\n    List<User> findByAddressCity(String city);\r\n    \r\n    @Query(\"{ 'address.state' : ?0 }\")\r\n    List<User> findByAddressState(String state);\r\n    \r\n    List<User> findByAddressStateAndAddressCity(String state, String city);\r\n    \r\n    default List<User> findUsersByCriteria(String state, String city) {\r\n        Criteria criteria = new Criteria();\r\n        \r\n        if (state != null && !state.isEmpty()) {\r\n            criteria = criteria.and(\"address.state\").is(state);\r\n        }\r\n        \r\n        if (city != null && !city.isEmpty()) {\r\n            criteria = criteria.and(\"address.city\").is(city);\r\n        }\r\n        \r\n        Query query = new Query(criteria);\r\n        return mongoTemplate.find(query, User.class);\r\n    }\r\n}\r\n```\r\nIn this example, the `findUsersByCriteria` method is a custom query that uses `Criteria` to build a dynamic query. `Criteria` is a flexible way to build complex queries with conditions that can change at runtime.\r\nThe method takes two parameters, `state` and `city`, which are used to build the `Criteria` object. The method first creates a new `Criteria` object and then adds conditions based on the values of `state` and `city`. If the `state` parameter is not null and not empty, it adds a condition to match the `state` field in the `address` object. If the `city` parameter is not null and not empty, it adds a condition to match the `city` field in the `address` object.\r\nFinally, the method creates a new `Query` object with the `Criteria` object and uses `MongoTemplate` to execute the query and return a list of `User` objects.\r\n\r\nIn conclusion, Mongo JPA is a valuable tool for developers who want to work with MongoDB databases using standard Java methods. It provides a consistent and intuitive API that can simplify code and reduce the learning curve for new developers. By leveraging the powerful features of MongoDB, developers can build scalable and flexible applications that can meet the demands of modern web development.","closed_by":{"login":"Pasquale-Favella","id":62385965,"node_id":"MDQ6VXNlcjYyMzg1OTY1","avatar_url":"https://avatars.githubusercontent.com/u/62385965?v=4","gravatar_id":"","url":"https://api.github.com/users/Pasquale-Favella","html_url":"https://github.com/Pasquale-Favella","followers_url":"https://api.github.com/users/Pasquale-Favella/followers","following_url":"https://api.github.com/users/Pasquale-Favella/following{/other_user}","gists_url":"https://api.github.com/users/Pasquale-Favella/gists{/gist_id}","starred_url":"https://api.github.com/users/Pasquale-Favella/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Pasquale-Favella/subscriptions","organizations_url":"https://api.github.com/users/Pasquale-Favella/orgs","repos_url":"https://api.github.com/users/Pasquale-Favella/repos","events_url":"https://api.github.com/users/Pasquale-Favella/events{/privacy}","received_events_url":"https://api.github.com/users/Pasquale-Favella/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/9/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/9/timeline","performed_via_github_app":null,"state_reason":"completed"},{"url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/8","repository_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io","labels_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/8/labels{/name}","comments_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/8/comments","events_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/8/events","html_url":"https://github.com/Pasquale-Favella/pasquale-favella.github.io/issues/8","id":1560080092,"node_id":"I_kwDOIwHgl85c_O7c","number":8,"title":"React with RXJS","user":{"login":"Pasquale-Favella","id":62385965,"node_id":"MDQ6VXNlcjYyMzg1OTY1","avatar_url":"https://avatars.githubusercontent.com/u/62385965?v=4","gravatar_id":"","url":"https://api.github.com/users/Pasquale-Favella","html_url":"https://github.com/Pasquale-Favella","followers_url":"https://api.github.com/users/Pasquale-Favella/followers","following_url":"https://api.github.com/users/Pasquale-Favella/following{/other_user}","gists_url":"https://api.github.com/users/Pasquale-Favella/gists{/gist_id}","starred_url":"https://api.github.com/users/Pasquale-Favella/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Pasquale-Favella/subscriptions","organizations_url":"https://api.github.com/users/Pasquale-Favella/orgs","repos_url":"https://api.github.com/users/Pasquale-Favella/repos","events_url":"https://api.github.com/users/Pasquale-Favella/events{/privacy}","received_events_url":"https://api.github.com/users/Pasquale-Favella/received_events","type":"User","site_admin":false},"labels":[{"id":4991782391,"node_id":"LA_kwDOIwHgl88AAAABKYiN9w","url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/labels/documentation","name":"documentation","color":"0075ca","default":true,"description":"Improvements or additions to documentation"},{"id":5011911244,"node_id":"LA_kwDOIwHgl88AAAABKruyTA","url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/labels/React","name":"React","color":"1d76db","default":false,"description":""},{"id":5012942463,"node_id":"LA_kwDOIwHgl88AAAABKstufw","url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/labels/Rxjs","name":"Rxjs","color":"f9d0c4","default":false,"description":""}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2023-01-27T16:49:00Z","updated_at":"2024-04-12T08:49:01Z","closed_at":"2024-04-12T08:49:01Z","author_association":"OWNER","active_lock_reason":null,"body":"Reactive programming is a programming paradigm that deals with data streams and the propagation of change. Reactive eXtensions for JavaScript (RxJS) is a library for reactive programming using observables in JavaScript. It can be used with React, a JavaScript library for building user interfaces, to handle asynchronous data and user interactions in a more efficient and elegant way.\r\n\r\nIn this article, we will explore how to use RxJS with React to handle asynchronous data and user interactions.\r\n\r\nFirst, let's understand what observables are. An observable is a stream of data that can be observed and acted upon. It is similar to a promise, but it can emit multiple values over time. An observer is an object that subscribes to an observable and receives notifications when the observable emits values.\r\n\r\nTo use RxJS with React, we first need to install it using npm or yarn:\r\n\r\n```\r\nnpm install rxjs\r\n```\r\n\r\nor\r\n\r\n```\r\nyarn add rxjs\r\n```\r\n\r\nNext, we can create an observable in a React component using the `of` method from the `rxjs` library. This method creates an observable that emits a single value. For example, we can create an observable that emits the current date and time every second:\r\n\r\n``` js\r\nimport { of, interval } from 'rxjs';\r\nimport { useEffect, useState } from 'react';\r\n\r\nconst Clock = () => {\r\n  const [time, setTime] = useState(new Date());\r\n  useEffect(() => {\r\n    const subscription = of(new Date())\r\n      .pipe(interval(1000))\r\n      .subscribe(time => setTime(time));\r\n    return () => {\r\n      subscription.unsubscribe();\r\n    }\r\n  }, []);\r\n  return <div>{time.toString()}</div>;\r\n}\r\n```\r\n\r\nIn this example, we use the `interval` operator from the `rxjs/operators` library to emit the current date and time every second. We also subscribe to the observable in the `useEffect` hook method and unsubscribe from it in the `useEffect` clean up function to prevent memory leaks.\r\n\r\nWe can also use observables to handle user interactions in React. For example, we can create an observable that emits events from a text input and use the `map` operator to transform the events into the current value of the input:\r\n\r\n``` js\r\nimport { fromEvent } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { useEffect, useState, useRef } from 'react';\r\n\r\nconst SearchInput = () => {\r\n  const [value, setValue] = useState('');\r\n  const inputRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const subscription = fromEvent(inputRef.current, 'input')\r\n      .pipe(map(event => event.target.value))\r\n      .subscribe(value => setValue(value));\r\n    return () => {\r\n      subscription.unsubscribe();\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <input ref={inputRef} />\r\n      <div>{value}</div>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n```\r\n\r\nuse the `map` operator to transform the events into the current value of the input and update the component's state accordingly.\r\n\r\nAnother useful operator for handling user interactions is the `debounceTime` operator. This operator delays the emission of values from an observable for a specified amount of time. This can be useful for implementing a search feature, for example, where we only want to perform the search after the user has stopped typing for a certain amount of time.\r\n``` js\r\nimport { fromEvent } from 'rxjs';\r\nimport { map, debounceTime } from 'rxjs/operators';\r\nimport { useEffect, useRef, useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst SearchInput = () => {\r\n  const inputRef = useRef(null);\r\n  const [searchResults, setSearchResults] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const subscription = fromEvent(inputRef.current, 'input')\r\n      .pipe(\r\n        map(event => event.target.value),\r\n        debounceTime(500)\r\n      )\r\n      .subscribe(value => search(value));\r\n    return () => {\r\n      subscription.unsubscribe();\r\n    }\r\n  }, []);\r\n\r\n  const search = async (value) => {\r\n    try {\r\n      const response = await axios.get(`https://jsonplaceholder.typicode.com/posts?title_like=${value}`);\r\n      setSearchResults(response.data);\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <input ref={inputRef} />\r\n      <div>\r\n        {searchResults.map(result => <div key={result.id}>{result.title}</div>)}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n```\r\n\r\nIn this example, we use the `debounceTime` operator to delay the emission of values from the input event observable by 500 milliseconds. This means that the search function will only be called when the user stops typing for half a second.\r\n\r\nRxJS also allows us to compose multiple observables together using operators like `merge`, `concat`, and `zip`. This can be useful for handling multiple asynchronous data sources or user interactions in a single component.\r\n\r\nIn conclusion, RxJS is a powerful library for reactive programming in JavaScript and can be used with React to handle asynchronous data and user interactions in a more efficient and elegant way. It provides a wide range of operators for transforming, filtering, and composing observables, making it a valuable tool for building complex and responsive user interfaces.","closed_by":{"login":"Pasquale-Favella","id":62385965,"node_id":"MDQ6VXNlcjYyMzg1OTY1","avatar_url":"https://avatars.githubusercontent.com/u/62385965?v=4","gravatar_id":"","url":"https://api.github.com/users/Pasquale-Favella","html_url":"https://github.com/Pasquale-Favella","followers_url":"https://api.github.com/users/Pasquale-Favella/followers","following_url":"https://api.github.com/users/Pasquale-Favella/following{/other_user}","gists_url":"https://api.github.com/users/Pasquale-Favella/gists{/gist_id}","starred_url":"https://api.github.com/users/Pasquale-Favella/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Pasquale-Favella/subscriptions","organizations_url":"https://api.github.com/users/Pasquale-Favella/orgs","repos_url":"https://api.github.com/users/Pasquale-Favella/repos","events_url":"https://api.github.com/users/Pasquale-Favella/events{/privacy}","received_events_url":"https://api.github.com/users/Pasquale-Favella/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/8/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/8/timeline","performed_via_github_app":null,"state_reason":"completed"},{"url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/5","repository_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io","labels_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/5/labels{/name}","comments_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/5/comments","events_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/5/events","html_url":"https://github.com/Pasquale-Favella/pasquale-favella.github.io/issues/5","id":1535204735,"node_id":"I_kwDOIwHgl85bgV1_","number":5,"title":"NGRX vs RXJS","user":{"login":"Pasquale-Favella","id":62385965,"node_id":"MDQ6VXNlcjYyMzg1OTY1","avatar_url":"https://avatars.githubusercontent.com/u/62385965?v=4","gravatar_id":"","url":"https://api.github.com/users/Pasquale-Favella","html_url":"https://github.com/Pasquale-Favella","followers_url":"https://api.github.com/users/Pasquale-Favella/followers","following_url":"https://api.github.com/users/Pasquale-Favella/following{/other_user}","gists_url":"https://api.github.com/users/Pasquale-Favella/gists{/gist_id}","starred_url":"https://api.github.com/users/Pasquale-Favella/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Pasquale-Favella/subscriptions","organizations_url":"https://api.github.com/users/Pasquale-Favella/orgs","repos_url":"https://api.github.com/users/Pasquale-Favella/repos","events_url":"https://api.github.com/users/Pasquale-Favella/events{/privacy}","received_events_url":"https://api.github.com/users/Pasquale-Favella/received_events","type":"User","site_admin":false},"labels":[{"id":4991782391,"node_id":"LA_kwDOIwHgl88AAAABKYiN9w","url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/labels/documentation","name":"documentation","color":"0075ca","default":true,"description":"Improvements or additions to documentation"},{"id":5011828087,"node_id":"LA_kwDOIwHgl88AAAABKrptdw","url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/labels/Angular","name":"Angular","color":"F85A56","default":false,"description":""},{"id":5012942463,"node_id":"LA_kwDOIwHgl88AAAABKstufw","url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/labels/Rxjs","name":"Rxjs","color":"f9d0c4","default":false,"description":""}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2023-01-16T16:28:43Z","updated_at":"2024-04-12T08:49:10Z","closed_at":"2024-04-12T08:49:10Z","author_association":"OWNER","active_lock_reason":null,"body":"NGRX is a popular library for managing the state of an Angular application. It is built on top of the RxJS library and uses the principles of reactive programming to make it easier to handle complex state management tasks.\r\n\r\nOne of the main advantages of NGRX over plain RxJS is that it provides a consistent and well-structured way to manage the state of an application. With NGRX, the state of the application is managed in a centralized store, which makes it easy to keep track of all the state changes and handle them in a predictable way.\r\n\r\nNGRX also provides a set of powerful tools for managing the state of an application, such as actions, reducers, and effects. Actions are used to describe the changes to the state, reducers are used to update the state based on the actions, and effects are used to handle side-effects, such as making an API call or navigating to a different page.\r\n\r\nAnother advantage of NGRX is that it is designed to work seamlessly with Angular. It uses Angular's change detection mechanism to automatically update the view when the state changes, and it also integrates with Angular's dependency injection system, which makes it easy to manage the state throughout the application.\r\n\r\nAdditionally, NGRX provides a set of powerful tools for debugging, testing, and performance optimization, such as the ability to log state changes, time-travel debugging, and memoized selectors.\r\n\r\nUsing plain RxJS:\r\n\r\n```\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\nconst counterSubject = new BehaviorSubject(0);\r\n\r\nfunction increment() {\r\n  const currentCount = counterSubject.getValue();\r\n  counterSubject.next(currentCount + 1);\r\n}\r\n\r\nfunction decrement() {\r\n  const currentCount = counterSubject.getValue();\r\n  counterSubject.next(currentCount - 1);\r\n}\r\n\r\ncounterSubject.subscribe(count => {\r\n  console.log(count);\r\n});\r\n```\r\nIn this example, a BehaviorSubject is used to manage the state of the counter. The BehaviorSubject is initialized with an initial value of 0. The increment and decrement functions are used to update the state by calling the next method on the BehaviorSubject and passing the new count.\r\n\r\nThe subscribe method is used to subscribe to the counterSubject and log the current count to the console whenever it changes.\r\n\r\nUsing NGRX:\r\n\r\n```\r\nimport { StoreModule, Store } from '@ngrx/store';\r\nimport { counterReducer } from './counter.reducer';\r\n\r\n@NgModule({\r\n  imports: [\r\n    StoreModule.forRoot({ count: counterReducer })\r\n  ]\r\n})\r\nexport class AppModule { }\r\n\r\nexport const increment = createAction('[Counter] Increment');\r\nexport const decrement = createAction('[Counter] Decrement');\r\n\r\n@Injectable()\r\nexport class CounterService {\r\n  count$ = this.store.pipe(select('count'));\r\n\r\n  constructor(private store: Store) { }\r\n\r\n  increment() {\r\n    this.store.dispatch(increment());\r\n  }\r\n\r\n  decrement() {\r\n    this.store.dispatch(decrement());\r\n  }\r\n}\r\n\r\n```\r\nIn this example, NGRX is used to manage the state of the counter. The StoreModule is imported from the @ngrx/store library and configured with a root reducer that handles the counter state.\r\n\r\nActions are defined using the createAction method, increment and decrement actions are used to update the state. The store is injected into a service, which has a count$ property that selects the count from the store and makes it available for subscription.\r\n\r\nThe increment and decrement methods dispatch the corresponding actions to the store, which causes the state to update.\r\n\r\nWith this example, you can see that NGRX provides a more structured way to manage the state of an application. It enforces a clear separation of concerns between the state, the actions that update the state, and the reducers that handle the actions. It also provides a powerful set of tools for debugging, testing, and performance optimization, such as the ability to log state changes, time-travel debugging, and memoized selectors.\r\n\r\nAdditionally, NGRX provides a built-in mechanism for handling async actions with the help of the @Effect decorator, which makes it easy to handle and manage async code in your application.\r\n\r\nIn summary, NGRX provides a powerful and well-structured way to manage the state of an Angular application, and it provides a set of powerful tools for managing complex state management tasks. It is built on","closed_by":{"login":"Pasquale-Favella","id":62385965,"node_id":"MDQ6VXNlcjYyMzg1OTY1","avatar_url":"https://avatars.githubusercontent.com/u/62385965?v=4","gravatar_id":"","url":"https://api.github.com/users/Pasquale-Favella","html_url":"https://github.com/Pasquale-Favella","followers_url":"https://api.github.com/users/Pasquale-Favella/followers","following_url":"https://api.github.com/users/Pasquale-Favella/following{/other_user}","gists_url":"https://api.github.com/users/Pasquale-Favella/gists{/gist_id}","starred_url":"https://api.github.com/users/Pasquale-Favella/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Pasquale-Favella/subscriptions","organizations_url":"https://api.github.com/users/Pasquale-Favella/orgs","repos_url":"https://api.github.com/users/Pasquale-Favella/repos","events_url":"https://api.github.com/users/Pasquale-Favella/events{/privacy}","received_events_url":"https://api.github.com/users/Pasquale-Favella/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/5/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/5/timeline","performed_via_github_app":null,"state_reason":"completed"},{"url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/4","repository_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io","labels_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/4/labels{/name}","comments_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/4/comments","events_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/4/events","html_url":"https://github.com/Pasquale-Favella/pasquale-favella.github.io/issues/4","id":1535086505,"node_id":"I_kwDOIwHgl85bf4-p","number":4,"title":"React Hooks - useReducer()","user":{"login":"Pasquale-Favella","id":62385965,"node_id":"MDQ6VXNlcjYyMzg1OTY1","avatar_url":"https://avatars.githubusercontent.com/u/62385965?v=4","gravatar_id":"","url":"https://api.github.com/users/Pasquale-Favella","html_url":"https://github.com/Pasquale-Favella","followers_url":"https://api.github.com/users/Pasquale-Favella/followers","following_url":"https://api.github.com/users/Pasquale-Favella/following{/other_user}","gists_url":"https://api.github.com/users/Pasquale-Favella/gists{/gist_id}","starred_url":"https://api.github.com/users/Pasquale-Favella/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Pasquale-Favella/subscriptions","organizations_url":"https://api.github.com/users/Pasquale-Favella/orgs","repos_url":"https://api.github.com/users/Pasquale-Favella/repos","events_url":"https://api.github.com/users/Pasquale-Favella/events{/privacy}","received_events_url":"https://api.github.com/users/Pasquale-Favella/received_events","type":"User","site_admin":false},"labels":[{"id":4991782391,"node_id":"LA_kwDOIwHgl88AAAABKYiN9w","url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/labels/documentation","name":"documentation","color":"0075ca","default":true,"description":"Improvements or additions to documentation"},{"id":5011911244,"node_id":"LA_kwDOIwHgl88AAAABKruyTA","url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/labels/React","name":"React","color":"1d76db","default":false,"description":""},{"id":5012912803,"node_id":"LA_kwDOIwHgl88AAAABKsr6ow","url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/labels/Hooks","name":"Hooks","color":"fbca04","default":false,"description":""}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2023-01-16T15:06:35Z","updated_at":"2024-04-12T08:49:17Z","closed_at":"2024-04-12T08:49:17Z","author_association":"OWNER","active_lock_reason":null,"body":"The useReducer hook in React is a way to manage the state of a component using a reducer function. A reducer function is a pure function that takes the current state and an action, and returns the next state.\r\n\r\nTo use the useReducer hook, you need to import it from the react library and pass it two arguments: a reducer function and an initial state. The reducer function should take the current state and an action as arguments, and return the next state.\r\n\r\nHere is an example of how to use the useReducer hook to manage the state of a counter component:\r\n\r\n``` js\r\nimport { useReducer } from 'react';\r\n\r\nfunction reducer(state, action) {\r\n  switch (action.type) {\r\n    case 'increment':\r\n      return { count: state.count + 1 };\r\n    case 'decrement':\r\n      return { count: state.count - 1 };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nfunction Counter() {\r\n  const [state, dispatch] = useReducer(reducer, { count: 0 });\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={() => dispatch({ type: 'decrement' })}>-</button>\r\n      <span>{state.count}</span>\r\n      <button onClick={() => dispatch({ type: 'increment' })}>+</button>\r\n    </div>\r\n  );\r\n}\r\n\r\n```\r\nIn this example, the useReducer hook is used to manage the state of a counter component. The reducer function takes the current state and an action, and returns the next state based on the action type.\r\n\r\nThe initial state of the counter is passed to the useReducer hook as the second argument. In this case, the initial state is an object with a count property set to 0.\r\n\r\nThe useReducer hook returns an array with two elements: the current state, and a dispatch function. The dispatch function is used to update the state by passing an action to the reducer function.\r\n\r\nIn the example above, the dispatch function is passed to the onClick handlers of the + and - buttons. When the + button is clicked, the dispatch function is called with an action of type increment, which causes the reducer function to increment the count by 1. Similarly, when the - button is clicked, the dispatch function is called with an action of type decrement, which causes the reducer function to decrement the count by 1.\r\n\r\nThe useReducer hook is a powerful way to manage the state of a component, as it allows you to separate the logic for updating the state from the component's render function. It also provides a predictable and consistent way to update the state, which can make debugging and testing easier.\r\n\r\n\r\n\r\n","closed_by":{"login":"Pasquale-Favella","id":62385965,"node_id":"MDQ6VXNlcjYyMzg1OTY1","avatar_url":"https://avatars.githubusercontent.com/u/62385965?v=4","gravatar_id":"","url":"https://api.github.com/users/Pasquale-Favella","html_url":"https://github.com/Pasquale-Favella","followers_url":"https://api.github.com/users/Pasquale-Favella/followers","following_url":"https://api.github.com/users/Pasquale-Favella/following{/other_user}","gists_url":"https://api.github.com/users/Pasquale-Favella/gists{/gist_id}","starred_url":"https://api.github.com/users/Pasquale-Favella/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Pasquale-Favella/subscriptions","organizations_url":"https://api.github.com/users/Pasquale-Favella/orgs","repos_url":"https://api.github.com/users/Pasquale-Favella/repos","events_url":"https://api.github.com/users/Pasquale-Favella/events{/privacy}","received_events_url":"https://api.github.com/users/Pasquale-Favella/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/4/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/4/timeline","performed_via_github_app":null,"state_reason":"completed"},{"url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/3","repository_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io","labels_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/3/labels{/name}","comments_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/3/comments","events_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/3/events","html_url":"https://github.com/Pasquale-Favella/pasquale-favella.github.io/issues/3","id":1534783778,"node_id":"I_kwDOIwHgl85bevEi","number":3,"title":"React Query - The basics","user":{"login":"Pasquale-Favella","id":62385965,"node_id":"MDQ6VXNlcjYyMzg1OTY1","avatar_url":"https://avatars.githubusercontent.com/u/62385965?v=4","gravatar_id":"","url":"https://api.github.com/users/Pasquale-Favella","html_url":"https://github.com/Pasquale-Favella","followers_url":"https://api.github.com/users/Pasquale-Favella/followers","following_url":"https://api.github.com/users/Pasquale-Favella/following{/other_user}","gists_url":"https://api.github.com/users/Pasquale-Favella/gists{/gist_id}","starred_url":"https://api.github.com/users/Pasquale-Favella/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Pasquale-Favella/subscriptions","organizations_url":"https://api.github.com/users/Pasquale-Favella/orgs","repos_url":"https://api.github.com/users/Pasquale-Favella/repos","events_url":"https://api.github.com/users/Pasquale-Favella/events{/privacy}","received_events_url":"https://api.github.com/users/Pasquale-Favella/received_events","type":"User","site_admin":false},"labels":[{"id":4991782391,"node_id":"LA_kwDOIwHgl88AAAABKYiN9w","url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/labels/documentation","name":"documentation","color":"0075ca","default":true,"description":"Improvements or additions to documentation"},{"id":5011911244,"node_id":"LA_kwDOIwHgl88AAAABKruyTA","url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/labels/React","name":"React","color":"1d76db","default":false,"description":""}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2023-01-16T11:38:37Z","updated_at":"2024-04-12T08:49:23Z","closed_at":"2024-04-12T08:49:23Z","author_association":"OWNER","active_lock_reason":null,"body":"React Query is a powerful library for managing the caching and fetching of data in a React application. It provides a set of hooks that can be used to easily fetch and cache data, as well as automatically manage the stale-while-revalidate caching strategy.\r\n\r\nOne of the main features of React Query is its caching functionality. By default, React Query will cache the data for each unique query that is made and automatically serve the cached data if the same query is made again. Additionally, React Query will automatically check for updates to the data and refresh the cache if necessary.\r\n\r\nTo use React Query in a React application, you first need to install the library.\r\n\r\n```\r\nnpm install react-query\r\n```\r\nThen you can use the useQuery hook to fetch and cache data.\r\n\r\n``` js\r\nimport { useQuery } from 'react-query'\r\n\r\nfunction MyComponent() {\r\n  const { data, status } = useQuery('users', async () => {\r\n    const response = await fetch('https://jsonplaceholder.typicode.com/users')\r\n    return response.json()\r\n  })\r\n\r\n  if (status === 'loading') {\r\n    return <div>Loading...</div>\r\n  }\r\n\r\n  return (\r\n    <ul>\r\n      {data.map(user => (\r\n        <li key={user.id}>{user.name}</li>\r\n      ))}\r\n    </ul>\r\n  )\r\n}\r\n```\r\nIn this example, the useQuery hook is used to fetch a list of users from a JSON placeholder API. The first argument passed to useQuery is the key of the query, and the second argument is a function that returns a promise that resolves with the data.\r\n\r\nReact Query also provides a way to manually update the cache using the refetch function.\r\n\r\n``` js\r\nfunction MyComponent() {\r\n  const { data, status, refetch } = useQuery('users', async () => {\r\n    const response = await fetch('https://jsonplaceholder.typicode.com/users')\r\n    return response.json()\r\n  })\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={() => refetch()}>Refetch</button>\r\n      ...\r\n    </div>\r\n  )\r\n}\r\n```\r\nIn this example, the refetch function is passed to a button's onClick, which will allow the user to manually refresh the data.\r\n\r\nReact Query also provides a lot of other functionality such as manual invalidation of cache, setting custom cache policies etc. With React Query, it becomes easy to handle caching and fetching of data in a React application, resulting in better performance and user experience.","closed_by":{"login":"Pasquale-Favella","id":62385965,"node_id":"MDQ6VXNlcjYyMzg1OTY1","avatar_url":"https://avatars.githubusercontent.com/u/62385965?v=4","gravatar_id":"","url":"https://api.github.com/users/Pasquale-Favella","html_url":"https://github.com/Pasquale-Favella","followers_url":"https://api.github.com/users/Pasquale-Favella/followers","following_url":"https://api.github.com/users/Pasquale-Favella/following{/other_user}","gists_url":"https://api.github.com/users/Pasquale-Favella/gists{/gist_id}","starred_url":"https://api.github.com/users/Pasquale-Favella/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Pasquale-Favella/subscriptions","organizations_url":"https://api.github.com/users/Pasquale-Favella/orgs","repos_url":"https://api.github.com/users/Pasquale-Favella/repos","events_url":"https://api.github.com/users/Pasquale-Favella/events{/privacy}","received_events_url":"https://api.github.com/users/Pasquale-Favella/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/3/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/3/timeline","performed_via_github_app":null,"state_reason":"completed"},{"url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/1","repository_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io","labels_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/1/labels{/name}","comments_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/1/comments","events_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/1/events","html_url":"https://github.com/Pasquale-Favella/pasquale-favella.github.io/issues/1","id":1527516789,"node_id":"I_kwDOIwHgl85bDA51","number":1,"title":"Angular Observables","user":{"login":"Pasquale-Favella","id":62385965,"node_id":"MDQ6VXNlcjYyMzg1OTY1","avatar_url":"https://avatars.githubusercontent.com/u/62385965?v=4","gravatar_id":"","url":"https://api.github.com/users/Pasquale-Favella","html_url":"https://github.com/Pasquale-Favella","followers_url":"https://api.github.com/users/Pasquale-Favella/followers","following_url":"https://api.github.com/users/Pasquale-Favella/following{/other_user}","gists_url":"https://api.github.com/users/Pasquale-Favella/gists{/gist_id}","starred_url":"https://api.github.com/users/Pasquale-Favella/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Pasquale-Favella/subscriptions","organizations_url":"https://api.github.com/users/Pasquale-Favella/orgs","repos_url":"https://api.github.com/users/Pasquale-Favella/repos","events_url":"https://api.github.com/users/Pasquale-Favella/events{/privacy}","received_events_url":"https://api.github.com/users/Pasquale-Favella/received_events","type":"User","site_admin":false},"labels":[{"id":4991782391,"node_id":"LA_kwDOIwHgl88AAAABKYiN9w","url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/labels/documentation","name":"documentation","color":"0075ca","default":true,"description":"Improvements or additions to documentation"},{"id":5011828087,"node_id":"LA_kwDOIwHgl88AAAABKrptdw","url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/labels/Angular","name":"Angular","color":"F85A56","default":false,"description":""},{"id":5012942463,"node_id":"LA_kwDOIwHgl88AAAABKstufw","url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/labels/Rxjs","name":"Rxjs","color":"f9d0c4","default":false,"description":""}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2023-01-10T14:44:04Z","updated_at":"2024-04-12T08:49:31Z","closed_at":"2024-04-12T08:49:31Z","author_association":"OWNER","active_lock_reason":null,"body":"An Observable in Angular is a powerful way to handle asynchronous data streams. It is a part of the RxJS library, which is a collection of libraries for reactive programming in JavaScript.\r\n\r\nAn Observable is a stream of data that can emit multiple values over time. It is similar to a Promise, but it can emit multiple values over time, rather than just a single value like a Promise does.\r\n\r\nIn Angular, an Observable can be used to handle HTTP requests, WebSockets, and other asynchronous data streams. For example, an Observable can be used to subscribe to a data stream from an API and receive new data as it becomes available.\r\n\r\nTo create an Observable in Angular, you can use the of() or from() methods provided by the RxJS library. These methods take an array or a promise as an argument and return an Observable that will emit the values of the array or the resolved value of the promise.\r\n\r\nHere is an example of how to create an Observable that emits an array of values:\r\n\r\n``` js\r\nimport { of } from 'rxjs';\r\n```\r\n\r\nconst myObservable = of([1, 2, 3]);\r\nYou can then subscribe to the Observable using the subscribe() method. This method takes a callback function as an argument, which will be called every time a new value is emitted by the Observable.\r\n\r\nHere is an example of how to subscribe to the myObservable Observable and log the emitted values to the console:\r\n\r\n``` js\r\nmyObservable.subscribe(val => console.log(val));\r\n```\r\nYou can also use the pipe() method to apply operators to the Observable. Operators are functions that can be used to transform, filter, or aggregate the data emitted by the Observable.\r\n\r\nHere is an example of how to use the map() operator to transform the emitted values:\r\n\r\n``` js\r\nimport { map } from 'rxjs/operators';\r\n\r\nmyObservable.pipe(map(val => val * 2)).subscribe(val => console.log(val));\r\n```\r\nIn this example, the map() operator is used to multiply each emitted value by 2 before it is passed to the subscribe() method.\r\n\r\nOverall, Observables in Angular provide a powerful and flexible way to handle asynchronous data streams, and can be used to handle a wide variety of use cases, from simple event handling to complex data processing.","closed_by":{"login":"Pasquale-Favella","id":62385965,"node_id":"MDQ6VXNlcjYyMzg1OTY1","avatar_url":"https://avatars.githubusercontent.com/u/62385965?v=4","gravatar_id":"","url":"https://api.github.com/users/Pasquale-Favella","html_url":"https://github.com/Pasquale-Favella","followers_url":"https://api.github.com/users/Pasquale-Favella/followers","following_url":"https://api.github.com/users/Pasquale-Favella/following{/other_user}","gists_url":"https://api.github.com/users/Pasquale-Favella/gists{/gist_id}","starred_url":"https://api.github.com/users/Pasquale-Favella/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Pasquale-Favella/subscriptions","organizations_url":"https://api.github.com/users/Pasquale-Favella/orgs","repos_url":"https://api.github.com/users/Pasquale-Favella/repos","events_url":"https://api.github.com/users/Pasquale-Favella/events{/privacy}","received_events_url":"https://api.github.com/users/Pasquale-Favella/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/1/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/1/timeline","performed_via_github_app":null,"state_reason":"completed"}]},"__N_SSG":true}