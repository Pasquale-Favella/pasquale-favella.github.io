{"pageProps":{"content":"This article will delve into the seamless fusion of Angular Signals and RxJS, highlighting how these two technologies can effortlessly blend together, showcasing that RxJS continues to shine brightly in their combined usage.\r\n\r\n## Initial Setup\r\n```html\r\n <input type=\"text\" (keyup)=\"search($event)\" />\r\n```\r\n*just an input with a keyup event.*\r\n```typescript\r\n export class AppComponent {\r\n  http = inject(HttpClient);\r\n\r\n  search(event: Event) {\r\n    const value = (event.target as HTMLInputElement).value;\r\n  }\r\n}\r\n```\r\nInside our class has been injected `HttpClient` and created a search function which gets a value of the input but doesn't do anything else.\r\n\r\n## Implementing API call\r\n\r\nNow, the challenge lies in implementing the retrieval of data from the API both upon initialization and after entering text into the input. We aim to incorporate debouncing to prevent excessive API calls, ensuring that we don't overlook any submitted values already present.\r\n\r\n> This is exactly the case where `RxJS` shines in comparison to signals.\r\nWhat we are getting from signals is simply a state to read or update the value and computed which returns some value based on another signal. The last thing that we get from signals is effect which allows us to do something when our signal is changed.\r\n\r\nThis is not what we need for our case here. We have the case where RxJS can help us a lot.\r\n```typescript\r\nexport class AppComponent {\r\n  ...\r\n  searchSig = signal<string>('');\r\n\r\n  search(event: Event) {\r\n    const value = (event.target as HTMLInputElement).value;\r\n    this.searchSig.set(value);\r\n  }\r\n}\r\n```\r\nOur first step here is to create a `signal` which stores our search value. Now we can update this `signal` when we change the input with `set` function.\r\n\r\nBut it is not all. We want to make an API call every single time when we change our search. The main problem is that we can't write this code with signal effectively. Now we have a function in Angular which allows us to transform `signal` to the `observable`.\r\n```typescript\r\nimport { toObservable, toSignal } from '@angular/core/rxjs-interop';\r\n\r\nexport class AppComponent {\r\n  ...\r\n  searchSig = signal<string>('');\r\n  articles$ = toObservable(this.searchSig).pipe(\r\n    debounceTime(300),\r\n    distinctUntilChanged(),\r\n    switchMap((searchTerm) =>\r\n      this.http.get<Article[]>(\r\n        `http://localhost:8080/articles?title=${searchTerm}`\r\n      )\r\n    )\r\n  );\r\n}\r\n```\r\nIn this instance, we employed the `toObservable` function to convert our `signal` into an `observable`, enabling the application of `RxJS` functions. We incorporated `debounceTime` to prevent excessive API calls, `distinctUntilChanged` to avoid redundant API calls with identical data, and `switchMap` to execute an HTTP request\r\n>So this code just creates an observable from the signal.\r\n\r\nThis doesn't signal a return to our previous less efficient practices, such as relying on async pipes or subscriptions. We're determined to steer clear of reverting to the digest cycle and the inherent issues it brings.\r\n```typescript\r\nexport class AppComponent {\r\n  ...\r\n  articlesSig = toSignal(this.articles$);\r\n}\r\n```\r\nThis is why here we created one more property which is a `signal`. We used `toSignal` function to convert our RxJS `observable` to a signal. Now we can safely use it inside our markup is a normal signal.\r\n```html\r\n<div *ngFor=\"let article of articlesSig()\">\r\n  {{ article.title }}\r\n</div>\r\n```\r\n*or with the new built-in for loop.*\r\n```html\r\n@for (article of articlesSig(); track article.title) {\r\n  {{ article.title }}\r\n} \r\n```\r\nWe can see that our API call is done and we rendered a list of article. When we type something it refetches the data with the rules that we wrote in RxJS.\r\n\r\n## Conclusion\r\n\r\nthis article has explored the harmonious integration of Angular Signals and RxJS, demonstrating their synergistic collaboration. By showcasing the effective fusion of these two technologies, we've underscored the ongoing strength of RxJS within this combined usage.\r\nHappy coding!","slug":"16","title":"Angular Signals with RxJS - A practical example","meta_description":"This article will delve into the seamless fusion of Angular Signals and RxJS, highlighting how these two technologies can effortlessly blend together, showcasing that RxJS continues to shine brightly in their combined usage","tags":["Angular","Rxjs"]},"__N_SSG":true}