{"pageProps":{"posts":[{"url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/27","repository_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io","labels_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/27/labels{/name}","comments_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/27/comments","events_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/27/events","html_url":"https://github.com/Pasquale-Favella/pasquale-favella.github.io/issues/27","id":2795160915,"node_id":"I_kwDOIwHgl86mmsVT","number":27,"title":"Next.js Server Actions for Data Fetching: Performance Issues and Solutions","user":{"login":"Pasquale-Favella","id":62385965,"node_id":"MDQ6VXNlcjYyMzg1OTY1","avatar_url":"https://avatars.githubusercontent.com/u/62385965?v=4","gravatar_id":"","url":"https://api.github.com/users/Pasquale-Favella","html_url":"https://github.com/Pasquale-Favella","followers_url":"https://api.github.com/users/Pasquale-Favella/followers","following_url":"https://api.github.com/users/Pasquale-Favella/following{/other_user}","gists_url":"https://api.github.com/users/Pasquale-Favella/gists{/gist_id}","starred_url":"https://api.github.com/users/Pasquale-Favella/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Pasquale-Favella/subscriptions","organizations_url":"https://api.github.com/users/Pasquale-Favella/orgs","repos_url":"https://api.github.com/users/Pasquale-Favella/repos","events_url":"https://api.github.com/users/Pasquale-Favella/events{/privacy}","received_events_url":"https://api.github.com/users/Pasquale-Favella/received_events","type":"User","user_view_type":"public","site_admin":false},"labels":[{"id":4991782391,"node_id":"LA_kwDOIwHgl88AAAABKYiN9w","url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/labels/documentation","name":"documentation","color":"0075ca","default":true,"description":"Improvements or additions to documentation"},{"id":5011911244,"node_id":"LA_kwDOIwHgl88AAAABKruyTA","url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/labels/React","name":"React","color":"1d76db","default":false,"description":""},{"id":5744992208,"node_id":"LA_kwDOIwHgl88AAAABVm2f0A","url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/labels/Next%20JS","name":"Next JS","color":"5319e7","default":false,"description":""}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2025-01-17T10:52:41Z","updated_at":"2025-01-21T11:54:44Z","closed_at":"2025-01-21T09:37:33Z","author_association":"OWNER","active_lock_reason":null,"sub_issues_summary":{"total":0,"completed":0,"percent_completed":0},"body":"Next.js Server Actions provide a groundbreaking method for integrating server-side operations directly into React applications, enabling optimized workflows for server logic and enhancing Next.js server-side integration. While they simplify workflows for mutations and server logic, their use for data fetching can present significant performance challenges. This guide explores these challenges, provides benchmark comparisons, and offers actionable solutions to optimize performance.\n\n## Understanding Next.js Server Actions\n\nNext.js Server Actions have revolutionized server-side operations in React applications. Designed primarily for form handling and data mutations, they are increasingly used for data fetchingâ€”but not without challenges.\n\n### What Are Server Actions?\n\nServer Actions in Next.js 14+ enable direct server-side operations from components. Their primary use cases include:\n\n* Form submissions\n* Data mutations\n* Server-side state management\n* Database operations\n\nServer Actions promise simplicity by integrating server logic seamlessly with React components. However, using them for data fetching introduces critical performance challenges.\n\nLearn more about Server Actions in the official [Next.js documentation](https://nextjs.org/docs).\n\n## Performance Problems with Server Actions\n\n### HTTP Method Concerns\n\nServer Actions exclusively use POST requests, leading to several challenges when applied to data fetching:\n\n* REST Principle Violation: GET requests are conventionally used for retrieving data. Using POST disrupts standard practices.\n* Caching Complexity: Caching mechanisms for GET requests, such as HTTP caching or CDN layers, are inherently easier to implement compared to POST.\n* Reduced API Intuition: POST-based data fetching can make APIs less predictable and harder to document for team collaboration.\n\n### Sequential Execution Problem\n\nA significant performance bottleneck arises when multiple Server Actions are invoked concurrently. Here's a common scenario:\n\n```typescript\n'use server';\n\nexport async function fetchData({ id, delay }: { id: number; delay: number }) {\n  await new Promise((resolve) => setTimeout(resolve, delay));\n  return { id };\n}\n```\n\nExecuting this function for multiple requests:\n\n```typescript\n// These execute sequentially despite Promise.all\nconst results = await Promise.all([\n  fetchData({ id: 1, delay: 1000 }),\n  fetchData({ id: 2, delay: 1000 }),\n  fetchData({ id: 3, delay: 1000 })\n]);\n```\n\nThe expectation is concurrent execution, but the reality is sequential processing, dramatically increasing response times.\n\n### Benchmark Results\n\nTo quantify the performance of Server Actions, we conducted real-world testing with 10 concurrent requests, each with a 1000ms delay. The results:\n\n| Approach | Execution Time | Performance Impact |\n|----------|---------------|-------------------|\n| API Routes | 1,195 ms | Best Performance |\n| Concurrent Server Actions | 2,274 ms | 90% Improvement |\n| Default Server Actions | 11,444 ms | Baseline (Sequential) |\n\nKey Insights:\n* API Routes: Demonstrated near-ideal concurrent execution.\n* Concurrent Server Actions: Showed marked improvement over default Server Actions.\n* Default Server Actions: Suffered from severe sequential bottlenecks, rendering them impractical for high-performance needs.\n\n## Solutions and Best Practices\n\n### 1. Use API Routes for Data Fetching\n\nAPI Routes remain the gold standard for data fetching in Next.js. Here's a straightforward implementation:\n\n```typescript\n// app/api/route.ts\nimport { NextRequest } from 'next/server';\n\nexport async function GET(req: NextRequest) {\n  const n = req.nextUrl.searchParams.get('n');\n  const duration = Number(req.nextUrl.searchParams.get('duration'));\n  await new Promise((resolve) => setTimeout(resolve, duration));\n  return Response.json({ n });\n}\n```\n\nAdvantages:\n* Leverages HTTP GET, simplifying caching and alignment with REST principles.\n* Supports CDN optimizations out of the box.\n\n### 2. Adopt the Concurrent Server Actions Pattern\n\nThe concurrent pattern addresses the sequential execution issue inherent in default Server Actions. Unlike standard sequential processing, this approach utilizes concurrency to execute multiple actions simultaneously, significantly reducing overall execution time.\n\n#### How It Differs from Standard Approaches\n\nDefault Server Actions process tasks one after the other, even when wrapped in promises, due to the server's handling of individual requests. This leads to significant delays in scenarios requiring multiple actions. By contrast, the concurrent pattern ensures that all operations begin immediately, leveraging JavaScript's asynchronous capabilities to minimize delays.\n\nThis distinction is critical for developers aiming to optimize server actions in Next.js and ensure efficient handling of complex workflows. Implementing the concurrent pattern can dramatically enhance performance, particularly for applications requiring high-volume data interactions. A custom utility can enable concurrent execution of Server Actions.\n\nUtility Implementation:\n\n```typescript\nexport function createConcurrentAction<T, U extends unknown[]>(\n  action: (...args: U) => Promise<T>\n) {\n  return async (...args: U) => [action(...args)] as const;\n}\n\nexport async function runConcurrentAction<T>(\n  result: Promise<readonly [Promise<T>]>\n) {\n  return (await result)[0];\n}\n\nexport const nonBlockingFetch = createConcurrentAction(fetchData);\n```\n\nClient-Side Usage:\n\n```typescript\nconst results = await Promise.all([\n  runConcurrentAction(nonBlockingFetch({ id: 1, delay: 1000 })),\n  runConcurrentAction(nonBlockingFetch({ id: 2, delay: 1000 })),\n  runConcurrentAction(nonBlockingFetch({ id: 3, delay: 1000 }))\n]);\n```\n\nAdvantages:\n* Minimizes execution time for concurrent operations.\n* Maintains compatibility with Server Actions.\n\n### Implementation Guide\n\n#### Step 1: Define the Base Action\n\n```typescript\n'use server';\n\nexport async function processTask({ n, duration }: { n: number; duration: number }) {\n  console.log(`Running action ${n}...`);\n  await new Promise((resolve) => setTimeout(resolve, duration));\n  return { n };\n}\n```\n\n#### Step 2: Create a Concurrent Version\n\n```typescript\nexport const nonBlockingProcessTask = createConcurrentAction(processTask);\n```\n\n#### Step 3: Execute Client-Side\n\n```typescript\nconst results = await Promise.all([\n  runConcurrentAction(nonBlockingProcessTask({ n: 1, duration: 1000 })),\n  runConcurrentAction(nonBlockingProcessTask({ n: 2, duration: 1000 })),\n  runConcurrentAction(nonBlockingProcessTask({ n: 3, duration: 1000 }))\n]);\n```\n\n## Conclusion and Recommendations\n\nServer Actions present a transformative opportunity for integrating server-side logic into React applications, offering efficiency and flexibility. However, leveraging them for data fetching requires a nuanced understanding of their benefits and limitations to maximize their potential in Next.js workflows.\n\n### Best Practices\n\nFor Data Fetching:\n* Prefer API Routes for optimal performance and simplicity.\n* Use tools like React Query or SWR for client-side caching and revalidation.\n\nWhen Using Server Actions:\n* Apply the concurrent execution pattern to avoid sequential bottlenecks.\n* Recognize the inherent overhead (~1,000ms) compared to API Routes.\n* Consider batch operations for related requests.\n\nFor Sequential Operations:\n* Default Server Actions may suffice.\n* Explore batch endpoints for efficiency.\n\n### Key Takeaways\n\n* Mutations: Server Actions excel for data mutations but need optimization for fetching.\n* Concurrency: The concurrent pattern delivers a 90% performance improvement.\n* API Routes: Remain the go-to for data fetching due to their flexibility and speed.\n\nExplore related resources:\n\n[Github repository example](https://github.com/Pasquale-Favella/next-concurrent-server-actions)\n\n[React Query Documentation](https://tanstack.com/query/latest)\n\n[SWR Documentation](https://swr.vercel.app/)\n\n[Server Actions Guide](https://nextjs.org/docs/app/building-your-application/data-fetching/server-actions-and-mutations)\n\n[Next.js Data Fetching Practices](https://nextjs.org/docs/app/building-your-application/data-fetching/fetching)\n\nHappy coding!","closed_by":{"login":"Pasquale-Favella","id":62385965,"node_id":"MDQ6VXNlcjYyMzg1OTY1","avatar_url":"https://avatars.githubusercontent.com/u/62385965?v=4","gravatar_id":"","url":"https://api.github.com/users/Pasquale-Favella","html_url":"https://github.com/Pasquale-Favella","followers_url":"https://api.github.com/users/Pasquale-Favella/followers","following_url":"https://api.github.com/users/Pasquale-Favella/following{/other_user}","gists_url":"https://api.github.com/users/Pasquale-Favella/gists{/gist_id}","starred_url":"https://api.github.com/users/Pasquale-Favella/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Pasquale-Favella/subscriptions","organizations_url":"https://api.github.com/users/Pasquale-Favella/orgs","repos_url":"https://api.github.com/users/Pasquale-Favella/repos","events_url":"https://api.github.com/users/Pasquale-Favella/events{/privacy}","received_events_url":"https://api.github.com/users/Pasquale-Favella/received_events","type":"User","user_view_type":"public","site_admin":false},"reactions":{"url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/27/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/27/timeline","performed_via_github_app":null,"state_reason":"completed"},{"url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/26","repository_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io","labels_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/26/labels{/name}","comments_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/26/comments","events_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/26/events","html_url":"https://github.com/Pasquale-Favella/pasquale-favella.github.io/issues/26","id":2732784198,"node_id":"I_kwDOIwHgl86i4vpG","number":26,"title":"Angular NgRx Signal Store Resource: State Management Revolution","user":{"login":"Pasquale-Favella","id":62385965,"node_id":"MDQ6VXNlcjYyMzg1OTY1","avatar_url":"https://avatars.githubusercontent.com/u/62385965?v=4","gravatar_id":"","url":"https://api.github.com/users/Pasquale-Favella","html_url":"https://github.com/Pasquale-Favella","followers_url":"https://api.github.com/users/Pasquale-Favella/followers","following_url":"https://api.github.com/users/Pasquale-Favella/following{/other_user}","gists_url":"https://api.github.com/users/Pasquale-Favella/gists{/gist_id}","starred_url":"https://api.github.com/users/Pasquale-Favella/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Pasquale-Favella/subscriptions","organizations_url":"https://api.github.com/users/Pasquale-Favella/orgs","repos_url":"https://api.github.com/users/Pasquale-Favella/repos","events_url":"https://api.github.com/users/Pasquale-Favella/events{/privacy}","received_events_url":"https://api.github.com/users/Pasquale-Favella/received_events","type":"User","user_view_type":"public","site_admin":false},"labels":[{"id":4991782391,"node_id":"LA_kwDOIwHgl88AAAABKYiN9w","url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/labels/documentation","name":"documentation","color":"0075ca","default":true,"description":"Improvements or additions to documentation"},{"id":5011828087,"node_id":"LA_kwDOIwHgl88AAAABKrptdw","url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/labels/Angular","name":"Angular","color":"F85A56","default":false,"description":""},{"id":5012942463,"node_id":"LA_kwDOIwHgl88AAAABKstufw","url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/labels/Rxjs","name":"Rxjs","color":"f9d0c4","default":false,"description":""}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2024-12-11T11:59:49Z","updated_at":"2024-12-11T12:03:05Z","closed_at":"2024-12-11T12:03:05Z","author_association":"OWNER","active_lock_reason":null,"sub_issues_summary":{"total":0,"completed":0,"percent_completed":0},"body":"The Angular Resource API is an exciting new tool that simplifies state management in modern web applications. Paired with NgRx Signal Store, this powerful combination promises to revolutionize the way developers manage state, fetch data, and enhance performance in Angular applications. The integration of these tools provides businesses with a competitive advantage, streamlining workflows, reducing boilerplate code, and improving application performance.\r\n\r\nIn this article, weâ€™ll walk through how to leverage the **Resource API** along with NgRx Signal Store to build a state management solution that is both declarative and powerful, with minimal boilerplate and excellent developer ergonomics.\r\n\r\n## Why the Resource API?\r\n\r\nFor developers who have been managing state in Angular, the challenges are clear. From dealing with complex services, observables, and multiple action types, to handling data-fetching with external APIs, Angular developers often juggle many complexities. The **Resource API** is a leap forward by making asynchronous requests and state management simpler and more intuitive.\r\n\r\n### What Makes This Solution Powerful\r\n\r\n- **Declarative State Management**: Angular's new Resource API makes it easy to manage remote state and cache results with minimal configuration.\r\n- **Minimal Boilerplate**: Less configuration means more productivity. The Resource API and NgRx Signal Store integration reduce the amount of code developers need to write, focusing more on business logic.\r\n- **Type Safety**: Angular's modern tooling ensures that developers are working in a type-safe environment, reducing runtime errors.\r\n- **Reactive by Design**: The combination of NgRx Signal Store and the Resource API offers a reactive paradigm, aligning perfectly with Angularâ€™s change detection and reactivity model.\r\n\r\n## Implementation Deep Dive\r\n\r\nNow that we understand the power behind the **Resource API**, letâ€™s see how we can combine it with **NgRx Signal Store** for an intuitive, scalable state management solution.\r\n\r\n### Setting Up the Signal Store Feature with Resource API\r\n\r\n```typescript\r\nimport {\r\n  signalStoreFeature,\r\n  withMethods,\r\n  type EmptyFeatureResult,\r\n  type SignalStoreFeature,\r\n  type SignalStoreFeatureResult,\r\n  type Prettify,\r\n  type StateSignals,\r\n  type WritableStateSource,\r\n} from '@ngrx/signals';\r\nimport {\r\n  ResourceOptions,\r\n  ResourceRef,\r\n  resource,\r\n} from '@angular/core';\r\n\r\nconst lowerFirstLetter = <T extends string>(value: T): Uncapitalize<T> => {\r\n  if (typeof value !== 'string') {\r\n    return value;\r\n  }\r\n\r\n  const trimmed = value.trim();\r\n  const first: string = trimmed.charAt(0).toLowerCase();\r\n  const rest: string = trimmed.slice(1);\r\n\r\n  return `${first}${rest}` as Uncapitalize<T>;\r\n};\r\n\r\nexport type ResourceStore<Input extends SignalStoreFeatureResult> = Prettify<\r\n  StateSignals<Input['state']> & Input['computed'] & Input['methods'] & WritableStateSource<Prettify<Input['state']>>\r\n>;\r\n\r\nexport type CreateResourceFn<\r\n  TDataFn = unknown,\r\n  Input extends SignalStoreFeatureResult = SignalStoreFeatureResult,\r\n> = (store: ResourceStore<Input>) => () => ResourceOptions<TDataFn, unknown>;\r\n\r\nexport type ResourceProp<Name extends string> = `${Uncapitalize<Name>}Resource`;\r\n\r\nexport type ResourceMethod<TData = unknown> = (() => ResourceRef<TData>) &\r\n  ResourceRef<TData>;\r\n\r\nexport const withResourceFeature = <\r\n  Name extends string,\r\n  TDataFn = unknown,\r\n  TData = TDataFn,\r\n  Input extends SignalStoreFeatureResult = SignalStoreFeatureResult,\r\n>(\r\n  name: Name,\r\n  createResourceFn: CreateResourceFn<TData, NoInfer<Input>>,\r\n): SignalStoreFeature<\r\n  Input,\r\n  EmptyFeatureResult & { methods: Record<ResourceProp<NoInfer<Name>>, ResourceMethod<NoInfer<TData>>> }\r\n> => {\r\n\r\n  return signalStoreFeature(\r\n    withMethods((store) => {\r\n\r\n      const resourceOptions = createResourceFn(store as ResourceStore<NoInfer<Input>>)\r\n      const resourceTarget = resource(resourceOptions());\r\n\r\n      const prop: ResourceProp<NoInfer<Name>> = `${lowerFirstLetter(name)}Resource`;\r\n\r\n      return {\r\n        [prop]: new Proxy(() => resourceTarget, {\r\n          get: (_, prop) => Reflect.get(resourceTarget, prop),\r\n          has: (_, prop) => Reflect.has(resourceTarget, prop),\r\n        }),\r\n      } as Record<ResourceProp<NoInfer<Name>>, ResourceMethod<NoInfer<TData>>>;\r\n    }),\r\n  )\r\n};\r\n```\r\n\r\n### Creating the Store with Resource Feature\r\n\r\nNext, letâ€™s create a store with the **Resource API** to manage remote data:\r\n\r\n```typescript\r\nimport { patchState, signalStore, withMethods, withState } from '@ngrx/signals';\r\nimport { withResourceFeature } from '../store/with-resource.feature';\r\nimport { JsonPipe } from '@angular/common';\r\n\r\nconst PostStore = signalStore(\r\n  withState({\r\n    postId: 1,\r\n  }),\r\n  withMethods(store => ({\r\n    nextPost : () => {\r\n      patchState(store, (state) => ({\r\n        postId: state.postId > 9 ? 1 : state.postId + 1\r\n      }));\r\n    }\r\n  })),\r\n  withResourceFeature('postId', (store) => {\r\n    return () => {\r\n      return {\r\n        request: () => store.postId(),\r\n        loader: async ({request: postId, abortSignal }) => {\r\n          const API_URL = 'https://jsonplaceholder.typicode.com'\r\n\r\n          const response = await fetch(`${API_URL}/posts/${postId}`, {\r\n            signal: abortSignal,\r\n          });\r\n\r\n          if(!response.ok) throw new Error(`Error fetching post id: ${postId}`);\r\n\r\n          const jsonResponse = await response.json();\r\n          return jsonResponse as {\r\n            userId: number;\r\n            id: number;\r\n            title: string;\r\n            body: string;\r\n          };\r\n        }\r\n      };\r\n    };\r\n  })\r\n);\r\n```\r\n\r\n### Component Integration\r\n\r\nNow, letâ€™s wire everything up into a component where we display the fetched data:\r\n\r\n```typescript\r\n@Component({\r\n  selector: 'app-post-details',\r\n  standalone: true,\r\n  providers: [PostStore],\r\n  imports: [JsonPipe],\r\n  template: `\r\n    @let post = store.postIdResource();\r\n\r\n    @if(post.isLoading()) {\r\n      <div>Loading...</div>\r\n    }\r\n    @if(post.error()) {\r\n      <div>Error</div>\r\n    }\r\n    @if(post.value()) {\r\n      <pre>{{ post.value() | json }}</pre>\r\n    }\r\n\r\n    <button (click)=\"store.nextPost()\">Fetch Next Post</button>\r\n    <button (click)=\"post.reload()\">Refetch Post</button>\r\n  `,\r\n})\r\nexport class ProductDetailsComponent {\r\n  readonly store = inject(PostStore);\r\n}\r\n```\r\n\r\n## Real-World Benefits\r\n\r\n1. **Simplified State Logic**: Less code, more functionality.\r\n2. **Optimized Performance**: Built-in caching and background updates.\r\n3. **Easier Debugging**: Clear, predictable state transitions.\r\n4. **Faster Development**: Focus on logic, not configuration.\r\n\r\n## Potential Pitfalls to Watch\r\n\r\n- Always use `inject()` for service dependencies.\r\n- Leverage `ChangeDetectionStrategy.OnPush` religiously.\r\n- Handle error states gracefully.\r\n\r\n## Wrapping Up\r\n\r\nWith the **Resource API** in Angular, we are not just looking at a new featureâ€”it's a paradigm shift for how we manage state and fetch data. Combining it with **NgRx Signal Store** enables developers to build more reactive, efficient, and maintainable applications with minimal effort. As Angular continues to innovate, tools like this will help shape the future of web development.\r\n\r\n**Happy Coding!**\r\n","closed_by":{"login":"Pasquale-Favella","id":62385965,"node_id":"MDQ6VXNlcjYyMzg1OTY1","avatar_url":"https://avatars.githubusercontent.com/u/62385965?v=4","gravatar_id":"","url":"https://api.github.com/users/Pasquale-Favella","html_url":"https://github.com/Pasquale-Favella","followers_url":"https://api.github.com/users/Pasquale-Favella/followers","following_url":"https://api.github.com/users/Pasquale-Favella/following{/other_user}","gists_url":"https://api.github.com/users/Pasquale-Favella/gists{/gist_id}","starred_url":"https://api.github.com/users/Pasquale-Favella/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Pasquale-Favella/subscriptions","organizations_url":"https://api.github.com/users/Pasquale-Favella/orgs","repos_url":"https://api.github.com/users/Pasquale-Favella/repos","events_url":"https://api.github.com/users/Pasquale-Favella/events{/privacy}","received_events_url":"https://api.github.com/users/Pasquale-Favella/received_events","type":"User","user_view_type":"public","site_admin":false},"reactions":{"url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/26/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/26/timeline","performed_via_github_app":null,"state_reason":"completed"},{"url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/25","repository_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io","labels_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/25/labels{/name}","comments_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/25/comments","events_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/25/events","html_url":"https://github.com/Pasquale-Favella/pasquale-favella.github.io/issues/25","id":2704416388,"node_id":"I_kwDOIwHgl86hMh6E","number":25,"title":"Angular Signal Store Query: A Glimpse into the Future","user":{"login":"Pasquale-Favella","id":62385965,"node_id":"MDQ6VXNlcjYyMzg1OTY1","avatar_url":"https://avatars.githubusercontent.com/u/62385965?v=4","gravatar_id":"","url":"https://api.github.com/users/Pasquale-Favella","html_url":"https://github.com/Pasquale-Favella","followers_url":"https://api.github.com/users/Pasquale-Favella/followers","following_url":"https://api.github.com/users/Pasquale-Favella/following{/other_user}","gists_url":"https://api.github.com/users/Pasquale-Favella/gists{/gist_id}","starred_url":"https://api.github.com/users/Pasquale-Favella/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Pasquale-Favella/subscriptions","organizations_url":"https://api.github.com/users/Pasquale-Favella/orgs","repos_url":"https://api.github.com/users/Pasquale-Favella/repos","events_url":"https://api.github.com/users/Pasquale-Favella/events{/privacy}","received_events_url":"https://api.github.com/users/Pasquale-Favella/received_events","type":"User","user_view_type":"public","site_admin":false},"labels":[{"id":4991782391,"node_id":"LA_kwDOIwHgl88AAAABKYiN9w","url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/labels/documentation","name":"documentation","color":"0075ca","default":true,"description":"Improvements or additions to documentation"},{"id":5011828087,"node_id":"LA_kwDOIwHgl88AAAABKrptdw","url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/labels/Angular","name":"Angular","color":"F85A56","default":false,"description":""},{"id":5012942463,"node_id":"LA_kwDOIwHgl88AAAABKstufw","url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/labels/Rxjs","name":"Rxjs","color":"f9d0c4","default":false,"description":""}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2024-11-29T08:52:44Z","updated_at":"2024-11-29T13:13:18Z","closed_at":"2024-11-29T13:13:18Z","author_association":"OWNER","active_lock_reason":null,"sub_issues_summary":{"total":0,"completed":0,"percent_completed":0},"body":"Enter NgRx Signal Store and Tanstack Queryâ€”a powerful integration that simplifies state management and data fetching while embracing Angular's reactive programming philosophy, allowing to streamline workflows, reduce boilerplate, and improve developer productivityâ€”all while enhancing application performance.\r\n\r\n## The State Management Dilemma\r\n\r\nFrontend developers know the drill. You start with simple state management, and before you know it, you're drowning in complex reducers, endless action types, and convoluted data flows. RxJS simplifies reactivity, but it often adds its own layer of complexity.\r\n\r\n### What Makes This Solution Powerful\r\n\r\n- **Reactive Signals**: Angular's new primitive that changes the game\r\n- **Declarative Data Fetching**: Say goodbye to async complexity\r\n- **Minimal Boilerplate**: Write less, do more\r\n- **Type Safety**: Catch issues before they become problems\r\n\r\n## Implementation Deep Dive\r\n\r\nIâ€™ll walk you through how to implement this state management approach step by step.\r\n\r\n### Creating a Powerful Query Integration Utility\r\n\r\nHere's the code that bridges Signal Store and TanStack Query:\r\n\r\n```typescript\r\nimport {\r\n  type EmptyFeatureResult,\r\n  signalStoreFeature,\r\n  type SignalStoreFeature,\r\n  type SignalStoreFeatureResult,\r\n  withMethods,\r\n  type Prettify,\r\n  type StateSignals,\r\n  type WritableStateSource,\r\n} from '@ngrx/signals';\r\n\r\nimport {\r\n  type CreateQueryOptions,\r\n  type CreateQueryResult,\r\n  injectQuery, type QueryKey \r\n} from '@tanstack/angular-query-experimental';\r\n\r\nconst lowerFirstLetter = <T extends string>(value: T): Uncapitalize<T> => {\r\n  if (typeof value !== 'string') {\r\n    return value;\r\n  }\r\n\r\n  const trimmed = value.trim();\r\n\r\n  const first: string = trimmed.charAt(0).toLowerCase();\r\n  const rest: string = trimmed.slice(1);\r\n\r\n  return `${first}${rest}` as Uncapitalize<T>;\r\n};\r\n\r\nexport type QueryStore<Input extends SignalStoreFeatureResult> = Prettify<\r\n  StateSignals<Input['state']> & Input['computed'] & Input['methods'] & WritableStateSource<Prettify<Input['state']>>\r\n>;\r\n\r\nexport type CreateQueryFn<\r\n  TDataFn = unknown,\r\n  TError = Error,\r\n  TData = TDataFn,\r\n  TQueryKey extends QueryKey = QueryKey,\r\n  Input extends SignalStoreFeatureResult = SignalStoreFeatureResult,\r\n> = (store: QueryStore<Input>) => () => CreateQueryOptions<TDataFn, TError, TData, TQueryKey>;\r\n\r\nexport type QueryProp<Name extends string> = `${Uncapitalize<Name>}TanstackQuery`;\r\n\r\nexport type QueryMethod<TData = unknown, TError = Error> = (() => CreateQueryResult<TData, TError>) &\r\n  CreateQueryResult<TData, TError>;\r\nexport const withTanstackQuery = <\r\n  Name extends string,\r\n  TDataFn = unknown,\r\n  TError = Error,\r\n  TData = TDataFn,\r\n  TQueryKey extends QueryKey = QueryKey,\r\n  Input extends SignalStoreFeatureResult = SignalStoreFeatureResult,\r\n>(\r\n  name: Name,\r\n  createQueryFn: CreateQueryFn<TDataFn, TError, TData, TQueryKey, NoInfer<Input>>,\r\n): SignalStoreFeature<\r\n  Input,\r\n  EmptyFeatureResult & { methods: Record<QueryProp<NoInfer<Name>>, QueryMethod<NoInfer<TData>, NoInfer<TError>>> }\r\n> => {\r\n  const prop: QueryProp<NoInfer<Name>> = `${lowerFirstLetter(name)}TanstackQuery`;\r\n  \r\n  return signalStoreFeature(\r\n    withMethods((store) => {\r\n      const query = injectQuery(createQueryFn(store as QueryStore<NoInfer<Input>>));\r\n      \r\n      return {\r\n        [prop]: new Proxy(() => query, {\r\n          get: (_, prop) => Reflect.get(query, prop),\r\n          has: (_, prop) => Reflect.has(query, prop),\r\n        }),\r\n      } as Record<QueryProp<NoInfer<Name>>, QueryMethod<NoInfer<TData>, NoInfer<TError>>>;\r\n    }),\r\n  );\r\n};\r\n```\r\n\r\n### Crafting a Store with Integrated Queries\r\n\r\nCheck out how to structure the store:\r\n\r\n```typescript\r\nexport const PostStore = signalStore(\r\n  withState({ postId: 1}),\r\n  withTanstackQuery('postId', (store) => {\r\n    const apiService = inject(ApiPostService);\r\n    \r\n    return () => {\r\n      const postId = store.postId();\r\n      \r\n      return {\r\n        enabled: !!postId,\r\n        queryKey: ['post', { id: postId }],\r\n        queryFn: () => \r\n          lastValueFrom(apiService.getPost$(postId)).catch((error) => {\r\n            console.error(error);\r\n            return null;\r\n          }),\r\n      };\r\n    };\r\n  }),\r\n);\r\n```\r\n\r\n### Seamless Component Integration\r\n\r\nIt's really simple:\r\n\r\n```typescript\r\n@Component({\r\n  standalone: true,\r\n  selector: 'app-example',\r\n  template: `\r\n    <pre>\r\n      Loading: {{ store.postIdTanstackQuery.isLoading() }}\r\n      Fetching: {{ store.postIdTanstackQuery.isFetching() }}\r\n      Data:\r\n      {{ store.postIdTanstackQuery.data() | json }}\r\n    </pre>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  imports: [JsonPipe],\r\n})\r\nexport class ExampleComponent {\r\n  public readonly store = inject(PostStore);\r\n}\r\n```\r\n\r\n## Real-World Benefits\r\n\r\n1. **Simplified State Logic**: Less code, more functionality\r\n2. **Optimized Performance**: Built-in caching and background updates\r\n3. **Easier Debugging**: Clear, predictable state transitions\r\n4. **Faster Development**: Focus on logic, not configuration\r\n\r\n## Potential Pitfalls to Watch\r\n\r\n- Always use `inject()` for service dependencies\r\n- Leverage `ChangeDetectionStrategy.OnPush` religiously\r\n- Handle error states gracefully\r\n- Master query key strategies for caching and invalidation\r\n\r\n## Useful Resources\r\n\r\n- [TanStack Query for Angular](https://tanstack.com/query/latest/docs/framework/angular/overview)\r\n- [NgRx Signal Store Documentation](https://ngrx.io/guide/signals/signal-store)\r\n\r\n## Wrapping Up\r\n\r\nAs Angular continues to evolve, solutions like NgRx Signal Store and Tanstack Query highlight the potential of modern web development. By embracing these tools, we not only solve todayâ€™s challenges but also prepare ourselves for a future of more efficient and scalable applications.\r\n\r\n**Happy Coding!**","closed_by":{"login":"Pasquale-Favella","id":62385965,"node_id":"MDQ6VXNlcjYyMzg1OTY1","avatar_url":"https://avatars.githubusercontent.com/u/62385965?v=4","gravatar_id":"","url":"https://api.github.com/users/Pasquale-Favella","html_url":"https://github.com/Pasquale-Favella","followers_url":"https://api.github.com/users/Pasquale-Favella/followers","following_url":"https://api.github.com/users/Pasquale-Favella/following{/other_user}","gists_url":"https://api.github.com/users/Pasquale-Favella/gists{/gist_id}","starred_url":"https://api.github.com/users/Pasquale-Favella/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Pasquale-Favella/subscriptions","organizations_url":"https://api.github.com/users/Pasquale-Favella/orgs","repos_url":"https://api.github.com/users/Pasquale-Favella/repos","events_url":"https://api.github.com/users/Pasquale-Favella/events{/privacy}","received_events_url":"https://api.github.com/users/Pasquale-Favella/received_events","type":"User","user_view_type":"public","site_admin":false},"reactions":{"url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/25/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/25/timeline","performed_via_github_app":null,"state_reason":"completed"}],"projects":[{"id":421885911,"node_id":"R_kgDOGSV31w","name":"Knowledgeable","full_name":"Pasquale-Favella/Knowledgeable","private":false,"owner":{"login":"Pasquale-Favella","id":62385965,"node_id":"MDQ6VXNlcjYyMzg1OTY1","avatar_url":"https://avatars.githubusercontent.com/u/62385965?v=4","gravatar_id":"","url":"https://api.github.com/users/Pasquale-Favella","html_url":"https://github.com/Pasquale-Favella","followers_url":"https://api.github.com/users/Pasquale-Favella/followers","following_url":"https://api.github.com/users/Pasquale-Favella/following{/other_user}","gists_url":"https://api.github.com/users/Pasquale-Favella/gists{/gist_id}","starred_url":"https://api.github.com/users/Pasquale-Favella/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Pasquale-Favella/subscriptions","organizations_url":"https://api.github.com/users/Pasquale-Favella/orgs","repos_url":"https://api.github.com/users/Pasquale-Favella/repos","events_url":"https://api.github.com/users/Pasquale-Favella/events{/privacy}","received_events_url":"https://api.github.com/users/Pasquale-Favella/received_events","type":"User","user_view_type":"public","site_admin":false},"html_url":"https://github.com/Pasquale-Favella/Knowledgeable","description":"Beautiful wikipedia search engine with React Node & Express","fork":false,"url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable","forks_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/forks","keys_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/keys{/key_id}","collaborators_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/teams","hooks_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/hooks","issue_events_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/issues/events{/number}","events_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/events","assignees_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/assignees{/user}","branches_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/branches{/branch}","tags_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/tags","blobs_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/git/refs{/sha}","trees_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/git/trees{/sha}","statuses_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/statuses/{sha}","languages_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/languages","stargazers_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/stargazers","contributors_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/contributors","subscribers_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/subscribers","subscription_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/subscription","commits_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/commits{/sha}","git_commits_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/git/commits{/sha}","comments_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/comments{/number}","issue_comment_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/issues/comments{/number}","contents_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/contents/{+path}","compare_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/compare/{base}...{head}","merges_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/merges","archive_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/downloads","issues_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/issues{/number}","pulls_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/pulls{/number}","milestones_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/milestones{/number}","notifications_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/labels{/name}","releases_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/releases{/id}","deployments_url":"https://api.github.com/repos/Pasquale-Favella/Knowledgeable/deployments","created_at":"2021-10-27T16:06:07Z","updated_at":"2023-01-20T11:14:33Z","pushed_at":"2021-11-02T14:31:40Z","git_url":"git://github.com/Pasquale-Favella/Knowledgeable.git","ssh_url":"git@github.com:Pasquale-Favella/Knowledgeable.git","clone_url":"https://github.com/Pasquale-Favella/Knowledgeable.git","svn_url":"https://github.com/Pasquale-Favella/Knowledgeable","homepage":"https://knowledgeable.herokuapp.com/","size":1048,"stargazers_count":3,"watchers_count":3,"language":"JavaScript","has_issues":true,"has_projects":true,"has_downloads":true,"has_wiki":true,"has_pages":false,"has_discussions":false,"forks_count":0,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":0,"license":null,"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":["express","mern-stack","neumorphism","react","search-engine"],"visibility":"public","forks":0,"open_issues":0,"watchers":3,"default_branch":"master"},{"id":587325591,"node_id":"R_kgDOIwHglw","name":"pasquale-favella.github.io","full_name":"Pasquale-Favella/pasquale-favella.github.io","private":false,"owner":{"login":"Pasquale-Favella","id":62385965,"node_id":"MDQ6VXNlcjYyMzg1OTY1","avatar_url":"https://avatars.githubusercontent.com/u/62385965?v=4","gravatar_id":"","url":"https://api.github.com/users/Pasquale-Favella","html_url":"https://github.com/Pasquale-Favella","followers_url":"https://api.github.com/users/Pasquale-Favella/followers","following_url":"https://api.github.com/users/Pasquale-Favella/following{/other_user}","gists_url":"https://api.github.com/users/Pasquale-Favella/gists{/gist_id}","starred_url":"https://api.github.com/users/Pasquale-Favella/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Pasquale-Favella/subscriptions","organizations_url":"https://api.github.com/users/Pasquale-Favella/orgs","repos_url":"https://api.github.com/users/Pasquale-Favella/repos","events_url":"https://api.github.com/users/Pasquale-Favella/events{/privacy}","received_events_url":"https://api.github.com/users/Pasquale-Favella/received_events","type":"User","user_view_type":"public","site_admin":false},"html_url":"https://github.com/Pasquale-Favella/pasquale-favella.github.io","description":"Awesome blogfolio with Next.js","fork":false,"url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io","forks_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/forks","keys_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/keys{/key_id}","collaborators_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/teams","hooks_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/hooks","issue_events_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/events{/number}","events_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/events","assignees_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/assignees{/user}","branches_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/branches{/branch}","tags_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/tags","blobs_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/git/refs{/sha}","trees_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/git/trees{/sha}","statuses_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/statuses/{sha}","languages_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/languages","stargazers_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/stargazers","contributors_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/contributors","subscribers_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/subscribers","subscription_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/subscription","commits_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/commits{/sha}","git_commits_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/git/commits{/sha}","comments_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/comments{/number}","issue_comment_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/comments{/number}","contents_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/contents/{+path}","compare_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/compare/{base}...{head}","merges_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/merges","archive_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/downloads","issues_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues{/number}","pulls_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/pulls{/number}","milestones_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/milestones{/number}","notifications_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/labels{/name}","releases_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/releases{/id}","deployments_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/deployments","created_at":"2023-01-10T13:48:57Z","updated_at":"2025-07-01T13:54:58Z","pushed_at":"2025-07-01T13:54:55Z","git_url":"git://github.com/Pasquale-Favella/pasquale-favella.github.io.git","ssh_url":"git@github.com:Pasquale-Favella/pasquale-favella.github.io.git","clone_url":"https://github.com/Pasquale-Favella/pasquale-favella.github.io.git","svn_url":"https://github.com/Pasquale-Favella/pasquale-favella.github.io","homepage":"https://pasquale-favella.github.io/","size":11927,"stargazers_count":3,"watchers_count":3,"language":"TypeScript","has_issues":true,"has_projects":true,"has_downloads":true,"has_wiki":true,"has_pages":true,"has_discussions":true,"forks_count":1,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":0,"license":{"key":"mit","name":"MIT License","spdx_id":"MIT","url":"https://api.github.com/licenses/mit","node_id":"MDc6TGljZW5zZTEz"},"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":["nextjs","portfolio","react","tailwindcss"],"visibility":"public","forks":1,"open_issues":0,"watchers":3,"default_branch":"main"},{"id":440884146,"node_id":"R_kgDOGkdbsg","name":"Spring-React-PokeShow","full_name":"Pasquale-Favella/Spring-React-PokeShow","private":false,"owner":{"login":"Pasquale-Favella","id":62385965,"node_id":"MDQ6VXNlcjYyMzg1OTY1","avatar_url":"https://avatars.githubusercontent.com/u/62385965?v=4","gravatar_id":"","url":"https://api.github.com/users/Pasquale-Favella","html_url":"https://github.com/Pasquale-Favella","followers_url":"https://api.github.com/users/Pasquale-Favella/followers","following_url":"https://api.github.com/users/Pasquale-Favella/following{/other_user}","gists_url":"https://api.github.com/users/Pasquale-Favella/gists{/gist_id}","starred_url":"https://api.github.com/users/Pasquale-Favella/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Pasquale-Favella/subscriptions","organizations_url":"https://api.github.com/users/Pasquale-Favella/orgs","repos_url":"https://api.github.com/users/Pasquale-Favella/repos","events_url":"https://api.github.com/users/Pasquale-Favella/events{/privacy}","received_events_url":"https://api.github.com/users/Pasquale-Favella/received_events","type":"User","user_view_type":"public","site_admin":false},"html_url":"https://github.com/Pasquale-Favella/Spring-React-PokeShow","description":"Toy web app for pokemon discovery with spring boot and react","fork":false,"url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow","forks_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/forks","keys_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/keys{/key_id}","collaborators_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/teams","hooks_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/hooks","issue_events_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/issues/events{/number}","events_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/events","assignees_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/assignees{/user}","branches_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/branches{/branch}","tags_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/tags","blobs_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/git/refs{/sha}","trees_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/git/trees{/sha}","statuses_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/statuses/{sha}","languages_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/languages","stargazers_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/stargazers","contributors_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/contributors","subscribers_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/subscribers","subscription_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/subscription","commits_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/commits{/sha}","git_commits_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/git/commits{/sha}","comments_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/comments{/number}","issue_comment_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/issues/comments{/number}","contents_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/contents/{+path}","compare_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/compare/{base}...{head}","merges_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/merges","archive_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/downloads","issues_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/issues{/number}","pulls_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/pulls{/number}","milestones_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/milestones{/number}","notifications_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/labels{/name}","releases_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/releases{/id}","deployments_url":"https://api.github.com/repos/Pasquale-Favella/Spring-React-PokeShow/deployments","created_at":"2021-12-22T14:26:29Z","updated_at":"2023-01-20T11:15:41Z","pushed_at":"2021-12-29T15:55:35Z","git_url":"git://github.com/Pasquale-Favella/Spring-React-PokeShow.git","ssh_url":"git@github.com:Pasquale-Favella/Spring-React-PokeShow.git","clone_url":"https://github.com/Pasquale-Favella/Spring-React-PokeShow.git","svn_url":"https://github.com/Pasquale-Favella/Spring-React-PokeShow","homepage":"","size":393,"stargazers_count":3,"watchers_count":3,"language":"Java","has_issues":true,"has_projects":true,"has_downloads":true,"has_wiki":true,"has_pages":false,"has_discussions":false,"forks_count":0,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":0,"license":null,"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":["fullstack","react","spring-boot"],"visibility":"public","forks":0,"open_issues":0,"watchers":3,"default_branch":"master"}]},"__N_SSG":true}