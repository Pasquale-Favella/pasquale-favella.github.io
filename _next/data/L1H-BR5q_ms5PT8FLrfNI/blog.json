{"pageProps":{"posts":[{"url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/4","repository_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io","labels_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/4/labels{/name}","comments_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/4/comments","events_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/4/events","html_url":"https://github.com/Pasquale-Favella/pasquale-favella.github.io/issues/4","id":1535086505,"node_id":"I_kwDOIwHgl85bf4-p","number":4,"title":"React Hooks - useReducer()","user":{"login":"Pasquale-Favella","id":62385965,"node_id":"MDQ6VXNlcjYyMzg1OTY1","avatar_url":"https://avatars.githubusercontent.com/u/62385965?v=4","gravatar_id":"","url":"https://api.github.com/users/Pasquale-Favella","html_url":"https://github.com/Pasquale-Favella","followers_url":"https://api.github.com/users/Pasquale-Favella/followers","following_url":"https://api.github.com/users/Pasquale-Favella/following{/other_user}","gists_url":"https://api.github.com/users/Pasquale-Favella/gists{/gist_id}","starred_url":"https://api.github.com/users/Pasquale-Favella/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Pasquale-Favella/subscriptions","organizations_url":"https://api.github.com/users/Pasquale-Favella/orgs","repos_url":"https://api.github.com/users/Pasquale-Favella/repos","events_url":"https://api.github.com/users/Pasquale-Favella/events{/privacy}","received_events_url":"https://api.github.com/users/Pasquale-Favella/received_events","type":"User","site_admin":false},"labels":[{"id":4991782391,"node_id":"LA_kwDOIwHgl88AAAABKYiN9w","url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/labels/documentation","name":"documentation","color":"0075ca","default":true,"description":"Improvements or additions to documentation"},{"id":5011911244,"node_id":"LA_kwDOIwHgl88AAAABKruyTA","url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/labels/React","name":"React","color":"1d76db","default":false,"description":""}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2023-01-16T15:06:35Z","updated_at":"2023-01-16T15:06:50Z","closed_at":null,"author_association":"OWNER","active_lock_reason":null,"body":"The useReducer hook in React is a way to manage the state of a component using a reducer function. A reducer function is a pure function that takes the current state and an action, and returns the next state.\r\n\r\nTo use the useReducer hook, you need to import it from the react library and pass it two arguments: a reducer function and an initial state. The reducer function should take the current state and an action as arguments, and return the next state.\r\n\r\nHere is an example of how to use the useReducer hook to manage the state of a counter component:\r\n\r\n``` js\r\nimport { useReducer } from 'react';\r\n\r\nfunction reducer(state, action) {\r\n  switch (action.type) {\r\n    case 'increment':\r\n      return { count: state.count + 1 };\r\n    case 'decrement':\r\n      return { count: state.count - 1 };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nfunction Counter() {\r\n  const [state, dispatch] = useReducer(reducer, { count: 0 });\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={() => dispatch({ type: 'decrement' })}>-</button>\r\n      <span>{state.count}</span>\r\n      <button onClick={() => dispatch({ type: 'increment' })}>+</button>\r\n    </div>\r\n  );\r\n}\r\n\r\n```\r\nIn this example, the useReducer hook is used to manage the state of a counter component. The reducer function takes the current state and an action, and returns the next state based on the action type.\r\n\r\nThe initial state of the counter is passed to the useReducer hook as the second argument. In this case, the initial state is an object with a count property set to 0.\r\n\r\nThe useReducer hook returns an array with two elements: the current state, and a dispatch function. The dispatch function is used to update the state by passing an action to the reducer function.\r\n\r\nIn the example above, the dispatch function is passed to the onClick handlers of the + and - buttons. When the + button is clicked, the dispatch function is called with an action of type increment, which causes the reducer function to increment the count by 1. Similarly, when the - button is clicked, the dispatch function is called with an action of type decrement, which causes the reducer function to decrement the count by 1.\r\n\r\nThe useReducer hook is a powerful way to manage the state of a component, as it allows you to separate the logic for updating the state from the component's render function. It also provides a predictable and consistent way to update the state, which can make debugging and testing easier.\r\n\r\n\r\n\r\n","reactions":{"url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/4/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/4/timeline","performed_via_github_app":null,"state_reason":null},{"url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/3","repository_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io","labels_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/3/labels{/name}","comments_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/3/comments","events_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/3/events","html_url":"https://github.com/Pasquale-Favella/pasquale-favella.github.io/issues/3","id":1534783778,"node_id":"I_kwDOIwHgl85bevEi","number":3,"title":"React Query - The basics","user":{"login":"Pasquale-Favella","id":62385965,"node_id":"MDQ6VXNlcjYyMzg1OTY1","avatar_url":"https://avatars.githubusercontent.com/u/62385965?v=4","gravatar_id":"","url":"https://api.github.com/users/Pasquale-Favella","html_url":"https://github.com/Pasquale-Favella","followers_url":"https://api.github.com/users/Pasquale-Favella/followers","following_url":"https://api.github.com/users/Pasquale-Favella/following{/other_user}","gists_url":"https://api.github.com/users/Pasquale-Favella/gists{/gist_id}","starred_url":"https://api.github.com/users/Pasquale-Favella/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Pasquale-Favella/subscriptions","organizations_url":"https://api.github.com/users/Pasquale-Favella/orgs","repos_url":"https://api.github.com/users/Pasquale-Favella/repos","events_url":"https://api.github.com/users/Pasquale-Favella/events{/privacy}","received_events_url":"https://api.github.com/users/Pasquale-Favella/received_events","type":"User","site_admin":false},"labels":[{"id":4991782391,"node_id":"LA_kwDOIwHgl88AAAABKYiN9w","url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/labels/documentation","name":"documentation","color":"0075ca","default":true,"description":"Improvements or additions to documentation"},{"id":5011911244,"node_id":"LA_kwDOIwHgl88AAAABKruyTA","url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/labels/React","name":"React","color":"1d76db","default":false,"description":""}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2023-01-16T11:38:37Z","updated_at":"2023-01-16T11:39:23Z","closed_at":null,"author_association":"OWNER","active_lock_reason":null,"body":"React Query is a powerful library for managing the caching and fetching of data in a React application. It provides a set of hooks that can be used to easily fetch and cache data, as well as automatically manage the stale-while-revalidate caching strategy.\r\n\r\nOne of the main features of React Query is its caching functionality. By default, React Query will cache the data for each unique query that is made and automatically serve the cached data if the same query is made again. Additionally, React Query will automatically check for updates to the data and refresh the cache if necessary.\r\n\r\nTo use React Query in a React application, you first need to install the library.\r\n\r\n```\r\nnpm install react-query\r\n```\r\nThen you can use the useQuery hook to fetch and cache data.\r\n\r\n``` js\r\nimport { useQuery } from 'react-query'\r\n\r\nfunction MyComponent() {\r\n  const { data, status } = useQuery('users', async () => {\r\n    const response = await fetch('https://jsonplaceholder.typicode.com/users')\r\n    return response.json()\r\n  })\r\n\r\n  if (status === 'loading') {\r\n    return <div>Loading...</div>\r\n  }\r\n\r\n  return (\r\n    <ul>\r\n      {data.map(user => (\r\n        <li key={user.id}>{user.name}</li>\r\n      ))}\r\n    </ul>\r\n  )\r\n}\r\n```\r\nIn this example, the useQuery hook is used to fetch a list of users from a JSON placeholder API. The first argument passed to useQuery is the key of the query, and the second argument is a function that returns a promise that resolves with the data.\r\n\r\nReact Query also provides a way to manually update the cache using the refetch function.\r\n\r\n``` js\r\nfunction MyComponent() {\r\n  const { data, status, refetch } = useQuery('users', async () => {\r\n    const response = await fetch('https://jsonplaceholder.typicode.com/users')\r\n    return response.json()\r\n  })\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={() => refetch()}>Refetch</button>\r\n      ...\r\n    </div>\r\n  )\r\n}\r\n```\r\nIn this example, the refetch function is passed to a button's onClick, which will allow the user to manually refresh the data.\r\n\r\nReact Query also provides a lot of other functionality such as manual invalidation of cache, setting custom cache policies etc. With React Query, it becomes easy to handle caching and fetching of data in a React application, resulting in better performance and user experience.","reactions":{"url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/3/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/3/timeline","performed_via_github_app":null,"state_reason":null},{"url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/1","repository_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io","labels_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/1/labels{/name}","comments_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/1/comments","events_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/1/events","html_url":"https://github.com/Pasquale-Favella/pasquale-favella.github.io/issues/1","id":1527516789,"node_id":"I_kwDOIwHgl85bDA51","number":1,"title":"Angular Observables","user":{"login":"Pasquale-Favella","id":62385965,"node_id":"MDQ6VXNlcjYyMzg1OTY1","avatar_url":"https://avatars.githubusercontent.com/u/62385965?v=4","gravatar_id":"","url":"https://api.github.com/users/Pasquale-Favella","html_url":"https://github.com/Pasquale-Favella","followers_url":"https://api.github.com/users/Pasquale-Favella/followers","following_url":"https://api.github.com/users/Pasquale-Favella/following{/other_user}","gists_url":"https://api.github.com/users/Pasquale-Favella/gists{/gist_id}","starred_url":"https://api.github.com/users/Pasquale-Favella/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Pasquale-Favella/subscriptions","organizations_url":"https://api.github.com/users/Pasquale-Favella/orgs","repos_url":"https://api.github.com/users/Pasquale-Favella/repos","events_url":"https://api.github.com/users/Pasquale-Favella/events{/privacy}","received_events_url":"https://api.github.com/users/Pasquale-Favella/received_events","type":"User","site_admin":false},"labels":[{"id":4991782391,"node_id":"LA_kwDOIwHgl88AAAABKYiN9w","url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/labels/documentation","name":"documentation","color":"0075ca","default":true,"description":"Improvements or additions to documentation"},{"id":5011828087,"node_id":"LA_kwDOIwHgl88AAAABKrptdw","url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/labels/Angular","name":"Angular","color":"F85A56","default":false,"description":""}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2023-01-10T14:44:04Z","updated_at":"2023-01-16T11:15:06Z","closed_at":null,"author_association":"OWNER","active_lock_reason":null,"body":"An Observable in Angular is a powerful way to handle asynchronous data streams. It is a part of the RxJS library, which is a collection of libraries for reactive programming in JavaScript.\r\n\r\nAn Observable is a stream of data that can emit multiple values over time. It is similar to a Promise, but it can emit multiple values over time, rather than just a single value like a Promise does.\r\n\r\nIn Angular, an Observable can be used to handle HTTP requests, WebSockets, and other asynchronous data streams. For example, an Observable can be used to subscribe to a data stream from an API and receive new data as it becomes available.\r\n\r\nTo create an Observable in Angular, you can use the of() or from() methods provided by the RxJS library. These methods take an array or a promise as an argument and return an Observable that will emit the values of the array or the resolved value of the promise.\r\n\r\nHere is an example of how to create an Observable that emits an array of values:\r\n\r\n``` js\r\nimport { of } from 'rxjs';\r\n```\r\n\r\nconst myObservable = of([1, 2, 3]);\r\nYou can then subscribe to the Observable using the subscribe() method. This method takes a callback function as an argument, which will be called every time a new value is emitted by the Observable.\r\n\r\nHere is an example of how to subscribe to the myObservable Observable and log the emitted values to the console:\r\n\r\n``` js\r\nmyObservable.subscribe(val => console.log(val));\r\n```\r\nYou can also use the pipe() method to apply operators to the Observable. Operators are functions that can be used to transform, filter, or aggregate the data emitted by the Observable.\r\n\r\nHere is an example of how to use the map() operator to transform the emitted values:\r\n\r\n``` js\r\nimport { map } from 'rxjs/operators';\r\n\r\nmyObservable.pipe(map(val => val * 2)).subscribe(val => console.log(val));\r\n```\r\nIn this example, the map() operator is used to multiply each emitted value by 2 before it is passed to the subscribe() method.\r\n\r\nOverall, Observables in Angular provide a powerful and flexible way to handle asynchronous data streams, and can be used to handle a wide variety of use cases, from simple event handling to complex data processing.","reactions":{"url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/1/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Pasquale-Favella/pasquale-favella.github.io/issues/1/timeline","performed_via_github_app":null,"state_reason":null}]},"__N_SSG":true}